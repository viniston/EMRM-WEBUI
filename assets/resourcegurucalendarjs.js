
(function () {
    var ref, ref1;

    window.RG = {
        Calendar: {
            Units: {}
        },
        Models: {},
        Collections: {},
        Commands: {},
        Controllers: {},
        Popovers: null,
        Renderer: {},
        Factories: {},
        Validators: {},
        DTO: {},
        FSM: {},
        Interactions: {},
        Views: {
            Calendar: {},
            CustomAvailability: {},
            Downtimes: {},
            Dialogs: {},
            Factories: {},
            Filters: {},
            Resource: {},
            Selectors: {}
        },
        Routers: {},
        Support: {},
        Utils: {},
        Parsers: {},
        Variables: {
            lastRenderCall: null,
            colorSets: {},
            DowntimeType: {
                publicHoliday: 'Public holiday',
                vacation: 'Vacation (personal)',
                personalHoliday: 'Holiday (personal)',
                maternity: 'Maternity/paternity leave',
                sick: 'Sick leave',
                compassionate: 'Compassionate leave'
            },
            Validation: {
                Project: {
                    Archived: "Sorry, this project has been archived and can't be scheduled beyond the date when it was archived."
                },
                Client: {
                    Archived: "Sorry, this client has been archived and can't be scheduled beyond the date when it was archived."
                }
            },
            MaximumDowntimeLength: parseInt((ref = window.validationData) != null ? ref['MaximumDowntimeLength'] : void 0) || 365,
            MaximumCustomAvailabilityLength: parseInt((ref1 = window.validationData) != null ? ref1['MaximumCustomAvailabilityLength'] : void 0) || 365
        },
        initialize: function (root) {
            this.router = new RG.Routers.Calendar({
                root: root
            });
            Backbone.history.start();
        },
        scrollToDate: function (date) {
            window.location.hash = date;
        },
        scrollToToday: function () {
            var offsetLeft;
            offsetLeft = $("aside").width() - 1;
            setTimeout(function () {
                return $(window).scrollLeft($(".cal-unit.current").offset().left - offsetLeft);
            }, 500);
        },
        getApiRoot: function () {
            return "/v1/";
        },
        getCurrentAccount: function () {
            return this._currentAccount != null ? this._currentAccount : this._currentAccount = new RG.Models.Account({
                subdomain: window.location.host.substr(0, window.location.host.indexOf(".")),
                downtimes: window.downtimes
            });
        },
        getLayerHeight: function () {
            var ref2;
            if ((ref2 = document.getElementById("calendar")) != null ? ref2.classList.contains("detailed") : void 0) {
                return 72;
            } else {
                return 38;
            }
        },
        getUnitWidth: function () {
            var ref2;
            if ((ref2 = document.getElementById("calendar")) != null ? ref2.classList.contains("detailed") : void 0) {
                return 160;
            } else {
                return 40;
            }
        },
        resizeBookingWidths: function (factor) {
            window.dateController.triggerChange();
            window.resources.each(function (ri) {
                return ri.trigger("change", ri);
            });
        },
        resizeCards: function () {
            if (this.cardResizer == null) {
                this.cardResizer = new RG.Utils.CardResizer;
            }
            RG.backburner.debounce('resizeCards', this.cardResizer.resize, 100);
        },
        getDateAtClientX: function (clientX) {
            var calUnit, calUnits;
            calUnits = Array.prototype.slice.call(document.querySelectorAll(".cal-unit"));
            calUnit = calUnits.find(function (calUnit) {
                var box;
                box = calUnit.getBoundingClientRect();
                return clientX >= box.left && clientX <= box.left + box.width;
            });
            if (!calUnit) {
                if (clientX <= calUnits[0].getBoundingClientRect().left) {
                    calUnit = calUnits[0];
                } else {
                    calUnit = calUnits[calUnits.length - 1];
                }
            }
            return RG.Utils.BookingMerger.getDateFromStr(calUnit.dataset.date);
        },
        getCurrentResource: function () {
            var y;
            y = $("#calendar").hasClass("detailed") ? 180 : 200;
            return RG.getResourceAtClientY(y);
        },
        setCurrentResource: function (resource) {
            var firstCardPosition, lineElement;
            lineElement = $(".resource-line[data-resource-id=" + resource.cid + "]");
            firstCardPosition = $("#calendar").hasClass("detailed") ? 135 : 167;
            $(window).scrollTop(lineElement.offset().top - firstCardPosition);
        },
        getResourceAtClientY: function (clientY) {
            var cardElement;
            cardElement = $(document.elementFromPoint(1, clientY)).closest(".resource");
            return window.resources.find(function (ri) {
                return ri.cid === cardElement.data('resource-id');
            });
        },
        setHoverElement: function (el) {
            var ref2, ref3;
            if (this._currentHover === el) {
                return;
            }
            if ((ref2 = this._currentHover) != null) {
                ref2.classList.remove("hover");
            }
            this._currentHover = el;
            if ((ref3 = this._currentHover) != null) {
                ref3.classList.add("hover");
            }
        },
        updateLongBookings: function () {
            var booking, i, j, len, len1, range, ref2, ref3, resource;
            ref2 = window.resources.models;
            for (i = 0, len = ref2.length; i < len; i++) {
                resource = ref2[i];
                ref3 = resource.bookings.models;
                for (j = 0, len1 = ref3.length; j < len1; j++) {
                    booking = ref3[j];
                    range = booking.getSavedDateRange();
                    if (range.getNumberOfDays() > RG.Utils.numberOfVisibleDays()) {
                        booking.trigger('reset');
                    }
                    null;
                }
            }
        },
        moveToDate: function (date) {
            var element;
            element = $(".cal-unit[data-date=" + (RG.Utils.DateFormatter.getISODate(date)) + "]");
            $(window).scrollLeft(element.offset().left - 250);
        },
        spin: function (target, options) {
            if (options == null) {
                options = {
                    lines: 9,
                    length: 3,
                    width: 2,
                    radius: 2,
                    corners: 1,
                    rotate: 0,
                    speed: 1,
                    shadow: false,
                    hwaccel: false,
                    left: '160px'
                };
            }
            window.requestAnimationFrame((function (_this) {
                return function () {
                    _this.stopSpinners();
                    if (target) {
                        _this.Variables.spinner = new Spinner(options).spin(target);
                    }
                };
            })(this));
        },
        stopSpinners: function () {
            window.requestAnimationFrame((function (_this) {
                return function () {
                    if (_this.Variables.spinner) {
                        _this.Variables.spinner.stop();
                        _this.Variables.spinner = null;
                    }
                };
            })(this));
        },
        getStylesheet: function () {
            if (this._stylesheet) {
                return this._stylesheet;
            }
            return this._stylesheet = (function () {
                var style;
                style = document.createElement("style");
                style.appendChild(document.createTextNode(""));
                document.head.appendChild(style);
                return style.sheet;
            })();
        },
        closeAllSelections: function () {
            var ref2, ref3;
            RG.Utils.select2Close($(".select2-drop-active"), true);
            if ((ref2 = $(".match-type-select.select2-container-active")) != null) {
                if ((ref3 = ref2.data('select2')) != null) {
                    ref3.close();
                }
            }
            $(".filters").removeClass("open");
        },
        closeSelectedOptions: function () {
            var ref2, ref3;
            RG.Utils.select2Close($(".select2-drop-active"), true);
            if ((ref2 = $(".match-type-select.select2-container-active")) != null) {
                if ((ref3 = ref2.data('select2')) != null) {
                    ref3.close();
                }
            }
        },
        clearStaleDropdowns: function () {
            $(".select2-drop-active").select2('enable', false).select2('enable', true);
        },
        closeAllDropdowns: function () {
            $(".years-dropdown").removeClass("open");
            $(".color-by.dropdown").removeClass("open");
            $('.right-menu li.dropdown.open').removeClass('open');
            $(".filters").removeClass("open");
        },
        closeControlDropdowns: function () {
            $('.right-menu li.dropdown.open').removeClass('open');
            $(".years-dropdown").removeClass("open");
            $(".color-by.dropdown").removeClass("open");
        },
        backburner: new backburner.Backburner(['layers', 'resizeCards', 'render', 'renderCheck']),
        getBookingById: function (id) {
            var booking, i, j, len, len1, ref2, ref3, resource;
            ref2 = window.resources.models;
            for (i = 0, len = ref2.length; i < len; i++) {
                resource = ref2[i];
                ref3 = resource.bookings.models;
                for (j = 0, len1 = ref3.length; j < len1; j++) {
                    booking = ref3[j];
                    if (booking.id === id) {
                        return booking;
                    }
                }
            }
        }
    };

}).call(this);
;
(function () {
    RG.Factories.AvailabilityManager = (function () {
        function AvailabilityManager(resource) {
            this.resource = resource;
        }

        AvailabilityManager.prototype.create = function () {
            return new RG.Utils.AvailabilityManager({
                availablePeriods: this.resource.availablePeriods,
                customAvailablePeriods: this.resource.customAvailablePeriods,
                overtimes: this.resource.overtimes,
                downtimes: this.resource.downtimes,
                resource: this.resource,
                timeZone: this.resource.getTimeZone()
            });
        };

        return AvailabilityManager;

    })();

}).call(this);
;
(function () {
    RG.Validators.CustomAvailabilityLengthValidator = (function () {
        function CustomAvailabilityLengthValidator() { }

        CustomAvailabilityLengthValidator.prototype.validate = function (view) {
            if (view.getDateRange().getNumberOfDays() <= RG.Variables.MaximumCustomAvailabilityLength) {
                $(view.el).find(".error").hide();
                return true;
            }
            $(view.el).find(".error").text("Woah there, you're changing the availability for over a year. It is much better to make this type of change to the resource's \"normal availability\" which you can edit in the Resources section. Alternatively, you can make multiple changes here with each one spanning less than a year.").show();
            return false;
        };

        return CustomAvailabilityLengthValidator;

    })();

}).call(this);
;
(function () {
    RG.Validators.DowntimeLengthValidator = (function () {
        function DowntimeLengthValidator() { }

        DowntimeLengthValidator.prototype.validate = function (view) {
            if (view.dateRangeSelector.getDateRange().getNumberOfDays() <= RG.Variables.MaximumDowntimeLength) {
                $(view.el).find(".error").hide();
                return true;
            }
            $(view.el).find(".error").text("Woah there, you're changing the availability for over a year. It is much better to make this type of change to the resource's \"normal availability\" which you can edit in the Resources section. Alternatively, you can make multiple changes here with each one spanning less than a year.").show();
            return false;
        };

        return DowntimeLengthValidator;

    })();

}).call(this);
;
(function () {
    RG.Utils.AvailabilityToggle = (function () {
        AvailabilityToggle.prototype.toggleTitle = function (mode) {
            if (mode) {
                return 'Hide Availability';
            } else {
                return 'Show Availability';
            }
        };

        function AvailabilityToggle(linesView, defaultValue) {
            this.linesView = linesView;
            this.bToggle = new RG.Utils.BinaryToggle(defaultValue, 'availabilityToggle');
            this.title = this.toggleTitle(this.bToggle.mode);
            this.analytics = window.analytics || {
                track: function () {
                    return console.log('Analytics not initialized');
                }
            };
        }

        AvailabilityToggle.prototype.toggle = function () {
            this.bToggle.toggle();
            this.title = this.toggleTitle(this.bToggle.mode);
            this._refreshCalendar();
            return this._track();
        };

        AvailabilityToggle.prototype.shouldRenderUtilisation = function () {
            return this.bToggle.mode;
        };

        AvailabilityToggle.prototype._refreshCalendar = function () {
            return setTimeout((function (_this) {
                return function () {
                    var dateRange, endDate, startDate;
                    startDate = _this.linesView.dateController._startDate();
                    endDate = _this.linesView.dateController._endDate();
                    dateRange = new RG.Utils.DateRange(startDate, endDate);
                    return _this.linesView.collection.each(function (resource) {
                        return resource.availability.trigger('refresh', dateRange);
                    });
                };
            })(this), 0);
        };

        AvailabilityToggle.prototype._track = function () {
            return setTimeout((function (_this) {
                return function () {
                    return _this.analytics.track('Toggled Availability Bar');
                };
            })(this), 1000);
        };

        return AvailabilityToggle;

    })();

}).call(this);
;
(function () {
    RG.Utils.BinaryToggle = (function () {
        function BinaryToggle(mode, storageString) {
            this.mode = mode != null ? mode : false;
            this.storageString = storageString != null ? storageString : 'binaryToggle';
        }

        BinaryToggle.prototype.toggle = function () {
            this.mode = !this.mode;
            return window.rgStorage.set(this.storageString, this.mode);
        };

        return BinaryToggle;

    })();

}).call(this);
;
(function () {
    RG.Utils.BookingDataParser = {
        boot: function (host) {
            var bookingsPromise, bootData, bootstrapPromise, data, requestDate, resourcesPromise;
            this.host = host;
            this.lastPoll = new Date();
            this.pollId = 0;
            this.resourcesToReset = {};
            this.bookingsEtag = this.resourcesEtag = this.downtimesEtag = null;
            this.lastResourceBookingRender = {};
            data = {
                calendar: 1
            };
            if (window.location.hash) {
                data['date'] = window.location.hash.replace('#', '');
            }
            if (data['date']) {
                requestDate = new Date(data['date']);
            } else {
                requestDate = new Date();
            }
            if (isNaN(requestDate)) {
                requestDate = new Date();
            }
            bootData = {};
            bootstrapPromise = Q.promise(function (resolve) {
                //return $.ajax("/schedule/bootstrap", {
                return $.ajax("http://localhost/EMRMAPI/schedule/bootstrap", {
                    //return $.ajax("http://localhost/EMRMAPI/schedule/resources/bootstrap", {
                    data: data,
                    timeout: 30000,
                    success: function (data, status, xhr) {
                        var i, key, len, ref;
                        window.currentUserDate.set(data.today);
                        RG.Variables.dataDateRange = new RG.Utils.DateRange(RG.Utils.BookingDataParser.getDateFromStr(data.start_date), RG.Utils.BookingDataParser.getDateFromStr(data.end_date));
                        ref = ['today', 'end_date', 'start_date'];
                        for (i = 0, len = ref.length; i < len; i++) {
                            key = ref[i];
                            delete data[key];
                        }
                        bootData = _.extend(bootData, data);
                        return resolve();
                    },
                    error: function (responseData) {
                        if (responseData.status === 400 && responseData.statusText === "Bad Request") {
                            return alert(responseData.responseText);
                        } else {
                            return $("body").html(responseData.responseText);
                        }
                    }
                });
            });
            resourcesPromise = Q.promise(function (resolve) {
                //return $.ajax((RG.getApiRoot()) + "/resources?detail=1&limit=0", {
                return $.ajax("http://localhost/EMRMAPI/resources?detail=1&limit=0", {

                    timeout: 30000,
                    success: function (data, status, xhr) {
                        var etag;
                        etag = "c2e3ecb9a19c3816eeb46b2ea75d0aa3";
                        //etag = xhr.getResponseHeader("CustomETag");
                        bootData = _.extend(bootData, {
                            resources: JSON.stringify(data),
                            resources_etag: etag
                        });
                        return resolve();
                    },
                    error: function (responseData) {
                        if (responseData.status === 400 && responseData.statusText === "Bad Request") {
                            return alert(responseData.responseText);
                        } else {
                            return $("body").html(responseData.responseText);
                        }
                    }
                });
            });
            bookingsPromise = Q.promise(function (resolve) {
                var endDate, endDateStr, startDate, startDateStr;
                startDate = new Date(requestDate);
                startDate.setDate(startDate.getDate() - (4 * 7));
                startDateStr = RG.Utils.DateFormatter.getISODate(startDate);
                endDate = new Date(requestDate);
                endDate.setDate(endDate.getDate() + (12 * 7));
                endDateStr = RG.Utils.DateFormatter.getISODate(endDate);
                //return $.ajax((RG.getApiRoot()) + "/bookings?start_date=" + startDateStr + "&end_date=" + endDateStr + "&limit=0&calendar=1", {
                return $.ajax("http://localhost/EMRMAPI" + "/bookings?start_date=" + startDateStr + "&end_date=" + endDateStr + "&limit=0&calendar=1", {
                    timeout: 30000,
                    success: function (data, status, xhr) {
                        var etag;

                        etag = "c2e3ecb9a19c3816eeb46b2ea75d0aa3";
                        bootData = _.extend(bootData, {
                            bookings: JSON.stringify(data),
                            bookings_etag: etag
                        });
                        return resolve();
                    },
                    error: function (responseData) {
                        if (responseData.status === 400 && responseData.statusText === "Bad Request") {
                            return alert(responseData.responseText);
                        } else {
                            return $("body").html(responseData.responseText);
                        }
                    }
                });
            });
            return Q.allSettled([bootstrapPromise, resourcesPromise, bookingsPromise]).then(function () {
                return RG.Utils.BookingDataParser.parse(bootData).then(function () {
                    var limit;
                    $("#calendar").show();
                    RG.resizeCards();
                    limit = 50;
                    window.resourceScroller = new RG.Utils.InfiniteResourceScroller($(window), $(document), window.resourcePaginator, data.resources, limit);
                    return window.resourceScroller.start();
                });
            });
        },
        parse: function (data) {
            return Q.promise((function (_this) {
                return function (resolve) {
                    var key, parsedData, value;
                    _this.setupEtags(data);
                    parsedData = {};
                    for (key in data) {
                        value = data[key];
                        parsedData[key] = $.parseJSON(value);
                    }
                    _this.setupTimeZones(parsedData);
                    _this.setupBookers(parsedData);
                    _this.setupDeletedBookers(parsedData);
                    _this.setupDowntimeTypes(parsedData);
                    _this.setupNotice(parsedData);
                    _this.setupResourceTypes(parsedData);
                    _this.setupClients(parsedData);
                    _this.setupDeletedClients(parsedData);
                    _this.setupProjects(parsedData);
                    _this.setupDeletedProjects(parsedData);
                    _this.setupResources(parsedData);
                    _this.setupDowntimes(parsedData.downtimes);
                    _this.setupFilters(parsedData);
                    _this.setupDefaultBookingHours();
                    return setTimeout(function () {
                        RG.initialize($("#calendar"));
                        return resolve();
                    }, 1);
                };
            })(this));
        },
        setupEtags: function (data) {
            RG.Utils.BookingDataParser.resourcesEtag = data.resources_etag;
            RG.Utils.BookingDataParser.downtimesEtag = data.downtimes_etag;
            RG.Utils.BookingDataParser.bookingsEtag = data.bookings_etag;
            delete data.resources_etag;
            delete data.downtimes_etag;
            return delete data.bookings_etag;
        },
        setupTimeZones: function (data) {
            return window.timeZones = new RG.Collections.TimeZones(data.time_zones);
        },
        setupDefaultBookingHours: function () {
            var endKey, i, key, len, ref, resourceType, results, startKey;
            ref = window.resourceTypes.models;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                resourceType = ref[i];
                key = "Duration:" + (resourceType.get('name'));
                if (!window.rgStorage.has(key)) {
                    if (resourceType.get('name') === 'Person') {
                        window.rgStorage.set(key, 480);
                    } else {
                        window.rgStorage.set(key, 60);
                    }
                }
                startKey = "TimeRange:StartTime:" + (resourceType.get('name'));
                if (!window.rgStorage.has(startKey)) {
                    window.rgStorage.set(startKey, 540);
                }
                endKey = "TimeRange:EndTime:" + (resourceType.get('name'));
                if (!window.rgStorage.has(endKey)) {
                    results.push(window.rgStorage.set(endKey, 600));
                } else {
                    results.push(void 0);
                }
            }
            return results;
        },
        getDateFromStr: function (dateStr) {
            var d, m, y;
            y = parseInt(dateStr.substr(0, 4), 10);
            m = parseInt(dateStr.substr(5, 2), 10);
            d = parseInt(dateStr.substr(8, 2), 10);
            return new Date(y, m - 1, d);
        },
        setupNotice: function (data) {
            return window.onboardingNotice = data.notice;
        },
        setupDowntimeTypes: function (data) {
            return window.downtimeTypes.reset(data.downtime_types);
        },
        setupDowntimes: function (downtimesData) {
            var dateProcessor, parser;
            dateProcessor = RG.Utils.BookingDataParser.getDateFromStr;
            parser = new RG.Parsers.DowntimeParser(downtimesData, dateProcessor, window.downtimes, window.timeZones, window.downtimeTypes);
            return parser.parse();
        },
        setupFilters: function (data) {
            var parser;
            parser = new RG.Parsers.SavedFilterParser(data.saved_filters, window.savedFilters);
            return parser.parse();
        },
        setupBookers: function (data) {
            var parser;
            parser = new RG.Parsers.BookerParser(data.users, data.resources, window.bookers);
            return parser.parse();
        },
        setupDeletedBookers: function (data) {
            var parser;
            parser = new RG.Parsers.DeletedBookerParser(data.deleted_bookers, window.deletedBookers);
            return parser.parse();
        },
        setupResourceTypes: function (data) {
            var parser;
            parser = new RG.Parsers.ResourceTypeParser(data.resource_types, window.resourceTypes);
            return parser.parse();
        },
        setupResources: function (data) {
            var dateProcessor, options, parser;
            dateProcessor = RG.Utils.BookingDataParser.getDateFromStr;
            this.bookingBuilder = new RG.Parsers.BookingBuilder(dateProcessor, new RG.Parsers.DurationParser(dateProcessor), window.projects, window.clients, window.deletedProjects, window.deletedClients, window.bookers, window.deletedBookers);
            options = {
                resourceTypes: window.resourceTypes,
                clients: window.clients,
                projects: window.projects,
                bookingParser: new RG.Parsers.BookingParser(data.bookings, this.bookingBuilder),
                customFieldParser: new RG.Parsers.CustomFieldParser,
                availablePeriodParser: new RG.Parsers.AvailablePeriodParser(dateProcessor),
                customAvailablePeriodParser: new RG.Parsers.CustomAvailablePeriodParser(dateProcessor),
                overtimeParser: new RG.Parsers.OvertimeParser(data.overtimes, dateProcessor)
            };
            parser = new RG.Parsers.ResourceParser(data.resources, window.resources, window.timeZones, options);
            return parser.parse();
        },
        setupClients: function (data) {
            var parser;
            parser = new RG.Parsers.ClientParser(data.clients, data.clients_archived, window.clients);
            return parser.parse();
        },
        setupDeletedClients: function (data) {
            var parser;
            parser = new RG.Parsers.DeletedClientParser(data.deleted_clients, window.deletedClients);
            return parser.parse();
        },
        setupProjects: function (data) {
            var parser;
            parser = new RG.Parsers.ProjectParser(data.projects, data.projects_archived, window.clients.models, window.projects);
            return parser.parse();
        },
        setupDeletedProjects: function (data) {
            var parser;
            parser = new RG.Parsers.DeletedProjectParser(data.deleted_projects, window.clients.models, window.deletedProjects);
            return parser.parse();
        },
        processRawBookingData: function (data) {
            var b, booking, i, j, k, len, len1, len2, ref, ref1, resource, resource_has_booking, results;
            ref = window.resources.models;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                for (j = 0, len1 = data.length; j < len1; j++) {
                    booking = data[j];
                    if (!(booking.resource_id === resource.get('id'))) {
                        continue;
                    }
                    resource_has_booking = false;
                    ref1 = resource.bookings.models;
                    for (k = 0, len2 = ref1.length; k < len2; k++) {
                        b = ref1[k];
                        if (booking.id === b.get('id')) {
                            resource_has_booking = true;
                            break;
                        }
                    }
                    if (!resource_has_booking) {
                        resource.bookings.add(this.bookingBuilder.build(booking), {
                            silent: true
                        });
                    }
                }
                results.push(resource.bookings.trigger('reset'));
            }
            return results;
        },
        resourcesPoll: function (staleCheckFn) {
            //return $.ajax("/v1/" + RG.Utils.BookingDataParser.host + "/resources?detail=1&limit=0", {
            return $.ajax("http://localhost/EMRMAPI/bookings/resources?detail=1&limit=0", {
                headers: {
                    "If-None-Match": RG.Utils.BookingDataParser.resourcesEtag
                },
                timeout: 30000,
                success: function (data, status, xhr) {
                    var bookedClientsAndProjectsChanged;
                    if (staleCheckFn()) {
                        return;
                    }
                    RG.Utils.BookingDataParser.resourcesEtag = xhr.getResponseHeader("CustomETag");
                    bookedClientsAndProjectsChanged = false;
                    RG.backburner.run(function () {
                        var ap, apm, aps, cap, capm, caps, i, j, k, lastPollWithOffset, len, len1, len2, oldBookedClientIds, oldBookedProjectIds, parser, ref, ref1, resource, results, ri;
                        if (xhr.status !== 200) {
                            return true;
                        }
                        lastPollWithOffset = (new Date(RG.Utils.BookingDataParser.lastPoll)).valueOf() - 15000;
                        results = [];
                        for (i = 0, len = data.length; i < len; i++) {
                            resource = data[i];
                            if (!((new Date(resource.updated_at)).valueOf() > lastPollWithOffset)) {
                                continue;
                            }
                            ri = window.resources.findWhere({
                                id: resource.id
                            });
                            if (!ri) {
                                continue;
                            }
                            oldBookedClientIds = ri.attributes.bookedClients.map(function (client) {
                                return client.id;
                            }).sort();
                            oldBookedProjectIds = ri.attributes.bookedProjects.map(function (project) {
                                return project.id;
                            }).sort();
                            ri.set('bookedClients', window.clients.select(function (c) {
                                return _.contains(resource.booked_client_ids, c.id);
                            }));
                            ri.set('bookedProjects', window.projects.select(function (c) {
                                return _.contains(resource.booked_project_ids, c.id);
                            }));
                            if (!_.isEqual(oldBookedClientIds, resource.booked_client_ids.sort()) || !_.isEqual(oldBookedProjectIds, resource.booked_project_ids.sort())) {
                                bookedClientsAndProjectsChanged = true;
                            }
                            aps = [];
                            ref = resource.available_periods;
                            for (j = 0, len1 = ref.length; j < len1; j++) {
                                ap = ref[j];
                                apm = new RG.Models.AvailablePeriod({
                                    weekDay: ap.week_day,
                                    startTime: ap.start_time,
                                    endTime: ap.end_time,
                                    validFrom: RG.Utils.BookingDataParser.getDateFromStr(ap.valid_from)
                                });
                                if (ap.valid_until) {
                                    apm.set({
                                        validUntil: RG.Utils.BookingDataParser.getDateFromStr(ap.valid_until)
                                    });
                                }
                                aps.push(apm);
                            }
                            if (!_.isEqual(RG.Utils.getModelAttributes(aps), RG.Utils.getModelAttributes(ri.availablePeriods.models))) {
                                ri.availablePeriods.reset(aps);
                            }
                            caps = [];
                            ref1 = resource.custom_available_periods;
                            for (k = 0, len2 = ref1.length; k < len2; k++) {
                                cap = ref1[k];
                                capm = new RG.Models.CustomAvailablePeriod({
                                    weekDay: cap.week_day,
                                    startTime: cap.start_time,
                                    endTime: cap.end_time,
                                    date: RG.Utils.BookingDataParser.getDateFromStr(cap.date),
                                    creator_id: cap.creator_id
                                });
                                caps.push(capm);
                            }
                            if (!_.isEqual(RG.Utils.getModelAttributes(caps), RG.Utils.getModelAttributes(ri.customAvailablePeriods.models))) {
                                ri.customAvailablePeriods.reset(caps);
                            }
                            if (resource.overtimes) {
                                parser = new RG.Parsers.OvertimeParser(resource.overtimes, RG.Utils.BookingDataParser.getDateFromStr);
                                results.push(parser.parse(ri, resource.overtimes));
                            } else {
                                results.push(void 0);
                            }
                        }
                        return results;
                    });
                    if (bookedClientsAndProjectsChanged) {
                        return window.resources.trigger('change:booked');
                    }
                }
            });
        },
        downtimesPoll: function (staleCheckFn, dateRange) {
            if (dateRange == null) {
                dateRange = new RG.Utils.DateRange(RG.Utils.firstVisibleDate(), RG.Utils.lastVisibleDate());
            }
            //return $.ajax("/v1/" + RG.Utils.BookingDataParser.host + "/downtimes", {
            return $.ajax("http://localhost/EMRMAPI/bookings/downtimes", {
                headers: {
                    'If-None-Match': RG.Utils.BookingDataParser.downtimesEtag
                },
                timeout: 30000,
                data: {
                    from: encodeURIComponent(dateRange.startDate.format('YYYY-MM-DD')),
                    to: encodeURIComponent(dateRange.endDate.format('YYYY-MM-DD'))
                },
                success: function (data, status, xhr) {
                    if (staleCheckFn()) {
                        return;
                    }
                    RG.Utils.BookingDataParser.downtimesEtag = xhr.getResponseHeader("CustomETag");
                    if (xhr.status !== 200) {
                        return true;
                    }
                    RG.Utils.BookingDataParser.setupDowntimes(data);
                }
            });
        },
        bookingsPoll: function (staleCheckFn) {
            var currentPollTime;
            currentPollTime = new Date;
            //return $.ajax("/v1/" + RG.Utils.BookingDataParser.host + "/bookings", {
            return $.ajax("http://localhost/EMRMAPI/bookings/poll", {
                headers: {
                    'If-None-Match': RG.Utils.BookingDataParser.bookingsEtag
                },
                timeout: 30000,
                data: {
                    start_date: encodeURIComponent(RG.Utils.firstVisibleDate().format('YYYY-MM-DD')),
                    end_date: encodeURIComponent(RG.Utils.lastVisibleDate().format('YYYY-MM-DD')),
                    calendar: 1
                },
                success: function (data, status, xhr) {

                    if (staleCheckFn()) {
                        return;
                    }
                    RG.Utils.BookingDataParser.bookingsEtag = xhr.getResponseHeader("CustomETag");
                    return RG.backburner.run(function () {
                        if (xhr.status !== 200) {
                            return true;
                        }
                        return window.resources.each(function (ri) {
                            var allBookingIds, bookings, removedBookings;
                            bookings = data.filter(function (booking) {
                                return booking.resource_id === ri.id;
                            });
                            allBookingIds = data.filter(function (b) {
                                return b.resource_id === ri.id;
                            }).map(function (b) {
                                return b.id;
                            });
                            removedBookings = ri.bookings.filter(function (b) {
                                return allBookingIds.indexOf(b.get('id')) === -1;
                            });
                            bookings.forEach(function (booking) {
                                var b, booker, bookingUpdatedAt, client, newAttributes, project, ref;
                                b = ri.bookings.findWhere({
                                    id: booking.id
                                });
                                if (b == null) {
                                    b = new RG.Models.Booking;
                                }
                                bookingUpdatedAt = new Date(booking.updated_at);
                                if (((ref = b.get('updatedAt')) != null ? ref.getTime() : void 0) === bookingUpdatedAt.getTime()) {
                                    return;
                                }
                                newAttributes = {
                                    id: booking.id,
                                    notes: booking.notes,
                                    startDate: RG.Utils.BookingDataParser.getDateFromStr(booking.start_date),
                                    endDate: RG.Utils.BookingDataParser.getDateFromStr(booking.end_date),
                                    refreshable: booking.refreshable,
                                    createdAt: new Date(booking.created_at),
                                    updatedAt: bookingUpdatedAt,
                                    client: null,
                                    project: null,
                                    booker: null
                                };
                                if (booking.project_id) {
                                    project = window.projects.find(function (p) {
                                        return p.id === booking.project_id;
                                    });
                                    if (project) {
                                        newAttributes.project = project;
                                    } else {
                                        newAttributes.project = window.deletedProjects.findWhere({
                                            id: booking.project_id
                                        });
                                    }
                                } else if (booking.client_id) {
                                    client = window.clients.find(function (c) {
                                        return c.id === booking.client_id;
                                    });
                                    if (client) {
                                        newAttributes.client = client;
                                    } else {
                                        newAttributes.client = window.deletedClients.findWhere({
                                            id: booking.client_id
                                        });
                                    }
                                }
                                booker = window.bookers.findWhere({
                                    id: booking.booker.id
                                });
                                if (booker) {
                                    newAttributes.booker = booker;
                                } else {
                                    newAttributes.booker = window.deletedBookers.findWhere({
                                        id: booking.booker.id
                                    });
                                }
                                return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(ri, newAttributes.startDate, newAttributes.endDate), function () {
                                    var parser;
                                    if (staleCheckFn()) {
                                        return;
                                    }
                                    parser = new RG.Parsers.DurationParser(RG.Utils.BookingDataParser.getDateFromStr);
                                    parser.parse(b, booking);
                                    b.set(newAttributes);
                                    if (b.collection !== ri.bookings) {
                                        ri.bookings.add(b);
                                    }
                                    return b.collection = ri.bookings;
                                });
                            });
                            return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(ri, RG.Utils.firstVisibleDate(), RG.Utils.lastVisibleDate()), function () {
                                if (staleCheckFn()) {
                                    return;
                                }
                                return removedBookings.forEach(function (b) {
                                    return ri.bookings.remove(b);
                                });
                            });
                        });
                    });
                }
            });
        },
        todayPoll: function () {
            return Q.Promise(function (resolve, reject, notify) {
                return $.ajax("http://localhost/EMRMAPI/v1/today", {
                    success: function (data, status, xhr) {
                        window.currentUserDate.set(data);
                        return resolve('Today poll data processed');
                    },
                    error: function (xhr, status, errorThrown) {
                        return reject(new Error("Status code for today poll was " + status));
                    }
                });
            });
        },
        updateCalendar: function (pollId) {
            var staleCheckFn;
            staleCheckFn = function () {
                if (pollId !== RG.Utils.BookingDataParser.pollId) {
                    return true;
                }
                return false;
            };
            this.todayPoll();
            this.resourcesPoll(staleCheckFn);
            this.bookingsPoll(staleCheckFn);
            return this.downtimesPoll(staleCheckFn);
        },
        renderResource: function (resource, defer) {
            if (RG.Utils.interactionInProgress()) {
                return Q.delay(100).then(function () {
                    return RG.Utils.BookingDataParser.renderResource(resource, defer);
                });
            } else {
                resource.availability.trigger('reset');
                return defer.resolve();
            }
        },
        poll: function () {
            return RG.Utils.BookingDataParser.pollPromise();
        },
        expirePolls: function () {
            return this.pollId += 1;
        },
        pollPromise: function () {
            this.expirePolls();
            return (function (pollId) {
                return Q.Promise(function (resolve, reject, notify) {
                    return Q.delay(100).then(function () {
                        if (RG.Utils.bookingBeingSaved()) {
                            return reject(new Error("bookingBeingSaved"));
                        } else {
                            return RG.Utils.BookingDataParser.updateCalendar(pollId).then(function () {
                                RG.Utils.BookingDataParser.resourcesToReset = {};
                                RG.Utils.BookingDataParser.lastPoll = new Date();
                                return resolve("pollComplete");
                            })["catch"](function (error) {
                                return reject(error);
                            });
                        }
                    });
                })["catch"](function (err) {
                    RG.Utils.BookingDataParser.resourcesToReset = {};
                    if (_.contains(['staleData', 'interactionInProgress'], err.message)) {
                        return RG.Utils.BookingDataParser.pollPromise();
                    }
                });
            })(this.pollId);
        }
    };

}).call(this);
;
(function () {
    RG.Utils.BookingMerger = {
        getDateFromStr: function (dateStr) {
            return RG.Utils.BookingDataParser.getDateFromStr(dateStr);
        },
        merge: function (resourceBookings, jsonBookings) {
            var returnedBookings;
            returnedBookings = [];
            _.each(jsonBookings, function (jb) {
                var booking, client, date, duration, durations, i, len, project, ref;
                booking = new RG.Models.Booking({
                    id: jb.id,
                    notes: jb.notes,
                    startDate: RG.Utils.BookingMerger.getDateFromStr(jb.start_date),
                    endDate: RG.Utils.BookingMerger.getDateFromStr(jb.end_date),
                    billable: jb.billable,
                    refreshable: jb.refreshable
                });
                booking.set({
                    booker: window.bookers.findWhere({
                        id: jb.booker.id
                    })
                });
                if (jb.project_id) {
                    project = window.projects.find(function (p) {
                        return p.id === jb.project_id;
                    });
                    if (project) {
                        booking.set({
                            project: project
                        });
                    }
                } else if (jb.client_id) {
                    client = window.clients.find(function (c) {
                        return c.id === jb.client_id;
                    });
                    if (client) {
                        booking.set({
                            client: client
                        });
                    }
                }
                durations = [];
                ref = jb.durations;
                for (i = 0, len = ref.length; i < len; i++) {
                    duration = ref[i];
                    date = RG.Utils.BookingMerger.getDateFromStr(duration.date);
                    if (duration.start_time || duration.start_time === 0) {
                        durations.push(new RG.Models.FixedDuration({
                            date: date,
                            startTime: duration.start_time,
                            endTime: duration.end_time,
                            waiting: duration.waiting
                        }));
                    } else {
                        durations.push(new RG.Models.Duration({
                            date: date,
                            minutes: duration.duration,
                            waiting: duration.waiting
                        }));
                    }
                }
                booking.durations.reset(durations);
                resourceBookings.remove(resourceBookings.findWhere({
                    id: booking.id
                }));
                resourceBookings.add(booking, {
                    merge: true
                });
                return returnedBookings.push(booking);
            });
            return returnedBookings;
        }
    };

    Date.fromISO = function (iso) {
        return RG.Utils.BookingMerger.getDateFromStr(iso);
    };

}).call(this);
;
(function () {
    RG.Utils.BookingPopoverPlacer = (function () {
        function BookingPopoverPlacer(event) {
            this.event = event;
        }

        BookingPopoverPlacer.prototype.getCalUnit = function () {
            return this.calUnit || (this.calUnit = this._findCalUnit());
        };

        BookingPopoverPlacer.prototype.createAnchor = function (arg) {
            var anchor, className, height, offset, relativeY;
            className = arg.className;
            this.getCalUnit();
            anchor = $(document.createElement('div')).addClass('dropdown-anchor').addClass(className);
            this.calUnit.append(anchor);
            relativeY = this.event.pageY - this.calUnit.offset().top;
            if (this.booking) {
                height = this.booking.outerHeight();
                offset = this.booking.offset();
                anchor.callback = (function (_this) {
                    return function (droppingUp) {
                        if (droppingUp) {
                            height = 0;
                        }
                        if (!_this.adjustedHeight && RG.Utils.isZoomedIn()) {
                            height = height - height / 4;
                            _this.adjustedHeight = true;
                        }
                        return anchor.offset({
                            top: offset.top + height
                        });
                    };
                })(this);
                return anchor;
            }
            anchor.offset({
                top: this.calUnit.offset().top + relativeY
            });
            return anchor;
        };

        BookingPopoverPlacer.prototype._findCalUnit = function () {
            var element, elements, i, len, target;
            elements = [];
            target = $(this.event.target);
            while (!target.hasClass('resources--cal-unit')) {
                if (target.hasClass('booking')) {
                    this.booking = target;
                }
                elements.push(target);
                target.css('visibility', 'hidden');
                target = $(document.elementFromPoint(this.event.clientX, this.event.clientY));
            }
            for (i = 0, len = elements.length; i < len; i++) {
                element = elements[i];
                element.css('visibility', 'visible');
            }
            return this.calUnit = target;
        };

        return BookingPopoverPlacer;

    })();

}).call(this);
;
(function () {
    RG.Utils.BookingService = {
        reset: function (data, resource, booking, originalAttributes, originalDurations) {
            if (data.project_id) {
                alert(RG.Variables.Validation.Project.Archived);
            }
            if (data.client_id) {
                alert(RG.Variables.Validation.Client.Archived);
            }
            booking.set(originalAttributes);
            booking.set({
                saving: false
            });
            booking.durations.reset(originalDurations);
            resource.bookings.remove(booking, {
                silent: true
            });
            return resource.bookings.add(booking);
        },
        isolate: function (booking, date, callback) {
            var afterDate;
            afterDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            if (RG.Utils.DateComparator.equalsYMD(booking.getDateRange().startDate, date)) {
                return RG.Utils.BookingService.split(booking, afterDate, function (bookings) {
                    return typeof callback === "function" ? callback(bookings[0]) : void 0;
                });
            } else if (RG.Utils.DateComparator.equalsYMD(booking.getDateRange().endDate, date)) {
                return RG.Utils.BookingService.split(booking, date, function (bookings) {
                    return typeof callback === "function" ? callback(bookings[1]) : void 0;
                });
            } else {
                return RG.Utils.BookingService.split(booking, date, function (bookings) {
                    var currBooking;
                    currBooking = bookings[1];
                    return RG.Utils.BookingService.split(currBooking, afterDate, function (lastBookings) {
                        return typeof callback === "function" ? callback(lastBookings[0]) : void 0;
                    });
                });
            }
        },
        split: function (booking, date, callback) {
            var data;
            data = {
                date: RG.Utils.DateFormatter.getISODate(date)
            };
            booking.set('saving', true);
            return $.ajax(RG.getApiRoot() + ("/bookings/" + booking.id + "/split"), {
                method: "PUT",
                data: data,
                dataType: 'json',
                headers: {
                    "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')
                },
                success: (function (_this) {
                    return function (responseData) {
                        var bookings;
                        bookings = RG.Utils.BookingMerger.merge(booking.collection, responseData);
                        return window.requestAnimationFrame(function () {
                            return typeof callback === "function" ? callback(bookings) : void 0;
                        });
                    };
                })(this),
                error: (function (_this) {
                    return function (responseData) {
                        alert(responseData.responseText);
                        return typeof callback === "function" ? callback() : void 0;
                    };
                })(this)
            });
        },
        setBookingStartDate: function (booking, date, callback) {
            return RG.Utils.BookingService.setBookingAttributes(booking, {
                start_date: RG.Utils.DateFormatter.getISODate(date)
            }, callback);
        },
        setBookingEndDate: function (booking, date, callback) {
            return RG.Utils.BookingService.setBookingAttributes(booking, {
                end_date: RG.Utils.DateFormatter.getISODate(date)
            }, callback);
        },
        deleteBooking: function (booking, callback) {
            booking.set('saving', true);
            return $.ajax(RG.getApiRoot() + ("/bookings/" + (booking.get('id'))), {
                method: 'DELETE',
                headers: {
                    "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')
                },
                success: (function (_this) {
                    return function () {
                        var collection;
                        collection = booking.collection;
                        if (collection != null) {
                            collection.remove(booking);
                            collection.predictWaitingList();
                            collection.trigger('reset');
                        }
                        if (typeof callback === "function") {
                            callback(booking);
                        }
                        RG.Popovers.popoverActive = false;
                        return window.update();
                    };
                })(this)
            });
        },
        deleteSingleDate: function (booking, date, callback) {
            var cb, d;
            cb = function (booking) {
                if (typeof callback === "function") {
                    callback(booking);
                }
                return window.update();
            };
            if (RG.Utils.DateComparator.equalsYMD(booking.getDateRange().startDate, date)) {
                d = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
                return RG.Utils.BookingService.setBookingStartDate(booking, d, cb);
            } else if (RG.Utils.DateComparator.equalsYMD(booking.getDateRange().endDate, date)) {
                d = new Date(date.getFullYear(), date.getMonth(), date.getDate() - 1);
                return RG.Utils.BookingService.setBookingEndDate(booking, d, cb);
            } else {
                return RG.Utils.BookingService.isolate(booking, date, function (isolatedBooking) {
                    return RG.Utils.BookingService.deleteBooking(isolatedBooking, callback);
                });
            }
        },
        setBookingAttributes: function (booking, attributes, callback) {
            booking.set('saving', true);
            return $.ajax(RG.getApiRoot() + ("/bookings/" + booking.id), {
                method: "PUT",
                data: attributes,
                dataType: 'json',
                headers: {
                    "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')
                },
                success: (function (_this) {
                    return function (response) {
                        RG.Utils.BookingMerger.merge(booking.collection, [response]);
                        return typeof callback === "function" ? callback() : void 0;
                    };
                })(this)
            });
        }
    };

}).call(this);
;
(function () {
    RG.Utils.CardResizer = (function () {
        function CardResizer() { }

        CardResizer.prototype.resize = function () {
            var calendarEl;
            calendarEl = document.getElementById("calendar");
            if (!calendarEl) {
                return;
            }
            if (this.cardsContainer == null) {
                this.cardsContainer = calendarEl.querySelector("aside");
            }
            if (this.linesContainer == null) {
                this.linesContainer = document.getElementById("resources");
            }
            window.requestAnimationFrame((function (_this) {
                return function () {
                    var card, height, i, len, line, ref;
                    ref = _this.linesContainer.querySelectorAll(".resource-line");
                    for (i = 0, len = ref.length; i < len; i++) {
                        line = ref[i];
                        if (line && line.attributes["data-resource-id"] && line.attributes["data-resource-id"].value) {
                            card = _this.cardsContainer.querySelector(".resource[data-resource-id=" + line.attributes["data-resource-id"].value + "]");
                            height = line.offsetHeight + "px";
                            if (card && card.style.height !== height) {
                                card.style.height = height;
                            }
                        }
                    }
                };
            })(this));
        };

        return CardResizer;

    })();

}).call(this);
;
(function () {
    RG.Utils.ColorSource = (function () {
        function ColorSource() {
            _.extend(this, Backbone.Events);
            this.mode = 'project';
        }

        ColorSource.prototype.colorBy = function (mode) {
            this.mode = mode;
            return this.trigger('change:mode');
        };

        ColorSource.prototype.getColorForBooking = function (booking) {
            var base, color, ref, ref1, ref2, ref3, ref4;
            color = "#BFBFBF";
            if (this.mode === 'project') {
                color = (ref = booking.get('project')) != null ? ref.get('color') : void 0;
            } else if (this.mode === 'client') {
                color = ((ref1 = booking.get('client')) != null ? ref1.get('color') : void 0) || ((ref2 = booking.get('project')) != null ? (ref3 = ref2.get('client')) != null ? ref3.get('color') : void 0 : void 0);
            } else if (this.mode === 'booker') {
                color = (ref4 = booking.get('booker')) != null ? ref4.get('color') : void 0;
            }
            return (base = RG.Variables.colorSets)[color] != null ? base[color] : base[color] = new RG.Utils.Color(color || "#BFBFBF");
        };

        return ColorSource;

    })();

    RG.Utils.Color = (function () {
        Color.prototype.textLight = 35;

        function Color(hexColor) {
            this.hexColor = hexColor;
        }

        Color.prototype.toString = function () {
            return tinycolor(this.hexColor).toHexString();
        };

        Color.prototype.getColor = function () {
            return tinycolor(this.hexColor).toHexString();
        };

        Color.prototype.getBackgroundColor = function () {
            var hsl;
            hsl = tinycolor(this.hexColor).toHsv();
            if (hsl.s > 0.05) {
                hsl.s = 0.5;
                hsl.v = 1;
            } else {
                hsl.v = 0.9;
            }
            return tinycolor(hsl).toHexString();
        };

        Color.prototype.getBorderColor = function () {
            var hsl;
            hsl = tinycolor(this.hexColor).toHsv();
            if (hsl.s > 0.05) {
                hsl.s = 0.15;
                hsl.v = 0.9;
            } else {
                hsl.v = 0.85;
            }
            return tinycolor(hsl).toHexString();
        };

        Color.prototype.getTextColor = function () {
            var hsl;
            hsl = tinycolor(this.hexColor).toHsl();
            hsl.l = this.textLight;
            return tinycolor(hsl).toHexString();
        };

        return Color;

    })();

}).call(this);
;
(function () {
    RG.Utils.DatePopoverPlacer = (function () {
        function DatePopoverPlacer(resource, date, options) {
            this.resource = resource;
            this.date = date;
            if (options == null) {
                options = {};
            }
            this.options = options;
            this.offsetTop = options.offsetTop;
        }

        DatePopoverPlacer.prototype.getCalUnit = function () {
            return this.calUnit || (this.calUnit = this._findCalUnit());
        };

        DatePopoverPlacer.prototype.createAnchor = function (arg) {
            var anchor, className;
            className = (arg != null ? arg : {}).className;
            this.getCalUnit();
            anchor = $(document.createElement('div')).addClass("dropdown-anchor").addClass(className);
            this.calUnit.append(anchor);
            if (this.offsetTop) {
                anchor.offset({
                    top: this.offsetTop
                });
            }
            return anchor;
        };

        DatePopoverPlacer.prototype._findCalUnit = function () {
            var dateSelector, firstVisibleDate, lastVisibleDate;
            firstVisibleDate = window.dateController._startDate();
            lastVisibleDate = window.dateController._endDate();
            if (this.date.getTime() < firstVisibleDate.getTime()) {
                this.date = firstVisibleDate;
            } else if (this.date.getTime() > lastVisibleDate.getTime()) {
                this.date = lastVisibleDate;
            }
            dateSelector = RG.Utils.DateFormatter.getISODate(this.date);
            return $(".resource-line[data-resource-id=" + this.resource.cid + "]").find(".resources--cal-unit[data-date=" + dateSelector + "]");
        };

        return DatePopoverPlacer;

    })();

}).call(this);
;
(function () {
    RG.Utils.DayName = (function () {
        var days, longDays;

        days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

        longDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

        function DayName(dayNumber) {
            this.dayNumber = dayNumber;
        }

        DayName.prototype.toString = function () {
            return days[this.dayNumber];
        };

        DayName.prototype.fullName = function () {
            return longDays[this.dayNumber];
        };

        return DayName;

    })();

}).call(this);
;
(function () {
    RG.Utils.DowntimeCalendarUpdater = (function () {
        function DowntimeCalendarUpdater(currentUserTimeZone, account, resources, timeZones, affectedResources) {
            this.currentUserTimeZone = currentUserTimeZone;
            this.account = account;
            this.resources = resources;
            this.timeZones = timeZones;
            this.affectedResources = affectedResources;
        }

        DowntimeCalendarUpdater.prototype.update = function (downtime, durations, shouldDelete) {
            var dTime;
            dTime = this.account.downtimes.findWhere({
                id: downtime.id
            });
            if (dTime != null) {
                dTime.set(downtime.attributes);
            }
            return this._updateCalendar(downtime, durations, shouldDelete);
        };

        DowntimeCalendarUpdater.prototype.add = function (downtime, durations, shouldDelete) {
            this.account.downtimes.add(downtime);
            return this._updateCalendar(downtime, durations, shouldDelete);
        };

        DowntimeCalendarUpdater.prototype._updateCalendar = function (downtime, durations, shouldDelete) {
            var downtimeDurations, end, start;
            downtimeDurations = downtime.getDurations();
            start = downtimeDurations[0].getDate();
            end = downtimeDurations[downtimeDurations.length - 1].getDate();
            RG.renderer.enqueue(new RG.Renderer.ResourcesDateLock(this.resources, start, end), (function (_this) {
                return function () {
                    return _this._updateBookings(durations, shouldDelete);
                };
            })(this));
            return this.updateAffectedResources();
        };

        DowntimeCalendarUpdater.prototype._updateBookings = function (durations, shouldDelete) {
            var duration, i, len;
            for (i = 0, len = durations.length; i < len; i++) {
                duration = durations[i];
                if (shouldDelete) {
                    duration.removeAndUpdateBooking();
                } else {
                    duration.set({
                        waiting: true
                    });
                }
            }
        };

        DowntimeCalendarUpdater.prototype.updateAffectedResources = function () {
            var affectedVisibleResources, resourceMethods, visibleResourceIds;
            visibleResourceIds = window.resourcePaginator.getVisibleResourceIds();
            affectedVisibleResources = this.affectedResources.filter(function (resource) {
                return visibleResourceIds.indexOf(resource.id) !== -1;
            });
            resourceMethods = affectedVisibleResources.forEach(function (resource) {
                resource.refreshDowntimes();
            });
        };

        return DowntimeCalendarUpdater;

    })();

}).call(this);
;
(function () {
    RG.Utils.DowntimePresenter = (function () {
        function DowntimePresenter(downtime) {
            this.downtime = downtime;
            this.from = this.downtime.get('from');
            this.to = this.downtime.get('to');
            this.startTime = this.downtime.get('startTime');
            this.endTime = this.downtime.get('endTime');
        }

        DowntimePresenter.prototype.dateTimeString = function (dateFormatter) {
            var endTimeString, startTimeString;
            startTimeString = '';
            if (this.startTime > 0) {
                startTimeString = "(" + (this._startMinutesToTime()) + ")";
            }
            endTimeString = '';
            if (this.endTime < 1440) {
                endTimeString = "(" + (this._endMinutesToTime()) + ")";
            }
            if (RG.Utils.DateComparator.equalsYMD(this.from, this.to)) {
                if (this.startTime === 0 && this.endTime === 1440) {
                    return "All day";
                } else {
                    return (this._startMinutesToTime()) + " - " + (this._endMinutesToTime());
                }
            } else {
                if (this._sameYear()) {
                    return (RG.Utils.DateFormatter.getShortDate(this.from)) + " " + startTimeString + " - " + (dateFormatter(this.to)) + " " + endTimeString;
                } else {
                    return (dateFormatter(this.from)) + " " + startTimeString + " - " + (dateFormatter(this.to)) + " " + endTimeString;
                }
            }
        };

        DowntimePresenter.prototype._startMinutesToTime = function () {
            return RG.Utils.TimeFormatter.formatFixedTime(this.startTime);
        };

        DowntimePresenter.prototype._endMinutesToTime = function () {
            return RG.Utils.TimeFormatter.formatFixedTime(this.endTime);
        };

        DowntimePresenter.prototype._sameYear = function () {
            return this.from.getYear() === this.to.getYear();
        };

        return DowntimePresenter;

    })();

}).call(this);
;
(function () {
    RG.Utils.ErrorHandler = (function () {
        function ErrorHandler(el1, backpackErrorsFields, errorData1) {
            this.el = el1;
            this.backpackErrorsFields = backpackErrorsFields;
            this.errorData = errorData1;
        }

        ErrorHandler.prototype.handleErrors = function () {
            var handleError, i, len, obj, ref, results;
            handleError = function (el, errorData, obj) {
                return RGComponents.createBackpackError($(el).find(obj.mountpoint)[0], obj.label, errorData);
            };
            ref = this.backpackErrorsFields;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                obj = ref[i];
                results.push(handleError(this.el, this.errorData, obj));
            }
            return results;
        };

        return ErrorHandler;

    })();

}).call(this);
;
(function () {
    RG.Utils.EventPopoverPlacer = (function () {
        function EventPopoverPlacer(event, targetClass, options) {
            this.event = event;
            if (options == null) {
                options = {};
            }
            this.targetClass = targetClass;
            this.options = options;
        }

        EventPopoverPlacer.prototype.getCalUnit = function () {
            return this.calUnit || (this.calUnit = this._findCalUnit());
        };

        EventPopoverPlacer.prototype.createAnchor = function (arg) {
            var anchor, className, height, offset;
            className = (arg != null ? arg : {}).className;
            this.getCalUnit();
            anchor = $(document.createElement('div')).addClass("dropdown-anchor").addClass(className);
            this.calUnit.append(anchor);
            if (this.target) {
                height = this.target.outerHeight();
                offset = this.target.offset();
                anchor.callback = (function (_this) {
                    return function (poppingUp) {
                        var topOffset;
                        if (poppingUp) {
                            height = 0 + _this.options.topAdjustment;
                        }
                        topOffset = (offset != null ? offset.top : void 0) || 0;
                        return anchor.offset({
                            top: topOffset + height
                        });
                    };
                })(this);
                return anchor;
            }
            anchor.offset({
                top: this.calUnit.offset().top + this._relativeY()
            });
            return anchor;
        };

        EventPopoverPlacer.prototype._findCalUnit = function () {
            var counter, element, elements, i, len, target;
            elements = [];
            target = $(this.event.target);
            if (target.hasClass('time-available') || target.closest('.utilisation').length) {
                this.calUnit = target.closest('.resources--cal-unit');
                this.target = this.calUnit.find("." + this.targetClass);
                return this.calUnit;
            }
            counter = 0;
            while (!target.hasClass('resources--cal-unit')) {
                if (counter === 5) {
                    break;
                }
                counter += 1;
                if (target.hasClass(this.targetClass)) {
                    this.target = target;
                }
                elements.push(target);
                target.css('visibility', 'hidden');
                target = $(document.elementFromPoint(this.event.clientX, this.event.clientY));
            }
            for (i = 0, len = elements.length; i < len; i++) {
                element = elements[i];
                element.css('visibility', 'visible');
            }
            return this.calUnit = target;
        };

        EventPopoverPlacer.prototype._relativeY = function () {
            var rect, relativeY;
            relativeY = this.event.pageY - this.calUnit.offset().top;
            rect = this.calUnit[0].getBoundingClientRect();
            if (relativeY < 0 || relativeY > rect.height) {
                if (this.targetClass === 'utilisation') {
                    rect = this.calUnit.find('.utilisation')[0].getBoundingClientRect();
                }
                relativeY = rect.height / 2;
            }
            return relativeY;
        };

        return EventPopoverPlacer;

    })();

}).call(this);
;
(function () {
    RG.Utils.FilterSource = (function () {
        function FilterSource(resourceTypes1, resources, projects1, clients1) {
            this.resourceTypes = resourceTypes1;
            this.resources = resources;
            this.projects = projects1;
            this.clients = clients1;
            _.extend(this, Backbone.Events);
        }

        FilterSource.prototype.getCategories = function () {
            return new RG.Collections.FilterCategories(this.buildCategories());
        };

        FilterSource.prototype.buildCategories = function () {
            var categories, category, i, len, resourceType, resourceTypes;
            categories = [this._getProjectsFilterCategory(), this._getClientsFilterCategory()];
            resourceTypes = this.resourceTypes.sortBy(function (rt) {
                var ref;
                if (rt.get('name') === "Person") {
                    return '0';
                }
                return (ref = rt.get('name')) != null ? ref.toLowerCase() : void 0;
            });
            for (i = 0, len = resourceTypes.length; i < len; i++) {
                resourceType = resourceTypes[i];
                category = new RG.Models.FilterCategory({
                    name: resourceType.getName(),
                    tag: resourceType
                });
                category.optionGroups.reset(this._getOptionGroups(resourceType));
                categories.push(category);
            }
            return categories;
        };

        FilterSource.prototype._getClientsFilterCategory = function () {
            var clients, fc, optionGroup;
            optionGroup = new RG.Models.OptionGroup({
                name: "Client",
                multiple: true
            });
            clients = this.clients.filter(function (c) {
                return !c.get('archived');
            });
            optionGroup.options.reset(_.map(clients, function (c) {
                return new RG.Models.FilterOption({
                    id: c.id,
                    name: c.getName(),
                    tag: 'client',
                    ref: c
                });
            }));
            fc = new RG.Models.FilterCategory({
                name: "Clients"
            });
            fc.optionGroups.reset([optionGroup]);
            return fc;
        };

        FilterSource.prototype._getProjectsFilterCategory = function () {
            var fc, optionGroup, projects;
            optionGroup = new RG.Models.OptionGroup({
                name: "Project",
                multiple: true
            });
            projects = this.projects.filter(function (c) {
                return !c.get('archived');
            });
            optionGroup.options.reset(_.map(projects, function (p) {
                return new RG.Models.FilterOption({
                    id: p.id,
                    name: p.getNameWithProjectCode(),
                    tag: 'project',
                    ref: p
                });
            }));
            fc = new RG.Models.FilterCategory({
                name: "Projects"
            });
            fc.optionGroups.reset([optionGroup]);
            return fc;
        };

        FilterSource.prototype._getOptionGroups = function (resourceType) {
            var nameOptionGroup, optionGroups, resourceNameOptions;
            optionGroups = resourceType.customFields.map(function (cf) {
                var isMultiple, optionGroup, options;
                isMultiple = !(resourceType.getName() === "Person" && cf.get('name') === "Job Title");
                optionGroup = new RG.Models.OptionGroup({
                    name: cf.get('name'),
                    multiple: isMultiple,
                    tag: cf
                });
                options = cf.customFieldOptions.map(function (cfo) {
                    return new RG.Models.FilterOption({
                        id: cfo.id,
                        name: cfo.escape('name'),
                        tag: "custom_field_option",
                        ref: cfo,
                        customField: cf
                    });
                });
                optionGroup.options.reset(options);
                return optionGroup;
            });
            nameOptionGroup = new RG.Models.OptionGroup({
                name: "Name",
                multiple: false
            });
            resourceNameOptions = this.resources.filter(function (r) {
                return r.get('resourceType') === resourceType && r.isBookable();
            }).map(function (r) {
                return new RG.Models.FilterOption({
                    id: r.id,
                    name: r.escape('name'),
                    tag: "resource",
                    ref: r
                });
            });
            nameOptionGroup.options.reset(resourceNameOptions);
            optionGroups.unshift(nameOptionGroup);
            return optionGroups;
        };

        return FilterSource;

    })();

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

    RG.Utils.InfiniteResourceScroller = (function () {
        function InfiniteResourceScroller($window, $document, paginator, resources, resourceLimit) {
            this.$window = $window;
            this.$document = $document;
            this.paginator = paginator;
            this.resources = resources;
            this.resourceLimit = resourceLimit;
            this.reSizeCards = bind(this.reSizeCards, this);
            this.resizing = false;
            this.scrolling = false;
            this.nextButton = $('.next-resources');
            this.prevButton = $('.previous-resources');
            this.buttons = [this.nextButton, this.prevButton];
        }

        InfiniteResourceScroller.prototype.start = function () {
            var loadMoreResources;
            this.nextButton.on('click', (function (_this) {
                return function () {
                    _this.showLoadButton();
                    return setTimeout(function () {
                        return _this.scrollDown();
                    }, 50);
                };
            })(this));
            this.prevButton.on('click', (function (_this) {
                return function () {
                    _this.showLoadButton();
                    return setTimeout(function () {
                        return _this.scrollUp();
                    }, 50);
                };
            })(this));
            loadMoreResources = (function (_this) {
                return function () {
                    if (_this._scrollingVertical) {
                        return;
                    }
                    _this._scrollingVertical = true;
                    return requestAnimationFrame(function () {
                        _this.fadeButtonElements();
                        return _this._scrollingVertical = false;
                    });
                };
            })(this);
            window.onscroll = loadMoreResources;
            return this.$window.on('touchmove', loadMoreResources);
        };

        InfiniteResourceScroller.prototype.screenTop = function () {
            return this.$window.scrollTop();
        };

        InfiniteResourceScroller.prototype.screenBottom = function () {
            return this.$window.scrollTop() + this.screenHeight();
        };

        InfiniteResourceScroller.prototype.screenHeight = function () {
            return window.innerHeight;
        };

        InfiniteResourceScroller.prototype.nextButtonTriggerPosition = function () {
            return this.pageFullHeight() - 10;
        };

        InfiniteResourceScroller.prototype.pageFullHeight = function () {
            return $(document).height();
        };

        InfiniteResourceScroller.prototype.fadeButtonElements = function () {
            if (this.screenTop() < 10 && !this.paginator.isAtTop()) {
                this.prevButton.fadeIn();
                return this.nextButton.fadeOut();
            } else if (this.screenBottom() >= this.nextButtonTriggerPosition() && !this.paginator.isAtBottom()) {
                this.prevButton.fadeOut();
                return this.nextButton.fadeIn();
            } else {
                this.prevButton.fadeOut();
                return this.nextButton.fadeOut();
            }
        };

        InfiniteResourceScroller.prototype.scrollDown = function () {
            this.resource = this.paginator.getPaginatedCollection().last();
            return setTimeout((function (_this) {
                return function () {
                    var loadSize;
                    loadSize = _this.paginator.loadSize;
                    _this.paginator.loadSize = 10;
                    _this.paginator.next();
                    _this.paginator.loadSize = loadSize;
                    _this.trimToLimit('down');
                    return _this.reSizeCards();
                };
            })(this));
        };

        InfiniteResourceScroller.prototype.scrollUp = function () {
            this.resource = this.paginator.getPaginatedCollection().first();
            if (this.headersHeight == null) {
                this.headersHeight = $('#header').height() + _.reduce($('header'), (function (memory, e) {
                    return e.scrollHeight + memory;
                }), 0);
            }
            return setTimeout((function (_this) {
                return function () {
                    var loadSize;
                    loadSize = _this.paginator.loadSize;
                    _this.paginator.loadSize = 10;
                    _this.paginator.previous();
                    _this.paginator.loadSize = loadSize;
                    _this.trimToLimit('up');
                    setTimeout(function () {
                        return RG.setCurrentResource(_this.resource);
                    });
                    return _this.reSizeCards();
                };
            })(this));
        };

        InfiniteResourceScroller.prototype.displayNext = function () {
            return this.nextButton.show();
        };

        InfiniteResourceScroller.prototype.displayPrev = function () {
            return this.prevButton.show();
        };

        InfiniteResourceScroller.prototype.showLoadButton = function () {
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    return _.each(_this.buttons, function (button) {
                        return button.addClass('loading');
                    });
                };
            })(this));
        };

        InfiniteResourceScroller.prototype.hideLoadButton = function () {
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    return _.each(_this.buttons, function (button) {
                        button.removeClass('loading');
                        return button.hide();
                    });
                };
            })(this));
        };

        InfiniteResourceScroller.prototype.trimToLimit = function (direction) {
            var loadSize;
            if (this.paginator.getPaginatedCollection().length > this.resourceLimit) {
                loadSize = this.paginator.loadSize;
                this.paginator.loadSize = this.resourceLimit;
                if (direction === 'down') {
                    this.paginator.trimTop();
                } else {
                    this.paginator.trimBottom();
                }
                this.paginator.loadSize = loadSize;
            }
            return setTimeout((function (_this) {
                return function () {
                    return _this.hideLoadButton();
                };
            })(this));
        };

        InfiniteResourceScroller.prototype.reSizeCards = function () {
            if (this.resizing) {
                return;
            }
            this.resizing = true;
            this.paginator.getPaginatedCollection().trigger('reset');
            RG.resizeCards();
            return setTimeout((function (_this) {
                return function () {
                    RG.resizeCards();
                    return setTimeout(function () {
                        RG.resizeCards();
                        return setTimeout(function () {
                            RG.resizeCards();
                            return _this.resizing = false;
                        }, 800);
                    }, 200);
                };
            })(this), 50);
        };

        return InfiniteResourceScroller;

    })();

}).call(this);
;
(function () {
    RG.Utils.scrollSize = function () {
        var multiplier;
        multiplier = $("#calendar").hasClass("detailed") ? 2 : 7;
        return ($(".cal-unit").width() * multiplier) + multiplier;
    };

    RG.Utils.firstVisibleDate = function () {
        return moment(window.dateController._startDate());
    };

    RG.Utils.lastVisibleDate = function () {
        return moment(window.dateController._endDate());
    };

    RG.Utils.visibleDateRange = function () {
        return new RG.Utils.DateRange(window.dateController._startDate(), window.dateController._endDate());
    };

    RG.Utils.DayInMilliSeconds = 86400000;

    RG.Utils.numberOfVisibleDays = function () {
        return RG.Utils.visibleDateRange().getNumberOfDays();
    };

    RG.Utils.isMonday = function (duration) {
        return duration.attributes.date.getDay() === 1;
    };

    RG.Utils.endTime = function (typeName) {
        var displacement, startTime;
        startTime = +window.rgStorage.get('startTime');
        displacement = +window.rgStorage.get(typeName);
        return startTime + displacement;
    };

    RG.Utils.generateTimeUnitId = function (cid, date) {
        date = RG.Utils.DateFormatter.getISODate(date);
        return cid + "-" + date;
    };

    RG.Utils.bookingBeingSaved = function () {
        return _.find(_.flatten(_.collect(window.resources.models, function (resource) {
            return resource.bookings;
        })), function (bookings) {
            return _.find(bookings.models, function (booking) {
                return booking.get("saving");
            });
        });
    };

    RG.Utils.enableScrolling = function (shouldEnable) {
        if (shouldEnable == null) {
            shouldEnable = true;
        }
        if (shouldEnable) {
            return $('body').removeClass('stop-scrolling');
        } else {
            return $('body').addClass('stop-scrolling');
        }
    };

    RG.Utils.getLastUsedFilters = function () {
        var ex, lastFiltersAst;
        lastFiltersAst = window.rgStorage.get('lastFiltersAst');
        if (lastFiltersAst) {
            try {
                return JSON.parse(lastFiltersAst);
            } catch (error) {
                ex = error;
                return [];
            }
        } else {
            return [];
        }
    };

    RG.Utils.delayResizeCards = function () {
        if (RG.Variables.cardSizeTimeout != null) {
            clearTimeout(RG.Variables.cardSizeTimeout);
        }
        return RG.Variables.cardSizeTimeout = setTimeout(function () {
            RG.resizeCards();
            return setTimeout(function () {
                return $(window).trigger('scroll');
            }, 2000);
        }, 200);
    };

    RG.Utils.getModelAttributes = function (models) {
        return models.map(function (model) {
            return model.attributes;
        });
    };

    RG.Utils.getTodayISO = function () {
        return RG.Utils.DateFormatter.getISODate(new Date);
    };

    RG.Utils.renderChecker = function () {
        return RG.Variables.lastRenderCall = new Date;
    };

    RG.Utils.unitsRendered = function () {
        if (RG.Variables.lastRenderCall === null) {
            return false;
        }
        return (new Date() - RG.Variables.lastRenderCall) > 500;
    };

    RG.Utils.isZoomedIn = function () {
        var zoomLevel;
        zoomLevel = window.rgStorage.get('zoomLevel');
        return zoomLevel === "detailed";
    };

}).call(this);
;
(function () {
    RG.Utils.Permissions = {
        getAdapter: function () {
            return new RG.Utils.CalendarPermissionsAdapter(window.currentUserId, window.userPermissions);
        },
        canManage: function (booking) {
            return this.getAdapter().canManage(booking);
        },
        canAdd: function (resource) {
            return this.canAddBooking();
        },
        canAddBooking: function (resource) {
            return window.userPermissions.bookingRights === "manage_all" || window.userPermissions.bookingRights === "manage_own";
        },
        canAddProject: function (resource) {
            return window.userPermissions.projectRights === "manage_all" || window.userPermissions.projectRights === "manage_own";
        },
        canAddClient: function (resource) {
            return window.userPermissions.clientRights === "manage_all" || window.userPermissions.clientRights === "manage_own";
        },
        canManageResource: function (resource) {
            return window.userPermissions.resourceRights === "manage_all" || (window.userPermissions.resourceRights === "manage_own" && window.currentResourceInstanceId === resource.id);
        },
        canManageDowntime: function (downtime) {
            return this.getAdapter().canManageDowntime(downtime);
        },
        canAddDowntime: function () {
            return this.getAdapter().canAddDowntime();
        },
        canMoveClashBookingToWaitingList: function () {
            var ref;
            return (ref = this.getAdapter()).canMoveClashBookingToWaitingList.apply(ref, arguments);
        },
        canDeleteClashBooking: function () {
            var ref;
            return (ref = this.getAdapter()).canDeleteClashBooking.apply(ref, arguments);
        }
    };

}).call(this);
;
(function () {
    RG.Utils.profile = function (label, bookingId) {
        if (label == null) {
            label = 'downtime';
        }
        if (bookingId == null) {
            bookingId = 3680550;
        }
        console.profile(label);
        console.time(label);
        return setTimeout(function () {
            var element;
            element = $(".booking[data-booking-id=" + bookingId + "]");
            if (element.length) {
                return window.requestAnimationFrame(function () {
                    console.profileEnd();
                    return console.timeEnd('downtime');
                });
            } else {
                return RG.Utils.profile(label, bookingId);
            }
        }, 10);
    };

}).call(this);
;
(function () {
    RG.Utils.ResourceFilter = (function () {
        function ResourceFilter(resourceTypes) {
            this.resourceTypes = resourceTypes;
        }

        ResourceFilter.prototype.filterBy = function (resources, ast) {
            return resources.select((function (_this) {
                return function (ri) {
                    return _this._resourceVisible(ri, ast);
                };
            })(this));
        };

        ResourceFilter.prototype._resourceVisible = function (ri, ast) {
            var clientOptions, clientVisible, clients, clientsAst, customFieldOptionOptions, matchMethod, options, projectOptions, projectVisible, projects, projectsAst, resourceOptions, resourceTypeAst, resourceTypeFilterVisible;
            if (!ri.isBookable()) {
                return false;
            }
            if (ast.length === 0) {
                return true;
            }
            options = this._getOptionsFromAst(ast);
            resourceOptions = _.filter(options, function (o) {
                return o.get('tag') === "resource";
            });
            customFieldOptionOptions = _.filter(options, function (o) {
                return o.get('tag') === "custom_field_option";
            });
            projectOptions = _.filter(options, function (o) {
                return o.get('tag') === "project";
            });
            clientOptions = _.filter(options, function (o) {
                return o.get('tag') === "client";
            });
            resourceTypeAst = _.filter(ast, function (o) {
                return o.matchType === "all" && !o.selectedOptions;
            });
            projectVisible = false;
            if (projectOptions.length > 0) {
                projectsAst = _.filter(ast, function (x) {
                    return x.selectedOptions && x.selectedOptions[0].get('tag') === "project";
                })[0];
                matchMethod = projectsAst.matchType === "any" ? _.any : _.all;
                projects = _.map(projectOptions, function (o) {
                    return o.get('ref');
                });
                projectVisible = matchMethod(projects, function (p) {
                    return ri.isBookedOnProject(p);
                });
            } else {
                projectVisible = clientOptions.length === 0;
            }
            clientVisible = false;
            if (clientOptions.length > 0) {
                clientsAst = _.filter(ast, function (x) {
                    return x.selectedOptions && x.selectedOptions[0].get('tag') === "client";
                })[0];
                matchMethod = clientsAst.matchType === "any" ? _.any : _.all;
                clients = _.map(clientOptions, function (o) {
                    return o.get('ref');
                });
                clientVisible = matchMethod(clients, function (c) {
                    return ri.isBookedOnClient(c);
                });
            } else {
                clientVisible = projectOptions.length === 0;
            }
            if (!(projectVisible || clientVisible)) {
                return false;
            }
            resourceTypeFilterVisible = [true];
            if (resourceOptions.length > 0 || customFieldOptionOptions.length > 0 || resourceTypeAst.length > 0) {
                resourceTypeFilterVisible = this.resourceTypes.map((function (_this) {
                    return function (resourceType) {
                        var astByOptionGroup, customFieldOptions, optionGroupId, optionGroupsVisible, rtVisible, subAst, typedCustomFieldOptions, typedResourceOptions, typedResourceTypeAst;
                        rtVisible = false;
                        typedResourceOptions = _.filter(resourceOptions, function (o) {
                            return o.get('ref').get('resourceType') === resourceType;
                        });
                        typedCustomFieldOptions = _.filter(customFieldOptionOptions, function (o) {
                            return o.get('ref').get('resourceType') === resourceType;
                        });
                        typedResourceTypeAst = _.filter(resourceTypeAst, function (x) {
                            return x.resourceType === resourceType;
                        });
                        if (typedResourceTypeAst.length > 0) {
                            rtVisible = _.any(typedResourceTypeAst, function (x) {
                                return x.resourceType === ri.get('resourceType');
                            });
                            if (!rtVisible) {
                                return false;
                            }
                        }
                        if (typedResourceOptions.length > 0) {
                            rtVisible = _.include(_.map(typedResourceOptions, function (o) {
                                return o.get('ref');
                            }), ri);
                            if (!rtVisible) {
                                return false;
                            }
                        }
                        if (typedCustomFieldOptions.length > 0 && ri.get('resourceType') === resourceType) {
                            resourceTypeAst = _.filter(ast, function (x) {
                                return x.selectedOptions && x.selectedOptions[0].get('ref').get('resourceType') === resourceType && x.selectedOptions[0].get('tag') === "custom_field_option";
                            });
                            astByOptionGroup = _.groupBy(resourceTypeAst, function (x) {
                                return x.optionGroup.cid;
                            });
                            optionGroupsVisible = [];
                            for (optionGroupId in astByOptionGroup) {
                                subAst = astByOptionGroup[optionGroupId];
                                options = _.flatten(_.map(subAst, function (x) {
                                    return x.selectedOptions;
                                }));
                                customFieldOptions = _.map(options, function (x) {
                                    return x.get('ref');
                                });
                                matchMethod = null;
                                if (subAst[0].matchType === "any") {
                                    matchMethod = _.any;
                                } else {
                                    matchMethod = _.all;
                                }
                                optionGroupsVisible.push(matchMethod(customFieldOptions, function (cfo) {
                                    return ri.hasCustomFieldOption(cfo);
                                }));
                            }
                            rtVisible = _.all(optionGroupsVisible, function (x) {
                                return x === true;
                            });
                        }
                        return rtVisible;
                    };
                })(this));
            }
            return _.any(resourceTypeFilterVisible, function (x) {
                return x === true;
            });
        };

        ResourceFilter.prototype._getOptionsFromAst = function (ast) {
            return _.compact(_.flatten(_.map(ast, function (x) {
                return x.selectedOptions;
            })));
        };

        ResourceFilter.prototype._getCustomFieldOptionsFromTokens = function (tokens) {
            var searches;
            searches = [];
            _.each(tokens, function (term) {
                return _.each(term, function (v, k) {
                    return searches.push([k, v]);
                });
            });
            return _.compact(_.map(searches, (function (_this) {
                return function (search) {
                    var customField, customFieldOption, customFieldStr, key, resourceType, resourceTypeStr, value;
                    key = search[0];
                    value = search[1];
                    resourceTypeStr = key.substr(0, key.indexOf('>') - 1);
                    customFieldStr = key.substr(key.indexOf('>') + 2);
                    resourceType = _this.resourceTypes.findWhere({
                        name: resourceTypeStr
                    });
                    customField = resourceType.customFields.findWhere({
                        name: customFieldStr
                    });
                    if (customField != null) {
                        customFieldOption = customField.customFieldOptions.findWhere({
                            name: value
                        });
                        return customFieldOption;
                    } else {
                        return null;
                    }
                };
            })(this)));
        };

        return ResourceFilter;

    })();

}).call(this);
;
(function () {
    RG.Utils.ResourcePaginator = (function () {
        function ResourcePaginator(resources, loadSize) {
            this.resources = resources;
            this.loadSize = loadSize;
        }

        ResourcePaginator.prototype.getPaginatedCollection = function () {
            if (this._collection) {
                return this._collection;
            }
            this._collection = new RG.Collections.ResourceInstances();
            this.sourceCollection = this.resources;
            this.resources.on('change:visible', (function (_this) {
                return function () {
                    if (_this.resources.any(function (r) {
                        return !r.visible;
                    })) {
                        _this.sourceCollection = new RG.Collections.ResourceInstances(_this.resources.filter(function (r) {
                            return r.visible;
                        }));
                        _this._collection.reset(_this.sourceCollection.first(_this.loadSize));
                    } else {
                        _this.reset();
                    }
                    return _this._collection.trigger('change:visible');
                };
            })(this));
            return this._collection;
        };

        ResourcePaginator.prototype.getVisibleResourceIds = function () {
            return this.getPaginatedCollection().map(function (r) {
                return r.id;
            });
        };

        ResourcePaginator.prototype.isAtBottom = function () {
            return this._collection.models[this._collection.length - 1] === this.sourceCollection.models[this.sourceCollection.length - 1];
        };

        ResourcePaginator.prototype.isAtTop = function () {
            return this._collection.models[0] === this.sourceCollection.models[0];
        };

        ResourcePaginator.prototype.reset = function () {
            if (this.resources.any(function (r) {
                return !r.visible;
            })) {
                this.sourceCollection = new RG.Collections.ResourceInstances(this.resources.filter(function (r) {
                    return r.visible;
                }));
                this._collection.reset(this.sourceCollection.first(this.loadSize));
            } else {
                this.sourceCollection = this.resources;
            }
            return this._collection.reset(this.sourceCollection.first(this.loadSize));
        };

        ResourcePaginator.prototype.next = function () {
            var firstIndex, i, j, model, models, ref, ref1, results;
            if (this.isAtBottom()) {
                return;
            }
            models = [];
            firstIndex = this.sourceCollection.indexOf(this._collection.models[this._collection.length - 1]) + 1;
            results = [];
            for (i = j = ref = firstIndex, ref1 = firstIndex + this.loadSize - 1; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
                model = this.sourceCollection.models[i];
                if (model) {
                    results.push(this._collection.add(model));
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };

        ResourcePaginator.prototype.previous = function () {
            var firstIndex, i, j, model, ref, ref1, results;
            if (this.isAtTop()) {
                return;
            }
            firstIndex = this.sourceCollection.indexOf(this._collection.models[0]) - 1;
            results = [];
            for (i = j = ref = firstIndex, ref1 = firstIndex - this.loadSize; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
                model = this.sourceCollection.models[i];
                if (model) {
                    results.push(this._collection.unshift(model));
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };

        ResourcePaginator.prototype.overLimitCount = function () {
            return this._collection.length - +(this.loadSize / 2);
        };

        ResourcePaginator.prototype.trimTop = function () {
            var overLimit;
            overLimit = this.overLimitCount();
            return _.each(_.range(0, overLimit), (function (_this) {
                return function (x) {
                    return _this._collection.remove(_this._collection.models[0]);
                };
            })(this));
        };

        ResourcePaginator.prototype.trimBottom = function () {
            var overLimit;
            overLimit = this.overLimitCount();
            return _.each(_.range(0, overLimit), (function (_this) {
                return function (x) {
                    return _this._collection.remove(_this._collection.models[_this._collection.length - 1]);
                };
            })(this));
        };

        ResourcePaginator.prototype.start = function () {
            var $window;
            return $window = $(window);
        };

        return ResourcePaginator;

    })();

}).call(this);
;
(function () {
    SpriteSpinner = function (el, options) {
        var self = this,
            img = el.children[0];
        this.interval = options.interval || 10;
        this.diameter = options.diameter || img.width;
        this.count = 0;
        this.el = el;
        img.setAttribute("style", "position:absolute");
        el.style.width = this.diameter + "px";
        el.style.height = this.diameter + "px";
        return this;
    };
    SpriteSpinner.prototype.start = function () {
        var self = this,
            count = 0,
            img = this.el.children[0];
        this.el.display = "block";
        self.loop = setInterval(function () {
            if (count == 19) {
                count = 0;
            }
            img.style.top = (-self.diameter * count) + "px";
            count++;
        }, this.interval);
    };
    SpriteSpinner.prototype.stop = function () {
        clearInterval(this.loop);
        this.el.style.display = "none";
    };
    document.SpriteSpinner = SpriteSpinner;
})();
// $(document).ready(function(){
//     $(".sprite-spinner").each(function(i){
//       var s = new SpriteSpinner(this, {
//         interval:50
//       });
//       s.start();
//     });
// });
;
(function () {
    RG.Utils.SteppedExecutor = (function () {
        function SteppedExecutor() { }

        SteppedExecutor.prototype.stepEach = function (methods, delayMultiplier) {
            var wrappedPromises;
            if (delayMultiplier == null) {
                delayMultiplier = 10;
            }
            wrappedPromises = _.map(methods, function (method, index) {
                var delay;
                delay = delayMultiplier * (index + 1);
                return Q.delay(delay).then(method)["catch"](function (e) {
                    return console.log(e);
                });
            });
            return Q.allSettled(wrappedPromises);
        };

        return SteppedExecutor;

    })();

}).call(this);
;
(function () {
    RG.Utils.TimePeriodsCalculator = (function () {
        function TimePeriodsCalculator(collection) {
            this.collection = collection;
            this._minutes = {};
            this._dateMinutes = {};
            this.collection.on('add remove reset change:startTime change:endTime maxAvailabilityChanged', (function (_this) {
                return function () {
                    _this._minutes = {};
                    return _this._dateMinutes = {};
                };
            })(this));
        }

        TimePeriodsCalculator.prototype.sum = function (date) {
            var i, key, len, minutes, period, ref;
            key = date.valueOf().toString();
            if (this._dateMinutes[key]) {
                return this._dateMinutes[key];
            }
            minutes = 0;
            ref = this.collection.models;
            for (i = 0, len = ref.length; i < len; i++) {
                period = ref[i];
                if (period.isValidOn(date)) {
                    minutes += period.getMinutesAvailable();
                }
            }
            return this._dateMinutes[key] = minutes;
        };

        TimePeriodsCalculator.prototype.availableMinutes = function (dateRange) {
            var date, day, i, j, key, len, minutes, period, ref, ref1, sd;
            key = dateRange.startDate.valueOf().toString() + ':' + dateRange.endDate.valueOf().toString();
            if (this._minutes[key]) {
                return this._minutes[key];
            }
            sd = dateRange.startDate;
            minutes = 0;
            date = new Date(sd);
            for (day = i = 0, ref = dateRange.getNumberOfDays() - 1; 0 <= ref ? i <= ref : i >= ref; day = 0 <= ref ? ++i : --i) {
                ref1 = this.collection.models;
                for (j = 0, len = ref1.length; j < len; j++) {
                    period = ref1[j];
                    if (period.isValidOn(date)) {
                        minutes += period.getMinutesAvailable();
                    }
                }
                date.setDate(date.getDate() + 1);
            }
            return this._minutes[key] = minutes;
        };

        return TimePeriodsCalculator;

    })();

}).call(this);
;
(function () {
    RG.Utils.VisualSearchFacetAdapter = (function () {
        function VisualSearchFacetAdapter(value, category, facet1) {
            this.value = value;
            this.category = category;
            this.facet = facet1;
        }

        VisualSearchFacetAdapter.prototype.toSearchFacet = function () {
            var facet;
            facet = {
                category: this.category,
                label: {
                    toString: (function (_this) {
                        return function () {
                            return _this.facet;
                        };
                    })(this),
                    trim: (function (_this) {
                        return function () {
                            return {
                                value: _this.value,
                                toString: function () {
                                    return _this.category + " > " + _this.facet;
                                }
                            };
                        };
                    })(this)
                }
            };
            return facet;
        };

        return VisualSearchFacetAdapter;

    })();

}).call(this);
;
(function () {
    RG.Parsers.AvailablePeriodParser = (function () {
        function AvailablePeriodParser(dateStringProcessor) {
            this.dateStringProcessor = dateStringProcessor;
        }

        AvailablePeriodParser.prototype.parse = function (resourceInstance, resource) {
            var ap, apm, aps, i, len, ref;
            aps = [];
            ref = resource.available_periods;
            for (i = 0, len = ref.length; i < len; i++) {
                ap = ref[i];
                apm = new RG.Models.AvailablePeriod({
                    weekDay: ap.week_day,
                    startTime: ap.start_time,
                    endTime: ap.end_time,
                    validFrom: this.dateStringProcessor(ap.valid_from)
                });
                if (ap.valid_until) {
                    apm.set({
                        validUntil: this.dateStringProcessor(ap.valid_until)
                    });
                }
                aps.push(apm);
            }
            resourceInstance.availablePeriods.setModels(aps);
            return aps;
        };

        return AvailablePeriodParser;

    })();

}).call(this);
;
(function () {
    var indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

    RG.Parsers.BookerParser = (function () {
        function BookerParser(usersJson, resourcesJson, collection) {
            this.usersJson = usersJson;
            this.resourcesJson = resourcesJson;
            this.collection = collection;
        }

        BookerParser.prototype.parse = function () {
            var activeHumanResources, activeHumanResourcesEmails, bookerModels, i, len, ref, ref1, ref2, u;
            activeHumanResources = this.resourcesJson.filter(function (resource) {
                return resource.human === true;
            });
            activeHumanResourcesEmails = activeHumanResources.map(function (resource) {
                return resource.email;
            });
            bookerModels = [];
            ref = this.usersJson;
            for (i = 0, len = ref.length; i < len; i++) {
                u = ref[i];
                bookerModels.push(new RG.Models.Booker({
                    id: u.id,
                    name: u.first_name + " " + u.last_name,
                    imageUrl: u.image,
                    color: u.color,
                    archived: (ref1 = u.email, indexOf.call(activeHumanResourcesEmails, ref1) < 0)
                }));
            }
            if ((ref2 = this.collection) != null) {
                ref2.reset(bookerModels);
            }
            return bookerModels;
        };

        return BookerParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.BookingBuilder = (function () {
        function BookingBuilder(dateStringProcessor, durationParser, projects, clients, deletedProjects, deletedClients, bookers, deletedBookers) {
            this.dateStringProcessor = dateStringProcessor;
            this.durationParser = durationParser;
            this.projects = projects;
            this.clients = clients;
            this.deletedProjects = deletedProjects;
            this.deletedClients = deletedClients;
            this.bookers = bookers;
            this.deletedBookers = deletedBookers;
        }

        BookingBuilder.prototype.build = function (booking) {
            var attributes, b, booker, booker_found, c, client_found, deleted_booker, i, j, k, l, len, len1, len2, len3, len4, len5, m, n, p, project_found, ref, ref1, ref2, ref3, ref4, ref5;
            b = new RG.Models.Booking;
            attributes = {
                id: booking.id,
                notes: booking.notes,
                startDate: this.dateStringProcessor(booking.start_date),
                endDate: this.dateStringProcessor(booking.end_date),
                createdAt: new Date(booking.created_at),
                updatedAt: new Date(booking.updated_at),
                billable: booking.billable,
                refreshable: booking.refreshable
            };
            project_found = false;
            client_found = false;
            if (booking.project_id) {
                ref = this.projects.models;
                for (i = 0, len = ref.length; i < len; i++) {
                    p = ref[i];
                    if (p.id === booking.project_id) {
                        attributes.project = p;
                        project_found = true;
                        break;
                    }
                }
            } else if (booking.client_id) {
                ref1 = this.clients.models;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    c = ref1[j];
                    if (c.id === booking.client_id) {
                        attributes.client = c;
                        client_found = true;
                        break;
                    }
                }
            }
            if (!project_found && booking.project_id) {
                ref2 = this.deletedProjects.models;
                for (k = 0, len2 = ref2.length; k < len2; k++) {
                    p = ref2[k];
                    if (p.id === booking.project_id) {
                        attributes.project = p;
                        break;
                    }
                }
            } else if (!client_found && booking.client_id) {
                ref3 = this.deletedClients.models;
                for (l = 0, len3 = ref3.length; l < len3; l++) {
                    c = ref3[l];
                    if (c.id === booking.client_id) {
                        attributes.client = c;
                        break;
                    }
                }
            }
            booker_found = false;
            ref4 = this.bookers.models;
            for (m = 0, len4 = ref4.length; m < len4; m++) {
                booker = ref4[m];
                if (booker.id === booking.booker.id) {
                    attributes.booker = booker;
                    booker_found = true;
                    break;
                }
            }
            if (!booker_found) {
                ref5 = this.deletedBookers.models;
                for (n = 0, len5 = ref5.length; n < len5; n++) {
                    deleted_booker = ref5[n];
                    if (deleted_booker.id === booking.booker.id) {
                        attributes.booker = deleted_booker;
                        break;
                    }
                }
            }
            b.attributes = attributes;
            b.id = attributes.id;
            this.durationParser.parse(b, booking);
            return b;
        };

        return BookingBuilder;

    })();

}).call(this);
;
(function () {
    RG.Parsers.BookingParser = (function () {
        function BookingParser(bookingsJson, bookingBuilder) {
            this.bookingsJson = bookingsJson;
            this.bookingBuilder = bookingBuilder;
        }

        BookingParser.prototype.parse = function (resourceModels) {
            var booking, bookings, i, j, len, len1, ref, resource;
            for (i = 0, len = resourceModels.length; i < len; i++) {
                resource = resourceModels[i];
                bookings = [];
                ref = this.bookingsJson;
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    booking = ref[j];
                    if (booking.resource_id === resource.id) {
                        bookings.push(this.bookingBuilder.build(booking));
                    }
                }
                resource.bookings.setModels(bookings);
            }
        };

        return BookingParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.ClientParser = (function () {
        function ClientParser(clientsJson, archiveClientsJson, collection) {
            this.clientsJson = clientsJson;
            this.archiveClientsJson = archiveClientsJson;
            this.collection = collection;
        }

        ClientParser.prototype.parse = function () {
            var c, client, clientModels, i, j, len, len1, ref, ref1, ref2;
            clientModels = [];
            ref = this.clientsJson;
            for (i = 0, len = ref.length; i < len; i++) {
                client = ref[i];
                c = new RG.Models.Client;
                c.attributes = {
                    id: client.id,
                    name: client.name,
                    color: client.color
                };
                c.id = client.id;
                clientModels.push(c);
            }
            ref1 = this.archiveClientsJson;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                client = ref1[j];
                c = new RG.Models.Client;
                c.attributes = {
                    id: client.id,
                    name: client.name,
                    color: client.color,
                    archived: true
                };
                c.id = client.id;
                clientModels.push(c);
            }
            if ((ref2 = this.collection) != null) {
                ref2.reset(clientModels);
            }
            return clientModels;
        };

        return ClientParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.CustomAvailablePeriodParser = (function () {
        function CustomAvailablePeriodParser(dateStringProcessor) {
            this.dateStringProcessor = dateStringProcessor;
        }

        CustomAvailablePeriodParser.prototype.parse = function (resourceInstance, resource) {
            var ap, apm, aps, i, len, ref;
            aps = [];
            ref = resource.custom_available_periods;
            for (i = 0, len = ref.length; i < len; i++) {
                ap = ref[i];
                apm = new RG.Models.CustomAvailablePeriod({
                    date: this.dateStringProcessor(ap.date),
                    startTime: ap.start_time,
                    endTime: ap.end_time
                });
                aps.push(apm);
            }
            resourceInstance.customAvailablePeriods.setModels(aps);
            return aps;
        };

        return CustomAvailablePeriodParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.CustomFieldParser = (function () {
        function CustomFieldParser() { }

        CustomFieldParser.prototype.parse = function (resourceInstance, resource, resourceType) {
            var cf, i, j, len, len1, ref, resourceTypeFields, results, scf, scfom;
            ref = resource.selected_custom_field_options;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                scf = ref[i];
                resourceTypeFields = _.flatten(resourceType.customFields.map(function (cf) {
                    return cf.customFieldOptions.models;
                }));
                scfom = null;
                for (j = 0, len1 = resourceTypeFields.length; j < len1; j++) {
                    cf = resourceTypeFields[j];
                    if (scf.id === cf.id) {
                        scfom = cf;
                        break;
                    }
                }
                results.push(resourceInstance.customFieldOptions.add(scfom));
            }
            return results;
        };

        return CustomFieldParser;

    })();

}).call(this);
;
(function () {
    RG.Utils.CustomFieldParser = (function () {
        function CustomFieldParser() { }

        CustomFieldParser.prototype.parse = function (resourceInstance, resource, resourceType) {
            var cf, i, j, len, len1, ref, resourceTypeFields, results, scf, scfom;
            ref = resource.selected_custom_field_options;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                scf = ref[i];
                resourceTypeFields = _.flatten(resourceType.customFields.map(function (cf) {
                    return cf.customFieldOptions.models;
                }));
                scfom = null;
                for (j = 0, len1 = resourceTypeFields.length; j < len1; j++) {
                    cf = resourceTypeFields[j];
                    if (scf.id === cf.id) {
                        scfom = cf;
                        break;
                    }
                }
                results.push(resourceInstance.customFieldOptions.add(scfom));
            }
            return results;
        };

        return CustomFieldParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.DeletedBookerParser = (function () {
        function DeletedBookerParser(deletedBookerJson, collection) {
            this.deletedBookerJson = deletedBookerJson;
            this.collection = collection;
        }

        DeletedBookerParser.prototype.parse = function () {
            var bookerModels, i, len, ref, ref1, u;
            bookerModels = [];
            if (this.deletedBookerJson) {
                ref = this.deletedBookerJson;
                for (i = 0, len = ref.length; i < len; i++) {
                    u = ref[i];
                    bookerModels.push(new RG.Models.Booker({
                        id: u.id,
                        name: u.first_name + " " + u.last_name
                    }));
                }
                if ((ref1 = this.collection) != null) {
                    ref1.reset(bookerModels);
                }
            }
            return bookerModels;
        };

        return DeletedBookerParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.DeletedClientParser = (function () {
        function DeletedClientParser(deletedClientsJson, collection) {
            this.deletedClientsJson = deletedClientsJson;
            this.collection = collection;
        }

        DeletedClientParser.prototype.parse = function () {
            var client, deletedClients, i, len, ref, ref1;
            deletedClients = [];
            ref = this.deletedClientsJson;
            for (i = 0, len = ref.length; i < len; i++) {
                client = ref[i];
                deletedClients.push(new RG.Models.Client({
                    id: client.id,
                    name: client.name,
                    color: client.color
                }));
            }
            if ((ref1 = this.collection) != null) {
                ref1.reset(deletedClients);
            }
            return deletedClients;
        };

        return DeletedClientParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.DeletedProjectParser = (function () {
        function DeletedProjectParser(deletedProjectsJson, clientModels, collection) {
            this.deletedProjectsJson = deletedProjectsJson;
            this.clientModels = clientModels;
            this.collection = collection;
        }

        DeletedProjectParser.prototype.parse = function () {
            var i, len, p, project, projectModels, ref, ref1;
            projectModels = [];
            ref = this.deletedProjectsJson;
            for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                project = new RG.Models.Project({
                    id: p.id,
                    name: p.name,
                    color: p.color
                });
                if (p.client_id) {
                    project.set({
                        client: _.find(this.clientModels, function (c) {
                            return c.get('id') === p.client_id;
                        })
                    });
                }
                projectModels.push(project);
            }
            if ((ref1 = this.collection) != null) {
                ref1.reset(projectModels);
            }
            return projectModels;
        };

        return DeletedProjectParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.DowntimeParser = (function () {
        function DowntimeParser(downtimesJson, dateStringProcessor, collection, timezones, downtimeTypes) {
            this.downtimesJson = downtimesJson;
            this.dateStringProcessor = dateStringProcessor;
            this.collection = collection;
            this.timezones = timezones;
            this.downtimeTypes = downtimeTypes;
        }

        DowntimeParser.prototype.parse = function () {
            var allDowntimeIds, removedDowntimes;
            allDowntimeIds = this.downtimesJson.map(function (c) {
                return c.id;
            });
            removedDowntimes = this.collection.models.filter(function (d) {
                return allDowntimeIds.indexOf(d.id) === -1;
            });
            removedDowntimes.forEach((function (_this) {
                return function (d) {
                    var i, len, ref, results, rid;
                    _this.collection.remove(d);
                    ref = d.get('resourceIds');
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        rid = ref[i];
                        results.push(_this.collection.trigger("remove:resource_id:" + rid, d));
                    }
                    return results;
                };
            })(this));
            return this.downtimesJson.forEach((function (_this) {
                return function (downtime) {
                    var d, downtimeUpdatedAt, isNew, newAttributes, ref, resources;
                    d = _this.collection.findWhere({
                        id: downtime.id
                    });
                    if (!d) {
                        isNew = true;
                        d = new RG.Models.Downtime;
                    }
                    downtimeUpdatedAt = _this.dateStringProcessor(downtime.updated_at);
                    if (((ref = d.get('updatedAt')) != null ? ref.getTime() : void 0) === downtimeUpdatedAt) {
                        return;
                    }
                    newAttributes = {
                        id: downtime.id,
                        from: _this.dateStringProcessor(downtime.from),
                        to: _this.dateStringProcessor(downtime.to),
                        updatedAt: _this.dateStringProcessor(downtime.updated_at),
                        timeZone: _this.timezones.findWhere({
                            name: downtime.timezone
                        }),
                        startTime: downtime.start_time,
                        endTime: downtime.end_time,
                        downtimeTypeId: downtime.downtime_type_id,
                        details: downtime.details,
                        state: downtime.state,
                        creatorId: downtime.creator_id,
                        leave: downtime.leave,
                        resourceIds: downtime.resource_ids,
                        downtimeType: _this.downtimeTypes.findWhere({
                            id: downtime.downtime_type_id
                        })
                    };
                    resources = window.resources.filter(function (r) {
                        return downtime.resource_ids.indexOf(r) !== -1;
                    });
                    d.id = newAttributes.id;
                    return RG.renderer.enqueue(new RG.Renderer.GlobalLock, function () {
                        var i, len, ref1, results, rid;
                        if (!isNew && !_.isEqual(newAttributes, d.attributes)) {
                            d.set(newAttributes);
                        }
                        if (isNew) {
                            d.attributes = newAttributes;
                            _this.collection.add(d);
                            ref1 = downtime.resource_ids;
                            results = [];
                            for (i = 0, len = ref1.length; i < len; i++) {
                                rid = ref1[i];
                                results.push(_this.collection.trigger("add:resource_id:" + rid, d));
                            }
                            return results;
                        }
                    });
                };
            })(this));
        };

        return DowntimeParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.DurationParser = (function () {
        function DurationParser(dateStringProcessor) {
            this.dateStringProcessor = dateStringProcessor;
        }

        DurationParser.prototype.parse = function (bookingModel, booking) {
            var d, date, duration, durations, i, len, nextDate, prevDate, ref;
            durations = [];
            prevDate = null;
            ref = booking.durations;
            for (i = 0, len = ref.length; i < len; i++) {
                duration = ref[i];
                date = this.dateStringProcessor(duration.date);
                if (prevDate) {
                    while (new RG.Utils.DateRange(date, prevDate).getNumberOfDays() > 1) {
                        d = new RG.Models.Duration;
                        nextDate = new Date(prevDate);
                        nextDate.setDate(nextDate.getDate() + 1);
                        d.attributes = {
                            date: nextDate,
                            minutes: 0,
                            waiting: false
                        };
                        durations.push(d);
                        prevDate = new Date(nextDate);
                    }
                }
                if (duration.start_time || duration.start_time === 0) {
                    d = new RG.Models.FixedDuration;
                    d.attributes = {
                        date: date,
                        startTime: duration.start_time,
                        endTime: duration.end_time,
                        waiting: duration.waiting
                    };
                    durations.push(d);
                } else {
                    d = new RG.Models.Duration;
                    d.attributes = {
                        date: date,
                        minutes: duration.duration,
                        waiting: duration.waiting
                    };
                    durations.push(d);
                }
                prevDate = date;
            }
            bookingModel.durations.reset(durations);
            return durations;
        };

        return DurationParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.OvertimeParser = (function () {
        function OvertimeParser(overtimesJson, dateStringProcessor) {
            this.overtimesJson = overtimesJson;
            this.dateStringProcessor = dateStringProcessor;
        }

        OvertimeParser.prototype.parse = function (resourceInstance, resetOptions) {
            var i, len, otimes, overtime, overtimeModel, overtimes;
            if (resetOptions == null) {
                resetOptions = {};
            }
            otimes = [];
            overtimes = this._groupOvertimes()[resourceInstance.id];
            if (!overtimes) {
                return [];
            }
            for (i = 0, len = overtimes.length; i < len; i++) {
                overtime = overtimes[i];
                overtimeModel = new RG.Models.Overtime({
                    id: overtime.id,
                    resourceInstanceId: overtime.resource_instance_id,
                    date: this.dateStringProcessor(overtime.date),
                    duration: overtime.duration,
                    creatorId: overtime.creator_id
                });
                otimes.push(overtimeModel);
            }
            resourceInstance.overtimes.setModels(otimes, resetOptions);
            return otimes;
        };

        OvertimeParser.prototype._groupOvertimes = function () {
            if (this._groupedOvertimes) {
                return this._groupedOvertimes;
            }
            return this._groupedOvertimes = _.groupBy(this.overtimesJson, 'resource_instance_id');
        };

        return OvertimeParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.ProjectParser = (function () {
        function ProjectParser(projectsJson, archivedProjectsJson, clientModels, collection) {
            this.projectsJson = projectsJson;
            this.archivedProjectsJson = archivedProjectsJson;
            this.clientModels = clientModels;
            this.collection = collection;
        }

        ProjectParser.prototype.parse = function () {
            var i, j, len, len1, p, project, projectModels, ref, ref1, ref2;
            projectModels = [];
            ref = this.projectsJson;
            for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                project = new RG.Models.Project;
                project.attributes = {
                    id: p.id,
                    name: p.name,
                    color: p.color,
                    default_billable: p.default_billable
                };
                if (p.client_id) {
                    project.attributes.client = this.clientModels.find(function (c) {
                        return c.get('id') === p.client_id;
                    });
                }
                if (p.project_code) {
                    project.attributes.project_code = p.project_code;
                }
                project.id = p.id;
                projectModels.push(project);
            }
            ref1 = this.archivedProjectsJson;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                p = ref1[j];
                project = new RG.Models.Project;
                project.attributes = {
                    id: p.id,
                    name: p.name,
                    color: p.color,
                    default_billable: p.default_billable,
                    archived: true
                };
                if (p.client_id) {
                    project.attributes.client = this.clientModels.find(function (c) {
                        return c.get('id') === p.client_id;
                    });
                }
                if (p.project_code) {
                    project.attributes.project_code = p.project_code;
                }
                project.id = p.id;
                projectModels.push(project);
            }
            if ((ref2 = this.collection) != null) {
                ref2.reset(projectModels);
            }
            return projectModels;
        };

        return ProjectParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.ResourceParser = (function () {
        function ResourceParser(resourcesJson, collection, timezones, options) {
            this.resourcesJson = resourcesJson;
            this.collection = collection;
            this.timezones = timezones;
            _.extend(this, options);
        }

        ResourceParser.prototype.parse = function () {
            var i, len, offset, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, resource, resourceClass, resourceType, ri, rm;
            rm = [];
            ref = this.resourcesJson;
            for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                resourceType = (ref1 = this.resourceTypes) != null ? ref1.findWhere({
                    id: resource.resource_type.id
                }) : void 0;
                if (resource.resource_type.name === "Person") {
                    resourceClass = RG.Models.HumanResourceInstance;
                } else {
                    resourceClass = RG.Models.ResourceInstance;
                }
                offset = this.findTimeZoneOffset(resource.timezone);
                ri = new resourceClass({
                    account: RG.Utils.getCurrentAccount(),
                    id: resource.id,
                    name: resource.name,
                    type: resource.job_title || resource.resource_type.name,
                    resourceType: resourceType,
                    human: resource.human,
                    bookable: resource.bookable,
                    vacationAllowance: resource.vacation_allowance,
                    imageUrl: resource.image,
                    timeZone: new RG.Models.TimeZone({
                        name: resource.timezone.name,
                        offset: offset
                    }),
                    displayTimeZone: new RG.Models.TimeZone({
                        name: resource.timezone.name,
                        offset: resource.timezone.offset
                    }),
                    bookedClients: (ref2 = this.clients) != null ? ref2.select(function (c) {
                        return _.contains(resource.booked_client_ids, c.id);
                    }) : void 0,
                    bookedProjects: (ref3 = this.projects) != null ? ref3.select(function (c) {
                        return _.contains(resource.booked_project_ids, c.id);
                    }) : void 0
                });
                ri.layerController = new RG.Controllers.TimeAllocationLayers(ri.bookings, ri.downtimes);
                if ((ref4 = this.availablePeriodParser) != null) {
                    ref4.parse(ri, resource);
                }
                if ((ref5 = this.customAvailablePeriodParser) != null) {
                    ref5.parse(ri, resource);
                }
                if ((ref6 = this.overtimeParser) != null) {
                    ref6.parse(ri);
                }
                if ((ref7 = this.customFieldParser) != null) {
                    ref7.parse(ri, resource, resourceType);
                }
                rm.push(ri);
            }
            if ((ref8 = this.bookingParser) != null) {
                ref8.parse(rm);
            }
            window.resources.setModels(rm);
            return rm;
        };

        ResourceParser.prototype.findTimeZoneOffset = function (timezone) {
            var storedTimezone;
            if (storedTimezone = this.timezones.findWhere({
                name: timezone.name
            })) {
                return storedTimezone.get('offset');
            } else {
                return timezone.offset;
            }
        };

        return ResourceParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.ResourceTypeParser = (function () {
        function ResourceTypeParser(resourceTypesJson, collection) {
            this.resourceTypesJson = resourceTypesJson;
            this.collection = collection;
        }

        ResourceTypeParser.prototype.parse = function () {
            var cf, cfm, cfo, cfom, i, j, k, len, len1, len2, ref, ref1, ref2, ref3, resourceTypeModels, rt, rtm;
            resourceTypeModels = [];
            ref = this.resourceTypesJson;
            for (i = 0, len = ref.length; i < len; i++) {
                rt = ref[i];
                rtm = new RG.Models.ResourceType({
                    id: rt.id,
                    name: rt.name
                });
                ref1 = rt.custom_fields;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    cf = ref1[j];
                    cfm = new RG.Models.CustomField({
                        name: cf.name,
                        id: cf.id
                    });
                    ref2 = cf.custom_field_options;
                    for (k = 0, len2 = ref2.length; k < len2; k++) {
                        cfo = ref2[k];
                        cfom = new RG.Models.CustomFieldOption({
                            id: cfo.id,
                            name: cfo.value,
                            resourceType: rtm,
                            customField: cfm
                        });
                        cfm.customFieldOptions.add(cfom);
                    }
                    rtm.customFields.add(cfm);
                }
                resourceTypeModels.push(rtm);
            }
            if ((ref3 = this.collection) != null) {
                ref3.reset(resourceTypeModels);
            }
            return resourceTypeModels;
        };

        return ResourceTypeParser;

    })();

}).call(this);
;
(function () {
    RG.Parsers.SavedFilterParser = (function () {
        function SavedFilterParser(savedFiltersJson, collection) {
            this.savedFiltersJson = savedFiltersJson;
            this.collection = collection;
        }

        SavedFilterParser.prototype.parse = function () {
            var i, len, ref, ref1, savedFilterModels, sf;
            savedFilterModels = [];
            ref = this.savedFiltersJson;
            for (i = 0, len = ref.length; i < len; i++) {
                sf = ref[i];
                savedFilterModels.push(new RG.Models.SavedFilter({
                    id: sf.id,
                    name: sf.name,
                    filter_json: sf.filter_json
                }));
            }
            if ((ref1 = this.collection) != null) {
                ref1.reset(savedFilterModels);
            }
            return savedFilterModels;
        };

        return SavedFilterParser;

    })();

}).call(this);
;
(function () {
    RG.Utils.Range = (function () {
        function Range() { }

        Range.prototype.getStart = function () {
            throw 'Implement `getStart` in subclasses of Range';
        };

        Range.prototype.getEnd = function () {
            throw 'Implement `getEnd` in subclasses of Range';
        };

        Range.prototype.contains = function (other) {
            return this.getStart() <= other.getStart() && this.getEnd() >= other.getEnd();
        };

        Range.prototype.overlapsWith = function (other) {
            return this.getEnd() > other.getStart() && this.getStart() < other.getEnd();
        };

        Range.prototype.isTouching = function (other) {
            return this.getEnd() >= other.getStart() && this.getStart() <= other.getEnd();
        };

        Range.prototype.includes = function (value) {
            return value && this.getStart().valueOf() <= value.valueOf() && this.getEnd().valueOf() >= value.valueOf();
        };

        return Range;

    })();

}).call(this);
;
(function () {
    RG.Utils.getCurrentAccount = function () {
        return this._currentAccount != null ? this._currentAccount : this._currentAccount = new RG.Models.Account({
            subdomain: window.location.host.substr(0, window.location.host.indexOf(".")),
            downtimes: window.downtimes
        });
    };

}).call(this);
;
(function () {
    RG.Utils.AvailabilityManager = (function () {
        function AvailabilityManager(options) {
            _.extend(this, Backbone.Events);
            this._maxMinutesInUnit = {};
            this.availablePeriods = options.availablePeriods || new RG.Collections.AvailablePeriods;
            this.customAvailablePeriods = options.customAvailablePeriods || new RG.Collections.CustomAvailablePeriods;
            this.overtimes = options.overtimes || new RG.Collections.Overtimes;
            this.downtimes = options.downtimes || new RG.Collections.Downtimes;
            this.resource = options.resource;
            this.timeZone = options.timeZone || RG.Models.TimeZone.Current;
            this._minutesInDateRange = {};
            if (!options.ignoreEvents) {
                this.availablePeriods.on("add remove reset", (function (_this) {
                    return function () {
                        _this._clearMaxMinutesInUnit();
                        return _this.trigger('refreshUtilisation');
                    };
                })(this));
                this.customAvailablePeriods.on("add remove reset", (function (_this) {
                    return function () {
                        _this._clearMaxMinutesInUnit();
                        return _this.trigger('refreshUtilisation');
                    };
                })(this));
                this.downtimes.on("add remove change reset", (function (_this) {
                    return function () {
                        return _this._clearMaxMinutesInUnit();
                    };
                })(this));
                this.overtimes.on("add remove change reset", (function (_this) {
                    return function () {
                        _this._clearMaxMinutesInUnit();
                        return _this.trigger('refreshUtilisation');
                    };
                })(this));
                this.downtimes.on("add", (function (_this) {
                    return function (d) {
                        var dd;
                        dd = d.inTimeZone(_this.resource.get('timeZone'));
                        return _this.trigger('refresh', new RG.Utils.DateRange(dd.get('from'), dd.get('to')));
                    };
                })(this));
                this.downtimes.on("remove", (function (_this) {
                    return function (d) {
                        var dd;
                        dd = d.inTimeZone(_this.resource.get('timeZone'));
                        return _this.trigger('refresh', new RG.Utils.DateRange(dd.get('from'), dd.get('to')));
                    };
                })(this));
                this.downtimes.on("change", (function (_this) {
                    return function (d) {
                        var dd, old;
                        dd = d.inTimeZone(_this.resource.get('timeZone'));
                        _this.trigger('refresh', new RG.Utils.DateRange(dd.get('from'), dd.get('to')));
                        old = new RG.Models.Downtime(d.previousAttributes());
                        dd = old.inTimeZone(_this.resource.get('timeZone'));
                        return _this.trigger('refresh', new RG.Utils.DateRange(dd.get('from'), dd.get('to')));
                    };
                })(this));
                this.on('add remove reset', this._clearMaxMinutesInUnit);
                this.on('maxAvailabilityChanged', this._flushCache);
            }
        }

        AvailabilityManager.prototype.getOvertimeMinutesInDateRange = function (dateRange) {
            return this.overtimes.getMinutesAvailableInDateRange(dateRange);
        };

        AvailabilityManager.prototype.getMinutesAvailableForDate = function (date, timeRange) {
            var dateRange;
            if (timeRange == null) {
                timeRange = null;
            }
            dateRange = new RG.Utils.DateRange(date, date);
            return this.getMinutesAvailableInDateRange(dateRange, timeRange);
        };

        AvailabilityManager.prototype.getMinutesAvailableInDateRange = function (dateRange, timeRange) {
            var minutes, resource;
            if (timeRange == null) {
                timeRange = null;
            }
            if (this._minutesInDateRange[dateRange]) {
                return this._minutesInDateRange[dateRange];
            }
            minutes = 0;
            resource = this.resource;
            this.getDowntimeAndAvailablePeriodAggregateForDateRange(dateRange, timeRange).forEach(function (aggregate) {
                var downtimeTimeRanges, j, len, period, periodsTimeRanges, results1;
                downtimeTimeRanges = aggregate.downtimes.map(function (downtime) {
                    return downtime.getTimeRange(aggregate.date);
                });
                periodsTimeRanges = aggregate.periods;
                if (downtimeTimeRanges.length > 1) {
                    timeRange = downtimeTimeRanges.shift();
                    downtimeTimeRanges = timeRange.merge.apply(timeRange, downtimeTimeRanges);
                }
                if (periodsTimeRanges.length > 1) {
                    timeRange = periodsTimeRanges.shift();
                    periodsTimeRanges = timeRange.merge.apply(timeRange, periodsTimeRanges);
                }
                results1 = [];
                for (j = 0, len = periodsTimeRanges.length; j < len; j++) {
                    period = periodsTimeRanges[j];
                    if (downtimeTimeRanges.length) {
                        results1.push(minutes += period.subtractAll(downtimeTimeRanges));
                    } else {
                        results1.push(minutes += period.totalTime() | 0);
                    }
                }
                return results1;
            });
            return this._minutesInDateRange[dateRange] = minutes;
        };

        AvailabilityManager.prototype.getAvailableTimeRangesInDateRange = function (dateRange, timeRange) {
            var aggregate, downtime, downtimeTimeRanges, hasRemainingPeriod, j, k, l, len, len1, len2, len3, m, period, periodsTimeRanges, r, ranges, ref, ref1, resource;
            if (timeRange == null) {
                timeRange = null;
            }
            ranges = [];
            resource = this.resource;
            ref = this.getDowntimeAndAvailablePeriodAggregateForDateRange(dateRange, timeRange);
            for (j = 0, len = ref.length; j < len; j++) {
                aggregate = ref[j];
                downtimeTimeRanges = aggregate.downtimes.map(function (downtime) {
                    return downtime.getTimeRange(aggregate.date);
                });
                periodsTimeRanges = aggregate.periods;
                if (downtimeTimeRanges.length > 1) {
                    timeRange = downtimeTimeRanges.shift();
                    downtimeTimeRanges = timeRange.merge.apply(timeRange, downtimeTimeRanges);
                }
                if (periodsTimeRanges.length > 1) {
                    timeRange = periodsTimeRanges.shift();
                    periodsTimeRanges = timeRange.merge.apply(timeRange, periodsTimeRanges);
                }
                for (k = 0, len1 = periodsTimeRanges.length; k < len1; k++) {
                    period = periodsTimeRanges[k];
                    if (downtimeTimeRanges.length) {
                        hasRemainingPeriod = false;
                        for (l = 0, len2 = downtimeTimeRanges.length; l < len2; l++) {
                            downtime = downtimeTimeRanges[l];
                            if (period.overlapsWith(downtime)) {
                                ref1 = period.subtractOne(downtime);
                                for (m = 0, len3 = ref1.length; m < len3; m++) {
                                    r = ref1[m];
                                    ranges.push(r);
                                }
                                hasRemainingPeriod = true;
                            }
                        }
                        if (!hasRemainingPeriod) {
                            ranges.push(period);
                        }
                    } else {
                        ranges.push(period);
                    }
                }
            }
            return ranges;
        };

        AvailabilityManager.prototype.hasNoNormalAvailability = function () {
            return this.availablePeriods.length === 0;
        };

        AvailabilityManager.prototype.getMaxMinutesInUnit = function (dateRange, memoize) {
            var customMinutesAvailable, date, j, k, len, len1, minutes, period, periodMinutesAvailable, ref, ref1, somePeriods;
            if (memoize == null) {
                memoize = true;
            }
            if (memoize && this._maxMinutesInUnit[dateRange.toString()]) {
                return this._maxMinutesInUnit[dateRange.toString()];
            }
            minutes = 0;
            ref = dateRange.getDates();
            for (j = 0, len = ref.length; j < len; j++) {
                date = ref[j];
                customMinutesAvailable = this.customAvailablePeriods.calculator().sum(date);
                periodMinutesAvailable = this.availablePeriods.calculator().sum(date);
                if (customMinutesAvailable > periodMinutesAvailable) {
                    periodMinutesAvailable = customMinutesAvailable;
                }
                if (periodMinutesAvailable > minutes) {
                    minutes = periodMinutesAvailable;
                }
            }
            somePeriods = this.availablePeriods.some(function (period) {
                return period.isValidInDateRange(dateRange);
            });
            if (!somePeriods) {
                ref1 = this._getBackfilledAvailablePeriods(dateRange.startDate);
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                    period = ref1[k];
                    periodMinutesAvailable = period.getMinutesAvailable();
                    if (periodMinutesAvailable > minutes) {
                        minutes = periodMinutesAvailable;
                    }
                }
            }
            return this._maxMinutesInUnit[dateRange.toString()] = minutes;
        };

        AvailabilityManager.prototype.inEarliestNormalAvailability = function (dateRange, timeRange) {
            var day, earliest, earliestOnDay, periods;
            if (timeRange == null) {
                timeRange = null;
            }
            day = dateRange.startDate.getDay();
            if (timeRange) {
                periods = this.availablePeriods.select(function (period) {
                    return period.getTimeRange().overlapsWith(timeRange);
                });
            } else {
                periods = this.availablePeriods.models;
            }
            earliest = _.min(periods, function (ap) {
                return ap.get('validFrom');
            });
            earliestOnDay = _.find(periods, function (ap) {
                return ap.get('weekDay') === day && RG.Utils.DateComparator.equalsYMD(ap.get('validFrom'), earliest.get('validFrom'));
            });
            return earliestOnDay && dateRange.startDate < earliest.get('validFrom') && !RG.Utils.DateComparator.equalsYMD(dateRange.startDate, earliest.get('validFrom'));
        };

        AvailabilityManager.prototype._clearMaxMinutesInUnit = function () {
            this._maxMinutesInUnit = {};
            this._minutesInDateRange = {};
        };

        AvailabilityManager.prototype._flushCache = function () {
            this._clearMaxMinutesInUnit();
            this.customAvailablePeriods._minutes = {};
        };

        AvailabilityManager.prototype.getOriginalPeriodsForDate = function (date) {
            var periods;
            periods = this.availablePeriods.models.filter(function (p) {
                return p.isValidOn(date);
            });
            if (periods.length) {
                return periods;
            } else if (!this._somePeriodsForDate(date)) {
                return this._getBackfilledAvailablePeriods(date);
            } else {
                return [];
            }
        };

        AvailabilityManager.prototype.getCustomPeriodsForDate = function (date) {
            return this.customAvailablePeriods.select(function (p) {
                return p.isValidOn(date);
            });
        };

        AvailabilityManager.prototype.getDowntimesForDateAndTimeRange = function (date, timeRange) {
            return this.downtimes.inTimeZone(this.getTimeZone()).forDate(date).filter(function (downtime) {
                var tRange;
                tRange = downtime.getTimeRange(date);
                return timeRange.overlapsWith(tRange);
            });
        };

        AvailabilityManager.prototype.getPeriodTimeRangesForDateAndTimeRange = function (date, timeRange) {
            var j, len, period, ref, results;
            results = [];
            ref = this.getPeriodsForDate(date);
            for (j = 0, len = ref.length; j < len; j++) {
                period = ref[j];
                if (timeRange.overlapsWith(period.getTimeRange())) {
                    results.push(period.getTimeRange());
                }
            }
            return results;
        };

        AvailabilityManager.prototype.getDowntimeAndAvailablePeriodAggregateForDateRange = function (dateRange, timeRange, year) {
            var aggregate, date, i, j, ref, sd;
            if (timeRange == null) {
                timeRange = new RG.Utils.TimeRange(0, 1440);
            }
            if (year == null) {
                year = null;
            }
            sd = dateRange.startDate;
            aggregate = [];
            for (i = j = 0, ref = dateRange.getNumberOfDays() - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                date = new Date(sd.getFullYear(), sd.getMonth(), sd.getDate() + i);
                if (year) {
                    if (date.getFullYear() === year) {
                        aggregate.push({
                            downtimes: this.getDowntimesForDateAndTimeRange(date, timeRange),
                            periods: this.getPeriodTimeRangesForDateAndTimeRange(date, timeRange),
                            date: date
                        });
                    }
                } else {
                    aggregate.push({
                        downtimes: this.getDowntimesForDateAndTimeRange(date, timeRange),
                        periods: this.getPeriodTimeRangesForDateAndTimeRange(date, timeRange),
                        date: date
                    });
                }
            }
            return aggregate;
        };

        AvailabilityManager.prototype.getPeriodsForDate = function (date) {
            var customPeriods;
            customPeriods = this.getCustomPeriodsForDate(date);
            if (customPeriods.length) {
                return customPeriods;
            } else {
                return this.getOriginalPeriodsForDate(date);
            }
        };

        AvailabilityManager.prototype.getTimeZone = function () {
            return this.timeZone;
        };

        AvailabilityManager.prototype.getOvertimesForDate = function (date) {
            var j, len, o, overtimes, ref;
            overtimes = [];
            ref = this.overtimes.models;
            for (j = 0, len = ref.length; j < len; j++) {
                o = ref[j];
                if (o.isValidOn(date)) {
                    overtimes.push(o);
                }
            }
            return overtimes;
        };

        AvailabilityManager.prototype.isAvailableStartAndEndDate = function (dateRange) {
            var endDateRange, startDateRange;
            startDateRange = new RG.Utils.DateRange(dateRange.startDate, dateRange.startDate);
            endDateRange = new RG.Utils.DateRange(dateRange.endDate, dateRange.endDate);
            return this.isAvailableIn(startDateRange) && this.isAvailableIn(endDateRange);
        };

        AvailabilityManager.prototype.isAvailableIn = function (dateRange, timeRange) {
            if (timeRange == null) {
                timeRange = null;
            }
            return this.getMinutesAvailableInDateRange(dateRange, timeRange) > 0 || this.inEarliestNormalAvailability(dateRange, timeRange);
        };

        AvailabilityManager.prototype.intersectsWithDowntime = function (date, timeRange) {
            return this.downtimes.any((function (_this) {
                return function (downtime) {
                    return downtime.inTimeZone(_this.resource.get('timeZone')).getTimeRange(date).overlapsWith(timeRange);
                };
            })(this));
        };

        AvailabilityManager.prototype._getBackfilledAvailablePeriods = function (date) {
            var periods;
            periods = _.chain(this.availablePeriods.models).filter(function (ap) {
                return ap.isNewerThan(date);
            }).sort(function (ap) {
                var ref;
                return ((ref = ap.get('validFrom')) != null ? ref.valueOf() : void 0) || 0;
            }).value();
            if (periods.some(function (ap) {
                return ap.get('validUntil');
            })) {
                return this._getClosestOldestHistoricalPeriods(date);
            } else {
                if (this.availablePeriods.models.some(function (ap) {
                    return ap.get('validUntil') && ap.get('validUntil').valueOf() <= date.valueOf();
                })) {
                    return [];
                } else {
                    return periods.filter(function (p) {
                        return p.get('weekDay') === date.getDay();
                    });
                }
            }
        };

        AvailabilityManager.prototype._getClosestOldestHistoricalPeriods = function (date) {
            var periods, validFrom;
            periods = this.availablePeriods.models.filter(function (ap) {
                return ap.get('validUntil') && ap.get('weekDay') === date.getDay() && ap.isNewerThan(date);
            });
            periods = periods.sort(function (a, b) {
                if (a.get('validFrom').valueOf() < b.get('validFrom').valueOf()) {
                    return -1;
                } else if (a.get('validFrom').valueOf() === b.get('validFrom').valueOf()) {
                    return 0;
                }
                return 1;
            });
            validFrom = null;
            return periods.filter(function (ap) {
                if (validFrom == null) {
                    validFrom = periods[0].get('validFrom');
                }
                return RG.Utils.DateComparator.equalsYMD(ap.get('validFrom'), validFrom);
            });
        };

        AvailabilityManager.prototype._somePeriodsForDate = function (date) {
            return this.availablePeriods.some(function (ap) {
                return ap.isCoveringDate(date);
            });
        };

        return AvailabilityManager;

    })();

}).call(this);
;
(function () {
    RG.Utils.CalendarPermissionsAdapter = (function () {
        function CalendarPermissionsAdapter(currentUserId, userPermissions) {
            this.currentUserId = currentUserId;
            this.userPermissions = userPermissions != null ? userPermissions : {};
        }

        CalendarPermissionsAdapter.prototype.canManage = function (booking) {
            var ref;
            return window.userPermissions.bookingRights === "manage_all" || (window.userPermissions.bookingRights === "manage_own" && ((ref = booking.getBooker()) != null ? ref.id : void 0) === window.currentUserId);
        };

        CalendarPermissionsAdapter.prototype.canAddDowntime = function () {
            return this.userPermissions.downtimeRights === "manage_all" || this.userPermissions.downtimeRights === "manage_own";
        };

        CalendarPermissionsAdapter.prototype.canDeleteClashBooking = function (bookings) {
            return this.canMoveClashBookingToWaitingList(bookings);
        };

        CalendarPermissionsAdapter.prototype.canManageDowntime = function (downtime) {
            var ref;
            return this.userPermissions.downtimeRights === "manage_all" || (this.userPermissions.downtimeRights === "manage_own" && ((ref = downtime.getBooker()) != null ? ref.id : void 0) === this.currentUserId);
        };

        CalendarPermissionsAdapter.prototype.canMoveClashBookingToWaitingList = function (bookings) {
            var mayChangeBookings;
            mayChangeBookings = _.map(bookings, (function (_this) {
                return function (booking) {
                    return _this.canManage(booking);
                };
            })(this));
            return !_.contains(mayChangeBookings, false) && this.canAddDowntime();
        };

        return CalendarPermissionsAdapter;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Utils.DashboardPermissionsAdapter = (function (superClass) {
        extend(DashboardPermissionsAdapter, superClass);

        function DashboardPermissionsAdapter() {
            return DashboardPermissionsAdapter.__super__.constructor.apply(this, arguments);
        }

        DashboardPermissionsAdapter.prototype.canAddDowntime = function () {
            return ['manage_all', 'manage_own', 'view'].indexOf(this.userPermissions.downtimeRights) !== -1;
        };

        DashboardPermissionsAdapter.prototype.canManageDowntime = function (downtime) {
            var ref;
            return this.userPermissions.downtimeRights === 'manage_all' || this.canAddDowntime() && ((ref = downtime.getBooker()) != null ? ref.id : void 0) === this.currentUserId;
        };

        DashboardPermissionsAdapter.prototype.canMoveClashBookingToWaitingList = function (bookings) {
            var mayChangeBookings;
            mayChangeBookings = _.map(bookings, (function (_this) {
                return function (booking) {
                    return _this.canManage(booking);
                };
            })(this));
            return !_.contains(mayChangeBookings, false) && this.canAddDowntime();
        };

        DashboardPermissionsAdapter.prototype.canDeleteClashBooking = function (bookings) {
            return this.canMoveClashBookingToWaitingList(bookings);
        };

        return DashboardPermissionsAdapter;

    })(RG.Utils.CalendarPermissionsAdapter);

}).call(this);
;
(function () {
    RG.Utils.DateComparator = {
        getDateParts: function (date) {
            return date && [date.getFullYear(), date.getMonth(), date.getDate()];
        },
        equalsYMD: function (date1, date2) {
            return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
        }
    };

    Date.prototype.cloneYMD = function () {
        return new Date(this.getFullYear(), this.getMonth(), this.getDate());
    };

}).call(this);
;
(function () {
    RG.Utils.DateFormatter = {
        months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        longMonths: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        getShortDate: function (date) {
            return (date.getDate()) + " " + RG.Utils.DateFormatter.months[date.getMonth()];
        },
        getShortDateWithYear: function (date) {
            return (date.getDate()) + " " + RG.Utils.DateFormatter.months[date.getMonth()] + " " + (date.getFullYear());
        },
        getLongDateWithYear: function (date) {
            return (date.getDate()) + " " + RG.Utils.DateFormatter.longMonths[date.getMonth()] + " " + (date.getFullYear());
        },
        getISODate: function (date) {
            var d, m, y, zeroPad;
            zeroPad = function (number) {
                var s;
                s = number.toString();
                if (s.length === 1) {
                    s = "0" + s;
                }
                return s;
            };
            y = date.getFullYear();
            m = zeroPad(date.getMonth() + 1);
            d = zeroPad(date.getDate());
            return y + "-" + m + "-" + d;
        }
    };

    Date.prototype.getISODate = function () {
        return RG.Utils.DateFormatter.getISODate(this);
    };

    Date.prototype.getWeek = function () {
        var dayNr, firstThursday, target;
        target = new Date(this.valueOf());
        dayNr = (this.getDay() + 6) % 7;
        target.setDate(target.getDate() - dayNr + 3);
        firstThursday = target.valueOf();
        target.setMonth(0, 1);
        if (target.getDay() !== 4) {
            target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
        }
        return 1 + Math.ceil((firstThursday - target) / 604800000);
    };

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Utils.DateRange = (function (superClass) {
        var months;

        extend(DateRange, superClass);

        months = RG.Utils.DateFormatter.months;

        function DateRange(startDate, endDate) {
            this.startDate = startDate;
            this.endDate = endDate;
        }

        DateRange.prototype.getStart = function () {
            return this.startDate;
        };

        DateRange.prototype.getEnd = function () {
            return this.endDate;
        };

        DateRange.prototype.getNumberOfDays = function () {
            return Math.round(((this.endDate.valueOf() - this.startDate.valueOf()) / 86400 / 1000) + 1);
        };

        DateRange.prototype.getDates = function () {
            var date, dates;
            date = new Date(this.startDate);
            dates = [];
            while (date.getTime() <= this.endDate.getTime()) {
                dates.push(new Date(date));
                date.setDate(date.getDate() + 1);
            }
            return dates;
        };

        DateRange.prototype.overlapsWith = function (other) {
            return this.getEnd() >= other.getStart() && this.getStart() <= other.getEnd();
        };

        DateRange.prototype.toString = function () {
            var firstMonthStr, firstYearStr, inSameMonth, inSameYear, secondMonthStr;
            if (RG.Utils.DateComparator.equalsYMD(this.startDate, this.endDate)) {
                return (this.startDate.getDate()) + " " + months[this.startDate.getMonth()] + " " + (this.endDate.getFullYear());
            } else {
                inSameMonth = this.startDate.getMonth() === this.endDate.getMonth();
                inSameYear = this.startDate.getFullYear() === this.endDate.getFullYear();
                firstMonthStr = !inSameMonth || !inSameYear ? months[this.startDate.getMonth()] + " " : "";
                firstYearStr = !inSameYear ? (this.startDate.getFullYear()) + " " : "";
                secondMonthStr = months[this.endDate.getMonth()];
                return (this.startDate.getDate()) + " " + firstMonthStr + firstYearStr + "- " + (this.endDate.getDate()) + " " + secondMonthStr + " " + (this.endDate.getFullYear());
            }
        };

        DateRange.prototype.getYears = function () {
            var endYear, i, results, startYear;
            startYear = this.startDate.getFullYear();
            endYear = this.endDate.getFullYear();
            return (function () {
                results = [];
                for (var i = startYear; startYear <= endYear ? i <= endYear : i >= endYear; startYear <= endYear ? i++ : i--) { results.push(i); }
                return results;
            }).apply(this);
        };

        DateRange.prototype.coversYear = function (year) {
            return _.include(this.getYears(), year);
        };

        DateRange.prototype.isValid = function () {
            return !!(this.startDate && this.endDate);
        };

        return DateRange;

    })(RG.Utils.Range);

}).call(this);
;
(function () {
    RG.Utils.DowntimeService = {
        createDowntime: function (downtime, params, callbacks) {
            return Q.Promise(function (resolve, reject, notify) {
                RG.Utils.BookingDataParser.expirePolls();
                return $.ajax((RG.getApiRoot()) + "/downtimes", {
                    method: "POST",
                    headers: {
                        "X-CSRF-Token": RG.Utils.getCSRFToken()
                    },
                    data: params,
                    dataType: 'json',
                    success: (function (_this) {
                        return function (data) {
                            RG.Utils.BookingDataParser.expirePolls();
                            downtime.set({
                                id: data.id
                            });
                            callbacks.successCallback(downtime);
                            return resolve("Downtime " + downtime.id + " created.");
                        };
                    })(this),
                    error: (function (_this) {
                        return function (xhr) {
                            var e, responseData;
                            responseData = null;
                            try {
                                responseData = JSON.parse(xhr.responseText);
                                RG.Utils.BookingDataParser.expirePolls();
                                callbacks.errorCallback(responseData);
                                return reject("Downtime not created.");
                            } catch (error) {
                                e = error;
                                return callbacks.saveErrorCallback(e, xhr);
                            }
                        };
                    })(this)
                });
            });
        },
        updateDowntime: function (id, params, callbacks) {
            params['_method'] = 'patch';
            return Q.Promise(function (resolve, reject, notify) {
                RG.Utils.BookingDataParser.expirePolls();
                return $.ajax((RG.getApiRoot()) + "/downtimes/" + id, {
                    method: "POST",
                    headers: {
                        "X-CSRF-Token": RG.Utils.getCSRFToken()
                    },
                    data: params,
                    dataType: 'json',
                    success: (function (_this) {
                        return function (data) {
                            RG.Utils.BookingDataParser.expirePolls();
                            callbacks.successCallback(data);
                            return resolve("Downtime " + id + " updated.");
                        };
                    })(this),
                    error: (function (_this) {
                        return function (xhr) {
                            var e, responseData;
                            responseData = null;
                            try {
                                responseData = JSON.parse(xhr.responseText);
                                RG.Utils.BookingDataParser.expirePolls();
                                callbacks.errorCallback(responseData);
                                return reject("Downtime " + id + " not updated.");
                            } catch (error) {
                                e = error;
                                return callbacks.saveErrorCallback(e, xhr);
                            }
                        };
                    })(this)
                });
            });
        },
        deleteSingleDate: function (downtime, date, callback) {
            var createRightDowntime, leftDowntime, leftDowntimeFromDate, leftDowntimeParams, leftDowntimeToDate, notStartOrEnd, options, rightDowntime, rightDowntimeFromDate, rightParams;
            if (RG.Utils.DateComparator.equalsYMD(date, downtime.get('from'))) {
                leftDowntimeFromDate = moment(date).add(1, 'days')._d;
                leftDowntimeToDate = downtime.get('to');
            } else if (RG.Utils.DateComparator.equalsYMD(date, downtime.get('to'))) {
                leftDowntimeFromDate = downtime.get('from');
                leftDowntimeToDate = moment(date).subtract(1, 'days')._d;
            } else {
                leftDowntimeFromDate = downtime.get('from');
                leftDowntimeToDate = moment(date).subtract(1, 'days')._d;
            }
            leftDowntimeParams = this._buildDowntimeParams(downtime, leftDowntimeFromDate, leftDowntimeToDate);
            leftDowntime = new RG.Models.Downtime(downtime.attributes);
            leftDowntime.set({
                from: leftDowntimeFromDate,
                to: leftDowntimeToDate,
                timeZone: downtime.get('timeZone')
            });
            notStartOrEnd = !RG.Utils.DateComparator.equalsYMD(date, downtime.get('from')) && !RG.Utils.DateComparator.equalsYMD(date, downtime.get('to'));
            if (notStartOrEnd) {
                rightDowntimeFromDate = moment(date).add(1, 'days')._d;
                rightDowntime = new RG.Models.Downtime(_.extend(_.clone(downtime.attributes), {
                    downtimeType: downtime.downtimeType,
                    id: null,
                    timeZone: downtime.getTimeZone(),
                    from: rightDowntimeFromDate,
                    to: downtime.get('to')
                }));
                rightParams = _.extend(_.clone(leftDowntimeParams), {
                    id: null,
                    from: RG.Utils.DateFormatter.getISODate(rightDowntimeFromDate),
                    to: downtime.get('to')
                });
            }
            options = this._buildOptions(downtime, leftDowntime, rightDowntime);
            createRightDowntime = (function (_this) {
                return function () {
                    if (notStartOrEnd) {
                        return RG.Utils.DowntimeService.createDowntime(rightDowntime, rightParams, options);
                    } else {
                        return Q.delay(0);
                    }
                };
            })(this);
            return RG.Utils.DowntimeService.updateDowntime(downtime.id, leftDowntimeParams, options).then(callback).then(createRightDowntime).then(window.update);
        },
        deleteDowntime: function (id, callback) {
            return Q.Promise(function (resolve, reject, notify) {
                return $.ajax((RG.getApiRoot()) + "/downtimes/" + id, {
                    method: 'DELETE',
                    timeout: 30000,
                    headers: {
                        "X-CSRF-Token": RG.Utils.getCSRFToken()
                    },
                    success: (function (_this) {
                        return function () {
                            if (typeof callback === "function") {
                                callback();
                            }
                            window.update();
                            return resolve("Downtime " + id + " deleted.");
                        };
                    })(this)
                });
            });
        },
        split: function (downtime, date, callback) {
            var leftDowntime, leftDowntimeParams, options, rightDowntime, rightParams, timezone, toDate;
            timezone = null;
            toDate = moment(date).subtract(1, 'days')._d;
            leftDowntimeParams = this._buildDowntimeParams(downtime, downtime.get('from'), toDate);
            leftDowntimeParams.end_time = 1440;
            leftDowntime = new RG.Models.Downtime(leftDowntimeParams);
            leftDowntime.set({
                from: downtime.get('from'),
                to: toDate,
                endTime: 1440
            });
            rightDowntime = new RG.Models.Downtime(_.extend(_.clone(downtime.attributes), {
                downtimeType: downtime.downtimeType,
                id: null,
                timeZone: downtime.get('timeZone'),
                from: date,
                to: downtime.get('to'),
                startTime: 0
            }));
            rightParams = _.extend(_.clone(leftDowntimeParams), {
                id: null,
                from: RG.Utils.DateFormatter.getISODate(date),
                to: RG.Utils.DateFormatter.getISODate(downtime.get('to')),
                start_time: 0
            });
            options = this._buildOptions(downtime, leftDowntime, rightDowntime);
            return RG.Utils.DowntimeService.updateDowntime(downtime.id, leftDowntimeParams, options).then(function () {
                return RG.Utils.DowntimeService.createDowntime(rightDowntime, rightParams, options);
            }).then(callback);
        },
        updateResources: (function (_this) {
            return function (downtime, leftDowntime, rightDowntime) {
                var affectedResources, i, len, resource, results, updatedDowntime;
                window.downtimes.add(rightDowntime);
                updatedDowntime = window.downtimes.findWhere({
                    id: downtime.id
                });
                updatedDowntime.set(leftDowntime.attributes);
                affectedResources = window.resources.select(function (resource) {
                    return _.include(downtime.get('resourceIds'), resource.id);
                });
                results = [];
                for (i = 0, len = affectedResources.length; i < len; i++) {
                    resource = affectedResources[i];
                    results.push(resource.refreshDowntimes());
                }
                return results;
            };
        })(this),
        _buildDowntimeParams: function (downtime, from, to) {
            var downtimeTimeZone, params;
            params = {
                resource_ids: downtime.get('resourceIds'),
                creator_id: window.currentUserId,
                from: RG.Utils.DateFormatter.getISODate(from),
                to: RG.Utils.DateFormatter.getISODate(to),
                start_time: downtime.get('startTime'),
                end_time: downtime.get('endTime'),
                details: downtime.get('details'),
                leave: downtime.get('leave'),
                downtime_type_id: downtime.get('downtimeTypeId')
            };
            downtimeTimeZone = downtime.getTimeZoneName();
            if (!downtime.isLocalTimeZone() && window.currentUserTimeZone !== downtimeTimeZone) {
                params.timezone = downtimeTimeZone;
            }
            return params;
        },
        _buildOptions: function (downtime, leftDowntime, rightDowntime) {
            return {
                successCallback: function () {
                    return RG.Utils.DowntimeService.updateResources(downtime, leftDowntime, rightDowntime);
                },
                errorCallback: function () { }
            };
        }
    };

}).call(this);
;
(function () {
    RG.Utils.isDifferentTimeZones = function (downtimeResources, currentUserTimeZone) {
        var flag;
        if (downtimeResources.length === 1) {
            return false;
        }
        flag = false;
        flag = _.any(downtimeResources, function (resource) {
            return resource.getTimeZoneName() !== currentUserTimeZone;
        });
        return flag;
    };

}).call(this);
;
(function () {
    RG.Utils.getDowntimeTypePriority = function (name) {
        var base;
        if ((base = RG.Variables).downtimeTypes == null) {
            base.downtimeTypes = _.values(RG.Variables.DowntimeType);
        }
        return _.indexOf(RG.Variables.downtimeTypes, name);
    };

}).call(this);
;
(function () {
    RG.Utils.select2Close = function (element, flag) {
        if ($('.filters.active.open').length || flag) {
            return window.requestAnimationFrame(function () {
                var select2Inputs;
                if (element) {
                    element.addClass('select2-active-filter-option');
                }
                select2Inputs = $("select.filter-option:not(.select2-active-filter-option)");
                if (select2Inputs.length) {
                    select2Inputs.select2('enable', false).select2('enable', true);
                }
                if (element) {
                    return element.removeClass('select2-active-filter-option');
                }
            });
        }
    };

    RG.Utils.getCSRFToken = function () {
        return $('meta[name="csrf-token"]').attr('content');
    };

}).call(this);
;
(function () {
    RG.Utils.PopoverManager = (function () {
        function PopoverManager() {
            this._nestedPopovers = [];
            this._rendererLocks = [];
        }

        PopoverManager.prototype.lock = function () {
            return this.locked = true;
        };

        PopoverManager.prototype.unlock = function () {
            this.clear();
            return this.locked = false;
        };

        PopoverManager.prototype.set = function (popoverView, removeCallback) {
            var ref;
            if (removeCallback == null) {
                removeCallback = null;
            }
            if (this.locked) {
                return;
            }
            RG.Utils.enableScrolling(false);
            if ((ref = this.popover) != null) {
                ref.remove();
            }
            this.removeCallback = removeCallback;
            this.toggle(popoverView, removeCallback);
            return this.popover;
        };

        PopoverManager.prototype._lockRenderer = function () {
            var lock;
            lock = new RG.Renderer.GlobalLock;
            this._rendererLocks.push(lock);
            return RG.renderer.lock(lock);
        };

        PopoverManager.prototype._unlockRenderer = function () {
            var i, len, lock, ref;
            ref = this._rendererLocks;
            for (i = 0, len = ref.length; i < len; i++) {
                lock = ref[i];
                RG.renderer.unlock(lock);
            }
            this._rendererLocks = [];
        };

        PopoverManager.prototype.nest = function (popover) {
            return this._nestedPopovers.push(popover);
        };

        PopoverManager.prototype.clearNest = function () {
            var i, len, p, ref;
            ref = this._nestedPopovers;
            for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                p.remove();
            }
            return this._nestedPopovers = [];
        };

        PopoverManager.prototype.setBody = function (bodyView) {
            this.popover.setBodyView(bodyView);
            return this.popover.render();
        };

        PopoverManager.prototype.clear = function () {
            var ref;
            if (this.locked) {
                return;
            }
            if ((ref = this.popover) != null) {
                ref.remove();
            }
            if (typeof this.removeCallback === "function") {
                this.removeCallback();
            }
            this.popover = null;
            this.removeCallback = null;
            this._unlockRenderer();
            return RG.Utils.enableScrolling(true);
        };

        PopoverManager.prototype.done = function () {
            this.popoverActive = false;
            this.removeCallback = null;
            return this.clear();
        };

        PopoverManager.prototype.replace = function (options) {
            if (options == null) {
                options = {};
            }
            if (this.locked) {
                return;
            }
            this.clear();
            this.popoverActive = false;
            if (options.popoverView) {
                return this.set(options.popoverView, options.removeCallback);
            }
        };

        PopoverManager.prototype.toggle = function (popoverView, removeCallback) {
            if (this.popoverActive || this.locked) {
                this.popoverActive = false;
                if (typeof removeCallback === "function") {
                    removeCallback();
                }
                this.removeCallback = null;
                this.clear();
                return;
            }
            this.popoverActive = true;
            this.popover = popoverView;
            this.popover.popup();
            return this._lockRenderer();
        };

        PopoverManager.prototype.popoverVisible = function () {
            var popoverElement;
            if (!this.popover) {
                return false;
            }
            popoverElement = $(this.popover.el);
            return popoverElement.length > 0 && popoverElement.parent().length > 0;
        };

        return PopoverManager;

    })();

}).call(this);
;
(function () {
    this.segmentAutolinker = function (string) {
        return Autolinker.link(_.escape(string).replace('!', '&excl;').replace(/\n/g, "<br />"));
    };

}).call(this);
;
(function () {
    RG.Utils.spinnerOptions = {
        lines: 9,
        length: 10,
        width: 5,
        radius: 15,
        corners: 1,
        rotate: 0,
        speed: 1,
        shadow: false,
        hwaccel: false,
        left: '50%',
        bottom: '-50%'
    };

}).call(this);
;
(function () {
    RG.Utils.spinnerOverlay = function (element) {
        var overlay;
        overlay = new RG.Views.Dialogs.Overlay({
            attachTo: element,
            className: "overlay",
            template: function () {
                return '';
            }
        });
        new Spinner(RG.Utils.spinnerOptions).spin(overlay.render().el);
        return overlay;
    };

}).call(this);
;
(function () {
    RG.Utils.TimeFormatter = {
        formatFixedTime: function (minuteOfDay) {
            var hour, minute, minuteStr, noonFlag;
            hour = Math.floor(minuteOfDay / 60);
            noonFlag = Math.floor(hour / 12) % 2 === 0 ? "am" : "pm";
            minute = minuteOfDay % 60;
            minuteStr = minute.toString();
            if (minuteStr.length === 1) {
                minuteStr = "0" + minuteStr;
            }
            if (hour > 12) {
                hour = hour % 12;
            }
            if (hour === 0) {
                hour = 12;
            }
            if (minuteStr === "00") {
                return "" + hour + noonFlag;
            } else {
                return hour + "." + minuteStr + noonFlag;
            }
        },
        formatMinutes: function (time) {
            var hours, minutes, minutesStr, showHours, showMinutes;
            hours = Math.floor(time / 60);
            minutes = time % 60;
            showHours = (hours === 0 && minutes === 0) || hours > 0;
            showMinutes = minutes > 0;
            time = "";
            if (showHours) {
                time = time + (hours + "h ");
            }
            if (showMinutes) {
                minutesStr = minutes + "m";
                if (minutesStr.length === 2) {
                    minutesStr = "0" + minutesStr;
                }
                time = time + minutesStr;
            }
            return time.trim();
        },
        formatMinutesOffset: function (time) {
            var hours, isNegative, minutes, minutesStr;
            isNegative = time < 0;
            hours = Math.floor(Math.abs(time) / 60);
            minutes = Math.abs(time) % 60;
            time = hours.toString();
            minutesStr = minutes.toString();
            if (minutes > 0) {
                minutesStr = minutes.toString();
                if (minutesStr.length === 1) {
                    minutesStr = "0" + minutesStr;
                }
                time = time + ":" + minutesStr;
            }
            time = isNegative ? "-" + time : "+" + time;
            return time;
        }
    };

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty,
        slice = [].slice;

    RG.Utils.TimeRange = (function (superClass) {
        extend(TimeRange, superClass);

        function TimeRange(startTime, endTime) {
            this.startTime = startTime;
            this.endTime = endTime;
        }

        TimeRange.prototype.getStart = function () {
            return this.startTime;
        };

        TimeRange.prototype.getEnd = function () {
            return this.endTime;
        };

        TimeRange.prototype.merge = function () {
            var currentRange, newRanges, ranges;
            ranges = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            ranges.push(this);
            ranges = _.sortBy(ranges, 'endTime');
            ranges = _.sortBy(ranges, 'startTime');
            newRanges = [];
            currentRange = ranges.shift();
            while (ranges.length) {
                if (ranges[0] && currentRange.isTouching(ranges[0])) {
                    if (currentRange.endTime < ranges[0].endTime) {
                        currentRange.endTime = ranges[0].endTime;
                    }
                    ranges.shift();
                } else {
                    newRanges.push(currentRange);
                    currentRange = ranges.shift();
                }
            }
            newRanges.push(currentRange);
            return newRanges;
        };

        TimeRange.prototype.isEqual = function (other) {
            return this.endTime === other.endTime && this.startTime === other.startTime;
        };

        TimeRange.prototype.subtract = function (other) {
            var ranges;
            if (!this.overlapsWith(other)) {
                return this.totalTime();
            }
            if (this.contains(other)) {
                return this.totalTime() - other.totalTime();
            } else if (other.contains(this)) {
                return 0;
            } else if (this.overlapsWith(other)) {
                ranges = this.subtractOne(other);
                return ranges.reduce((function (acc, val) {
                    return acc + val.totalTime();
                }), 0);
            }
        };

        TimeRange.prototype.subtractOne = function (subtracted) {
            if (subtracted.startTime <= this.startTime && subtracted.endTime >= this.endTime) {
                return [];
            }
            if (subtracted.endTime <= this.startTime || subtracted.startTime >= this.endTime) {
                return [this];
            }
            if (subtracted.startTime > this.startTime && subtracted.endTime < this.endTime) {
                return [new RG.Utils.TimeRange(this.startTime, subtracted.startTime), new RG.Utils.TimeRange(subtracted.endTime, this.endTime)];
            }
            if (subtracted.startTime <= this.startTime && subtracted.endTime < this.endTime) {
                return [new RG.Utils.TimeRange(subtracted.endTime, this.endTime)];
            }
            if (subtracted.startTime > this.startTime && subtracted.endTime >= this.endTime) {
                return [new RG.Utils.TimeRange(this.startTime, subtracted.startTime)];
            }
            throw "Invalid subtraction";
        };

        TimeRange.prototype.totalTime = function () {
            return (this.endTime - this.startTime) | 0;
        };

        TimeRange.prototype.overlapsOneOClock = function () {
            return this.startTime < 780 && this.endTime > 780;
        };

        TimeRange.prototype.getAllowancePerDay = function () {
            if (this.overlapsOneOClock()) {
                return 1;
            } else {
                return 0.5;
            }
        };

        TimeRange.prototype.toString = function () {
            if (this.totalTime() === 1440) {
                return 'All day';
            }
            return (this._startMinutesToTime()) + " - " + (this._endMinutesToTime());
        };

        TimeRange.prototype._startMinutesToTime = function () {
            return RG.Utils.TimeFormatter.formatFixedTime(this.startTime);
        };

        TimeRange.prototype._endMinutesToTime = function () {
            return RG.Utils.TimeFormatter.formatFixedTime(this.endTime);
        };

        TimeRange.prototype.subtractAll = function (timeRanges) {
            var i, j, len, len1, newRanges, ranges, ref, splitRange, timeRange;
            ranges = [this];
            for (i = 0, len = timeRanges.length; i < len; i++) {
                timeRange = timeRanges[i];
                newRanges = [];
                for (j = 0, len1 = ranges.length; j < len1; j++) {
                    splitRange = ranges[j];
                    if (splitRange.overlapsWith(timeRange)) {
                        newRanges.push(splitRange.subtractOne(timeRange));
                    } else {
                        newRanges.push(splitRange);
                    }
                }
                ranges = (ref = []).concat.apply(ref, newRanges);
            }
            return ranges.reduce((function (acc, tr) {
                return acc + tr.totalTime();
            }), 0);
        };

        return TimeRange;

    })(RG.Utils.Range);

    RG.Utils.TimeRange.sum = function (ranges) {
        return ranges.reduce((function (acc, range) {
            return acc + range.totalTime();
        }), 0);
    };

}).call(this);
;
(function () {
    RG.Utils.UnitDurationConverter = (function () {
        function UnitDurationConverter(unitType) {
            this.unitType = unitType;
        }

        UnitDurationConverter.prototype.convertArray = function (durations, startDate, endDate) {
            var currentUnit, duration, durationsInUnit, earliest, latest, unit, unitDuration, unitDurations;
            if (durations.length === 0) {
                return [];
            }
            if (durations.length === 1 && RG.Utils.DateComparator.equalsYMD(startDate, endDate)) {
                duration = durations[0];
                unit = new this.unitType(duration.attributes.date);
                unitDuration = new RG.Models.UnitDuration;
                unitDuration.attributes = {
                    minutes: duration.getMinutes(),
                    minutesPerLine: unit.getMinutesPerUtilisationLine(),
                    date: unit.date,
                    waiting: duration.isWaiting() || false
                };
                return [unitDuration];
            }
            earliest = startDate || durations[0].attributes.date;
            latest = endDate || durations[durations.length - 1].attributes.date;
            unitDurations = [];
            currentUnit = new this.unitType(earliest);
            while (1) {
                durationsInUnit = this._getDurationsInUnit(durations, currentUnit);
                duration = new RG.Models.UnitDuration;
                duration.attributes = {
                    minutes: this.getMinutesInDurations(durationsInUnit),
                    minutesPerLine: currentUnit.getMinutesPerUtilisationLine(),
                    date: currentUnit.date,
                    waiting: durationsInUnit.some(function (d) {
                        return d.isWaiting();
                    })
                };
                unitDurations.push(duration);
                currentUnit = currentUnit.nextUnit();
                if (currentUnit.date > latest) {
                    break;
                }
            }
            return unitDurations;
        };

        UnitDurationConverter.prototype.convert = function (durations, startDate, endDate) {
            var collection, newDurations;
            if (durations.length === 0) {
                return new RG.Collections.UnitDurations;
            }
            newDurations = this.convertArray(durations, startDate, endDate);
            collection = new RG.Collections.UnitDurations;
            collection.models = newDurations;
            collection.models.forEach(function (d) {
                return d.collection = collection;
            });
            collection.length = newDurations.length;
            return collection;
        };

        UnitDurationConverter.prototype.getDurationMinutesInUnit = function (durations, unit) {
            var durationsInUnit;
            durationsInUnit = this._getDurationsInUnit(durations, unit);
            return this.getMinutesInDurations(durationsInUnit);
        };

        UnitDurationConverter.prototype.getMinutesInDurations = function (durations) {
            var d, i, len, minutes;
            minutes = 0;
            for (i = 0, len = durations.length; i < len; i++) {
                d = durations[i];
                minutes = minutes + d.getMinutes();
            }
            return minutes;
        };

        UnitDurationConverter.prototype._getDurationsInUnit = function (durations, unit) {
            var d, durationsInUnit, i, len;
            durationsInUnit = [];
            for (i = 0, len = durations.length; i < len; i++) {
                d = durations[i];
                if (unit.containsDate(d.attributes.date)) {
                    durationsInUnit.push(d);
                }
            }
            return durationsInUnit;
        };

        return UnitDurationConverter;

    })();

}).call(this);
;
(function () {
    Array.prototype.max = function () {
        return Math.max.apply(null, this);
    };

    Array.prototype.min = function () {
        return Math.min.apply(null, this);
    };

}).call(this);
;
(function () {
    var delegateEventSplitter, viewKeys,
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    delegateEventSplitter = /^(\S+)\s*(.*)$/;

    viewKeys = ['model', 'collection', 'el', 'id', 'className', 'tagName', 'events'];

    RG.Views.BaseView = (function (superClass) {
        extend(BaseView, superClass);

        function BaseView(options) {
            var i, key, len, value;
            options = options || {};
            this.cid = _.uniqueId('view');
            for (i = 0, len = viewKeys.length; i < len; i++) {
                key = viewKeys[i];
                value = options[key];
                if (value) {
                    this[key] = value;
                }
            }
            this._ensureElement();
            this.initialize.apply(this, arguments);
        }

        BaseView.prototype.delegateEvents = function (events) {
            var key, match, method;
            events || (events = this.events);
            if (!events) {
                return this;
            }
            this.undelegateEvents();
            for (key in events) {
                method = events[key];
                method = this[method];
                if (!method) {
                    continue;
                }
                match = key.match(delegateEventSplitter);
                this.delegate(match[1], match[2], method.bind(this));
            }
            return this;
        };

        BaseView.prototype._removeElement = function () {
            if (this.el.parentNode) {
                return this.el.parentNode.removeChild(this.el);
            }
        };

        BaseView.prototype.remove = function () {
            this.off();
            return BaseView.__super__.remove.apply(this, arguments);
        };

        BaseView.prototype.shrinkDropdown = function (event) {
            var chznBottomOffset, chznResults;
            chznResults = $(event.currentTarget.parentElement).find(".chzn-drop");
            chznBottomOffset = parseInt(chznResults != null ? chznResults.css("height") : void 0) + (chznResults != null ? chznResults.offset().top : void 0) - $(window).scrollTop();
            if (this._dropdownOutOfViewport(chznBottomOffset)) {
                return this._shrinkDropdownAndScrollToSelected(event);
            }
        };

        BaseView.prototype._dropdownOutOfViewport = function (bottomOffset) {
            return (bottomOffset - $(window).height()) > 0;
        };

        BaseView.prototype._shrinkDropdownAndScrollToSelected = function (el) {
            var chznResults, height, jWindow, selectedResult;
            chznResults = $(el.currentTarget.parentElement).find(".chzn-results");
            jWindow = $(window);
            height = (jWindow.height() + jWindow.scrollTop()) - chznResults.offset().top - 8;
            chznResults.css("height", _.min([parseInt(chznResults.css("height")), height]));
            selectedResult = chznResults.find(".result-selected");
            if (selectedResult.length > 0) {
                return chznResults.scrollTo(selectedResult, {
                    duration: 80
                });
            }
        };

        return BaseView;

    })(Backbone.View);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Support.CollectionView = (function (superClass) {
        extend(CollectionView, superClass);

        function CollectionView() {
            CollectionView.__super__.constructor.apply(this, arguments);
            if (this.collection === null) {
                throw "No collection given to CollectionView.";
            }
            this.listenTo(this.collection, 'add', this.addItem);
            this.listenTo(this.collection, 'remove', this.removeItem);
            this.listenTo(this.collection, 'reset', this.render);
            this.collectionViews = {};
        }

        CollectionView.prototype.forEach = function (fn) {
            var _, ref, view;
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                fn(view);
            }
        };

        CollectionView.prototype.addItem = function (model) {
            var view;
            view = this.createItemView({
                model: model
            });
            this.collectionViews[model.cid] = view;
            this._insertView(view, model);
            return view;
        };

        CollectionView.prototype._insertView = function (view, model) {
            var element;
            element = view.render().el;
            if (model === this.collection.models[0]) {
                return this.el.insertBefore(element, this.el.firstChild);
            } else {
                return this.el.appendChild(element);
            }
        };

        CollectionView.prototype.removeItem = function (model) {
            return this._removeViewByModelCid(model.cid);
        };

        CollectionView.prototype._postAnimate = function (element) { };

        CollectionView.prototype._preAnimate = function (element) { };

        CollectionView.prototype._removeViewByModelCid = function (cid) {
            this._removeView(this.collectionViews[cid]);
            return delete this.collectionViews[cid];
        };

        CollectionView.prototype._removeView = function (view) {
            view.remove();
            return typeof view.close === "function" ? view.close() : void 0;
        };

        CollectionView.prototype.remove = function () {
            var cid, ref, view;
            ref = this.collectionViews;
            for (cid in ref) {
                view = ref[cid];
                view.remove();
            }
            return CollectionView.__super__.remove.apply(this, arguments);
        };

        CollectionView.prototype.close = function () {
            var child, item, results;
            for (item in this.collectionViews) {
                this._removeViewByModelCid(item);
            }
            results = [];
            while ((child = this.el.firstChild)) {
                results.push(this.el.removeChild(child));
            }
            return results;
        };

        CollectionView.prototype.createItemView = function (options) {
            return new this.itemView({
                model: options.model
            });
        };

        CollectionView.prototype.render = function () {
            this._render();
            return this;
        };

        CollectionView.prototype._render = function () {
            var i, len, model, ref;
            this.close();
            ref = this.collection.models;
            for (i = 0, len = ref.length; i < len; i++) {
                model = ref[i];
                this.addItem(model);
            }
            return this;
        };

        return CollectionView;

    })(RG.Views.BaseView);

    RG.Support.ArrayView = (function (superClass) {
        extend(ArrayView, superClass);

        function ArrayView() {
            ArrayView.__super__.constructor.apply(this, arguments);
            this.collectionViews = {};
        }

        ArrayView.prototype.addItem = function (model) {
            var view;
            view = this.createItemView({
                model: model
            });
            this.collectionViews[model.cid] = view;
            this._insertView(view, model);
            return view;
        };

        ArrayView.prototype._insertView = function (view, model) {
            return this.el.appendChild(view.render().el);
        };

        ArrayView.prototype.removeItem = function (model) {
            return this._removeViewByModelCid(model.cid);
        };

        ArrayView.prototype._removeViewByModelCid = function (cid) {
            this._removeView(this.collectionViews[cid]);
            return delete this.collectionViews[cid];
        };

        ArrayView.prototype._removeView = function (view) {
            return view.remove();
        };

        ArrayView.prototype.remove = function () {
            var cid, ref, view;
            ref = this.collectionViews;
            for (cid in ref) {
                view = ref[cid];
                view.remove();
            }
            return ArrayView.__super__.remove.apply(this, arguments);
        };

        ArrayView.prototype.close = function () {
            var child, item, results;
            for (item in this.collectionViews) {
                this._removeViewByModelCid(item);
            }
            results = [];
            while ((child = this.el.firstChild)) {
                results.push(this.el.removeChild(child));
            }
            return results;
        };

        ArrayView.prototype.createItemView = function (options) {
            return new this.itemView({
                model: options.model
            });
        };

        ArrayView.prototype.render = function () {
            this._render();
            return this;
        };

        ArrayView.prototype._render = function () {
            var i, len, model, ref;
            this.close();
            ref = this.collection;
            for (i = 0, len = ref.length; i < len; i++) {
                model = ref[i];
                this.addItem(model);
            }
            return this;
        };

        return ArrayView;

    })(RG.Views.BaseView);

    RG.Support.SortedCollectionView = (function (superClass) {
        extend(SortedCollectionView, superClass);

        function SortedCollectionView() {
            return SortedCollectionView.__super__.constructor.apply(this, arguments);
        }

        SortedCollectionView.prototype._insertView = function (view, model) {
            var currentModelIndex, element, prevModel, prevView;
            element = view.render().el;
            this._preAnimate(element);
            if (model === this.collection.first()) {
                this.el.insertBefore(element, this.el.firstChild);
            } else if (model === this.collection.last()) {
                this.el.appendChild(element);
            } else {
                currentModelIndex = this.collection.indexOf(model);
                prevModel = this.collection.models[currentModelIndex - 1];
                prevView = this.collectionViews[prevModel.cid];
                if (prevView) {
                    this.el.insertBefore(element, prevView.el.nextElementSibling);
                } else {
                    this.el.appendChild(element);
                }
            }
            this._postAnimate(element);
            return element;
        };

        return SortedCollectionView;

    })(RG.Support.CollectionView);

    RG.Support.CachedCollectionView = (function (superClass) {
        extend(CachedCollectionView, superClass);

        function CachedCollectionView() {
            return CachedCollectionView.__super__.constructor.apply(this, arguments);
        }

        CachedCollectionView.prototype.addItem = function (model) {
            var view;
            if (view = this.collectionViews[model.cid]) {
                this.el.appendChild(view.el);
                return view.el.style.display = "";
            } else {
                return CachedCollectionView.__super__.addItem.apply(this, arguments);
            }
        };

        CachedCollectionView.prototype.clearInvisibleViews = function () {
            var cid, ref, view;
            ref = this.collectionViews;
            for (cid in ref) {
                view = ref[cid];
                if (!(view.el.style.display === "none")) {
                    continue;
                }
                view.remove();
                delete this.collectionViews[cid];
            }
        };

        CachedCollectionView.prototype.close = function () {
            var item, results;
            results = [];
            for (item in this.collectionViews) {
                results.push(this._removeViewByModelCid(item));
            }
            return results;
        };

        CachedCollectionView.prototype._removeViewByModelCid = function (cid) {
            return this._removeView(this.collectionViews[cid]);
        };

        CachedCollectionView.prototype._removeView = function (view) {
            return view.el.style.display = "none";
        };

        return CachedCollectionView;

    })(RG.Support.SortedCollectionView);

}).call(this);
;
(function () {
    RG.Support.ValidTags = (function () {
        function ValidTags() { }

        ValidTags.prototype.valid_html_tags = function () {
            return ["!--", "!DOCTYPE", "a", "abbr", "acronym", "address", "applet", "area", "article", "aside", "audio", "b", "base", "basefont", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "font", "footer", "form", "frame", "frameset", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"];
        };

        return ValidTags;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Base = (function (superClass) {
        extend(Base, superClass);

        function Base(attributes, options) {
            this.cid = _.uniqueId(this.cidPrefix);
            this.attributes = {};
            if (options) {
                this.collection = options.collection;
            }
            this.set(attributes || {});
            this.changed = {};
            this.initialize.apply(this, arguments);
        }

        return Base;

    })(Backbone.Model);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty,
        indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

    RG.Models.ResourceInstance = (function (superClass) {
        extend(ResourceInstance, superClass);

        function ResourceInstance() {
            this.refreshDowntimes = bind(this.refreshDowntimes, this);
            return ResourceInstance.__super__.constructor.apply(this, arguments);
        }

        ResourceInstance.prototype.initialize = function (options) {
            this.account = options != null ? options.account : void 0;
            this.bookings = new RG.Collections.Bookings;
            this.bookings.resource = this;
            this.availablePeriods = new RG.Collections.AvailablePeriods;
            this.availablePeriods.resource = this;
            this.customAvailablePeriods = new RG.Collections.CustomAvailablePeriods;
            this.customAvailablePeriods.resource = this;
            this.overtimes = new RG.Collections.Overtimes;
            this.overtimes.resource = this;
            this.downtimes = new RG.Collections.Downtimes;
            this.downtimes.resource = this;
            window.downtimes.on("add:resource_id:" + this.id, (function (_this) {
                return function (d) {
                    return _this.downtimes.push(d.cloneWithBinding());
                };
            })(this));
            window.downtimes.on("remove:resource_id:" + this.id, (function (_this) {
                return function (d) {
                    var removedDowntime;
                    removedDowntime = _this.downtimes.findWhere({
                        id: d.id
                    });
                    return _this.downtimes.remove(removedDowntime);
                };
            })(this));
            this.downtimes.on("change", function (d) {
                var original;
                original = window.downtimes.findWhere({
                    id: d.id
                });
                return original.set(d.attributes);
            });
            this.availability = new RG.Factories.AvailabilityManager(this).create();
            this.customFieldOptions = new RG.Collections.CustomFieldOptions;
            this.customFieldOptions.resource = this;
            this.visible = this.get('bookable');
            return ResourceInstance.__super__.initialize.apply(this, arguments);
        };

        ResourceInstance.prototype.isAvailableIn = function (dateRange, timeRange) {
            if (timeRange == null) {
                timeRange = new RG.Utils.TimeRange(0, 1440);
            }
            return this.availability.isAvailableIn(dateRange, timeRange);
        };

        ResourceInstance.prototype.getFirstName = function () {
            var spacePos;
            if (this.get("human")) {
                spacePos = this.get('name').indexOf(' ');
                if (spacePos >= 0) {
                    return this.escape('name').substr(0, spacePos);
                } else {
                    return this.escape('name');
                }
            } else {
                return this.getName();
            }
        };

        ResourceInstance.prototype.getImage = function () {
            return this.get('imageUrl');
        };

        ResourceInstance.prototype.hasAvatar = function () {
            return true;
        };

        ResourceInstance.prototype.getName = function () {
            return this.escape('name');
        };

        ResourceInstance.prototype.getTimeZoneName = function () {
            return this.getTimeZone().getName();
        };

        ResourceInstance.prototype.getInitials = function () {
            var initials, names;
            names = this.get('name').split(" ");
            initials = names[0][0].toUpperCase();
            if (names.length !== 1 && names[names.length - 1][0]) {
                initials += names[names.length - 1][0].toUpperCase();
            }
            return initials;
        };

        ResourceInstance.prototype.getTimeZone = function () {
            return this.get('timeZone') || new RG.Models.TimeZone({
                name: "UTC",
                offset: 0
            });
        };

        ResourceInstance.prototype.getDisplayTimeZone = function () {
            return this.get('displayTimeZone') || new RG.Models.TimeZone({
                name: "UTC",
                offset: 0
            });
        };

        ResourceInstance.prototype.shouldDisplayTimeZone = function () {
            return this.getTimeZoneName() !== window.currentUserTimeZone;
        };

        ResourceInstance.prototype.hasCustomFieldOption = function (option) {
            return this.customFieldOptions.contains(option);
        };

        ResourceInstance.prototype.isBookable = function () {
            return typeof this.get("bookable") === "undefined" || this.get("bookable");
        };

        ResourceInstance.prototype.isBookedOnClient = function (client) {
            return _.contains(this.get('bookedClients'), client);
        };

        ResourceInstance.prototype.isBookedOnProject = function (project) {
            return _.contains(this.get('bookedProjects'), project);
        };

        ResourceInstance.prototype.isHuman = function () {
            return typeof this.get("human") !== "undefined" && this.get("human");
        };

        ResourceInstance.prototype.predictWaitingList = function () {
            return this.bookings.predictWaitingList();
        };

        ResourceInstance.prototype.typeName = function () {
            var ref;
            return (ref = this.get('resourceType')) != null ? ref.get('name') : void 0;
        };

        ResourceInstance.prototype.refreshDowntimes = function (silent) {
            if (silent == null) {
                silent = false;
            }
            if (this.hasDowntimes) {
                return;
            }
            this.hasDowntimes = true;
            return this.downtimes.reset(this.account.downtimes.forResource(this).map(function (downtime) {
                var d;
                d = downtime.clone();
                downtime.on('change', function () {
                    return d.set(downtime.attributes);
                });
                return d;
            }), {
                silent: silent
            });
        };

        ResourceInstance.prototype.isDowntimesStale = function () {
            var array, currentDowntimes, i, j, len, len1, uniqArray, val;
            currentDowntimes = this.account.downtimes.forResource(this);
            if (this.downtimes.length !== currentDowntimes.length) {
                return true;
            } else {
                array = (currentDowntimes.map(function (downtime) {
                    return downtime.id;
                })).concat(this.downtimes.pluck('id'));
                uniqArray = [];
                for (i = 0, len = array.length; i < len; i++) {
                    val = array[i];
                    if (indexOf.call(uniqArray, val) < 0) {
                        uniqArray.push(val);
                    }
                }
                if (uniqArray.length !== this.downtimes.length) {
                    return true;
                } else {
                    array = (currentDowntimes.map(function (downtime) {
                        return downtime.attributes.updatedAt.getTime();
                    })).concat(this.downtimes.models.map(function (downtime) {
                        return downtime.attributes.updatedAt.getTime();
                    }));
                    uniqArray = [];
                    for (j = 0, len1 = array.length; j < len1; j++) {
                        val = array[j];
                        if (indexOf.call(uniqArray, val) < 0) {
                            uniqArray.push(val);
                        }
                    }
                    if (uniqArray.length !== this.downtimes.length) {
                        return true;
                    }
                }
            }
            return false;
        };

        ResourceInstance.prototype.getDowntimeText = function () {
            return "downtime";
        };

        ResourceInstance.prototype.getHeadingDowntimeText = function () {
            return "Downtime";
        };

        ResourceInstance.prototype._addDays = function (dateRange, timeRange, total, increment) {
            if (this.isAvailableIn(dateRange, timeRange)) {
                return total + increment;
            } else {
                return total;
            }
        };

        return ResourceInstance;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var date,
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.TimeZone = (function (superClass) {
        extend(TimeZone, superClass);

        function TimeZone() {
            return TimeZone.__super__.constructor.apply(this, arguments);
        }

        TimeZone.prototype.toString = function () {
            return "(GMT " + (RG.Utils.TimeFormatter.formatMinutesOffset(this.get('offset'))) + ") " + (this.get('name'));
        };

        TimeZone.prototype.getFormattedOffset = function () {
            var flag, formattedHours, formattedOffset, hours, offsetHours;
            offsetHours = (this.get('offset') / 60) * -1;
            hours = Math.abs(offsetHours);
            formattedHours = Math.floor(hours);
            if (hours <= 10) {
                formattedHours = "0" + formattedHours;
            }
            if (offsetHours % 1 !== 0) {
                formattedOffset = formattedHours + ":30";
            } else {
                formattedOffset = formattedHours + ":00";
            }
            flag = offsetHours >= 0 ? "+" : "-";
            return flag + formattedOffset;
        };

        TimeZone.prototype.getName = function () {
            return this.get('name');
        };

        TimeZone.prototype.getParamValue = function () {
            return this.getName();
        };

        return TimeZone;

    })(RG.Models.Base);

    RG.Models.TimeZone.UTC = new RG.Models.TimeZone({
        name: 'UTC',
        offset: 0
    });

    date = new Date();

    RG.Models.TimeZone.Current = new RG.Models.TimeZone({
        name: 'Current',
        offset: -date.getTimezoneOffset()
    });

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.AbstractTimeAllocation = (function (superClass) {
        extend(AbstractTimeAllocation, superClass);

        function AbstractTimeAllocation() {
            return AbstractTimeAllocation.__super__.constructor.apply(this, arguments);
        }

        AbstractTimeAllocation.prototype.isDowntime = function () {
            return false;
        };

        AbstractTimeAllocation.prototype.getDateRange = function () {
            return new RG.Utils.DateRange(this.getFirstAllocatedDate(), this.getLastAllocatedDate());
        };

        AbstractTimeAllocation.prototype.getFirstAllocatedDate = function () {
            throw "Implement getFirstAllocatedDate in subclasses";
        };

        AbstractTimeAllocation.prototype.getLastAllocatedDate = function () {
            throw "Implement getLastAllocatedDate in subclasses";
        };

        AbstractTimeAllocation.prototype.getTimeRange = function () {
            throw "Implement getTimeRange in subclasses";
        };

        AbstractTimeAllocation.prototype.getConfirmedMinutes = function () {
            return this.getTimeRange().totalTime();
        };

        AbstractTimeAllocation.prototype.getDurationCaption = function () {
            return this._getFirstDuration().getCaption();
        };

        AbstractTimeAllocation.prototype.getDurationRepeatCaption = function () {
            return this._getFirstDuration().getRepeatCaption();
        };

        AbstractTimeAllocation.prototype.getDurationLongRepeatCaption = function () {
            return this._getFirstDuration().getLongRepeatCaption();
        };

        AbstractTimeAllocation.prototype.getDraggingId = function () {
            return (RG.Utils.DateFormatter.getISODate(this.getFirstAllocatedDate())) + "-" + (RG.Utils.DateFormatter.getISODate(this.getLastAllocatedDate())) + "-dragged-booking";
        };

        AbstractTimeAllocation.prototype._getFirstDuration = function () {
            throw "Implement _getFirstDuration in subclasses";
        };

        AbstractTimeAllocation.prototype._getLastDuration = function () {
            throw "Implement _getLastDuration in subclasses";
        };

        AbstractTimeAllocation.prototype.getStartDate = function () {
            throw "Implement getStartDate in subclasses";
        };

        AbstractTimeAllocation.prototype.getEndDate = function () {
            throw "Implement getEndDate in subclasses";
        };

        AbstractTimeAllocation.prototype.singleDayBooking = function () {
            throw "Implement singleDayBooking in subclasses";
        };

        return AbstractTimeAllocation;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Account = (function (superClass) {
        extend(Account, superClass);

        function Account() {
            return Account.__super__.constructor.apply(this, arguments);
        }

        Account.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            return this.downtimes = options.downtimes || new RG.Collections.Downtimes;
        };

        Account.prototype.getSubdomain = function () {
            return this.get("subdomain");
        };

        return Account;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.AvailablePeriod = (function (superClass) {
        extend(AvailablePeriod, superClass);

        function AvailablePeriod() {
            return AvailablePeriod.__super__.constructor.apply(this, arguments);
        }

        AvailablePeriod.prototype.getMinutesAvailable = function () {
            return +this.get('endTime') - +this.get('startTime');
        };

        AvailablePeriod.prototype.isValidOn = function (date) {
            return this.get('weekDay') === date.getDay() && (typeof this.get('validUntil') === 'undefined' || this.get('validUntil').getTime() >= date.getTime()) && (this.get('validFrom') < date || RG.Utils.DateComparator.equalsYMD(this.get('validFrom'), date));
        };

        AvailablePeriod.prototype.isCoveringDate = function (date) {
            var comparedRange, dateRange;
            dateRange = new RG.Utils.DateRange(this.get('validFrom'), this.get('validUntil'));
            comparedRange = new RG.Utils.DateRange(date, date);
            return dateRange.overlapsWith(comparedRange);
        };

        AvailablePeriod.prototype.isValidInDateRange = function (dateRange) {
            var endDate, startDate, validFrom, validFromTime, validUntil, validUntilTime;
            validFrom = this.attributes.validFrom;
            validUntil = this.attributes.validUntil;
            validFromTime = validFrom.valueOf();
            validUntilTime = validUntil != null ? validUntil.valueOf() : void 0;
            startDate = dateRange.startDate.valueOf();
            endDate = dateRange.endDate.valueOf();
            return dateRange.includes(validFrom) || ((validFromTime <= startDate) && !validUntilTime) || ((validFromTime <= startDate) && (validUntilTime >= endDate)) || dateRange.includes(validUntil);
        };

        AvailablePeriod.prototype.isAllDay = function () {
            return this.getMinutesAvailable() === 1440;
        };

        AvailablePeriod.prototype.toString = function () {
            return (RG.Utils.TimeFormatter.formatFixedTime(+this.get('startTime'))) + " - " + (RG.Utils.TimeFormatter.formatFixedTime(+this.get('endTime')));
        };

        AvailablePeriod.prototype.differentPeriod = function (cap) {
            return +this.get('endTime') !== +cap.get('endTime') || +this.get('startTime') !== +cap.get('startTime');
        };

        AvailablePeriod.prototype.contains = function (timeRange) {
            return new RG.Utils.TimeRange(this.get('startTime'), this.get('endTime')).contains(timeRange);
        };

        AvailablePeriod.prototype.getTimeRange = function () {
            return new RG.Utils.TimeRange(this.get('startTime'), this.get('endTime'));
        };

        AvailablePeriod.prototype.isNewerThan = function (date) {
            return this.get('validFrom').valueOf() >= date.valueOf();
        };

        return AvailablePeriod;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.BaseDuration = (function (superClass) {
        extend(BaseDuration, superClass);

        function BaseDuration() {
            this.predictWaitingList = bind(this.predictWaitingList, this);
            return BaseDuration.__super__.constructor.apply(this, arguments);
        }

        BaseDuration.prototype.anyClashes = function () {
            return false;
        };

        BaseDuration.prototype.getDate = function () {
            return this.get('date');
        };

        BaseDuration.prototype.getLayer = function () {
            return this.collection.booking.layer;
        };

        BaseDuration.prototype.isConfirmed = function () {
            return !this.attributes.waiting;
        };

        BaseDuration.prototype.isWaiting = function () {
            return this.attributes.waiting;
        };

        BaseDuration.prototype.containsDate = function (date) {
            return RG.Utils.DateComparator.equalsYMD(this.get('date'), date);
        };

        BaseDuration.prototype._isValidInTimeRange = function (timeRange) {
            return true;
        };

        BaseDuration.prototype.predictWaitingList = function () {
            var am, confirmed, date, duration, durations, i, len, minutesAvailable, ref, ref1, ref2, ref3, resource, usedMinutes;
            resource = (ref = this.collection) != null ? (ref1 = ref.booking) != null ? (ref2 = ref1.collection) != null ? ref2.resource : void 0 : void 0 : void 0;
            if (!resource) {
                return;
            }
            am = resource.availability;
            date = this.attributes.date;
            minutesAvailable = am.getMinutesAvailableForDate(date);
            if (minutesAvailable === 0) {
                return;
            }
            usedMinutes = 0;
            durations = [];
            ref3 = resource.bookings.getDurationsForDate(date);
            for (i = 0, len = ref3.length; i < len; i++) {
                duration = ref3[i];
                if (!(duration !== this && duration.isConfirmed())) {
                    continue;
                }
                durations.push(duration);
                usedMinutes += duration.getMinutes();
            }
            if (this.get('waiting')) {
                confirmed = !this.anyClashes(durations) && (usedMinutes + this.getMinutes()) <= minutesAvailable && am.getAvailableTimeRangesInDateRange(new RG.Utils.DateRange(date, date)).some((function (_this) {
                    return function (r) {
                        return _this._isValidInTimeRange(r);
                    };
                })(this));
                this.set({
                    waiting: !confirmed
                });
            }
        };

        BaseDuration.prototype.removeAndUpdateBooking = function () {
            var booking, bookings, date, durations, resource;
            durations = this.collection;
            booking = durations != null ? durations.booking : void 0;
            if (!booking) {
                return;
            }
            bookings = booking.collection;
            resource = bookings.resource;
            date = this.get('date');
            durations.remove(this, {
                silent: true
            });
            if (durations.length === 0) {
                bookings.remove(booking);
                return;
            }
            if (resource.availability.getMinutesAvailableForDate(date) > 0) {
                booking.split(date);
            }
        };

        return BaseDuration;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Booker = (function (superClass) {
        extend(Booker, superClass);

        function Booker() {
            return Booker.__super__.constructor.apply(this, arguments);
        }

        return Booker;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty,
        slice = [].slice;

    RG.Models.Booking = (function (superClass) {
        extend(Booking, superClass);

        function Booking() {
            Booking.__super__.constructor.apply(this, arguments);
            this.layer = 0;
            this.realBooking = this;
            this.durations = new RG.Collections.Durations;
            this.durations.booking = this;
            return;
        }

        Booking.prototype.deepEqual = function (other) {
            var myResource, otherResource, ref, ref1;
            myResource = (ref = this.collection) != null ? ref.resource : void 0;
            otherResource = (ref1 = other.collection) != null ? ref1.resource : void 0;
            return other.constructor === this.constructor && this.layer === other.layer && _.isEqual(this.attributes, other.attributes) && _.isEqual(this.durations.models.map(function (d) {
                return d.attributes;
            }), other.durations.models.map(function (d) {
                return d.attributes;
            })) && myResource === otherResource;
        };

        Booking.prototype.deepClone = function () {
            var b, clonedDurations;
            b = this.clone();
            clonedDurations = this.durations.models.map(function (d) {
                var dup;
                dup = new d.constructor;
                dup.attributes = _.clone(d.attributes);
                dup.id = d.id;
                return dup;
            });
            b.durations = new RG.Collections.Durations;
            b.durations.models = clonedDurations;
            b.durations.length = clonedDurations.length;
            b.durations.booking = b;
            return b;
        };

        Booking.prototype.getBookingTarget = function () {
            return this.get('client') || this.get('project') || new RG.Models.NullBookingTarget;
        };

        Booking.prototype.getProjectNameWithProjectCode = function () {
            return this.get('project') && this.get('project').getNameWithProjectCode();
        };

        Booking.prototype.getClientName = function () {
            if (this.get('client')) {
                return this.get('client').getName();
            } else if (this.get('project')) {
                return this.get('project').getClientName();
            }
        };

        Booking.prototype.getCaption = function () {
            var caption, durationCaption, separator;
            durationCaption = this.getDurationCaption();
            separator = "";
            caption = this.getBookingTarget().toString('short');
            if (this.isSeries()) {
                durationCaption = durationCaption + " " + (this.getDurationRepeatCaption());
            }
            if (caption.indexOf("|") === -1 && this.escape('notes').trim().length) {
                if (caption.length) {
                    caption = caption + " | ";
                }
                caption = this.escape('notes').substr(0, 35).trim();//caption + this.escape('notes').substr(0, 35).trim();
                if (this.escape('notes').length > 35) {
                    caption = caption + "...";
                }
            }
            if (caption.length && durationCaption.length) {
                separator = " | ";
            }
            return caption; //+ separator + durationCaption;
        };

        Booking.prototype.getConfirmedMinutes = function () {
            var confirmedDurations;
            confirmedDurations = this.durations.filter(function (d) {
                return d.isConfirmed();
            });
            return confirmedDurations.map(function (d) {
                return d.getMinutes();
            }).reduce((function (a, b) {
                return a + b;
            }), 0);
        };

        Booking.prototype.getFirstAllocatedDate = function () {
            return this._getFirstDuration().get('date');
        };

        Booking.prototype.getLastAllocatedDate = function () {
            return this._getLastDuration().get('date');
        };

        Booking.prototype.getLongCaption = function () {
            var caption, durationCaption, longCaption, target;
            target = this.getBookingTarget();
            caption = "";
            durationCaption = this.getDurationCaption();
            if (this.isSeries()) {
                durationCaption = durationCaption + " " + (this.getDurationLongRepeatCaption());
            }
            // caption = caption + ("<span class=\"label__time\">" + durationCaption + "</span>");
            if ((target != null) && target.constructor) {
                longCaption = "<br>" + (target.getLongCaption());
                // caption = caption + (target.getLongCaption().length ? longCaption : "");
            }
            if (this.get('notes') && target.getLongCaption().indexOf("<br>") === -1) {
                caption = caption + ((this.escape('notes')));
            }
            return caption;
        };

        Booking.prototype.getSavedDateRange = function () {
            return new RG.Utils.DateRange(this.get('startDate'), this.get('endDate'));
        };

        Booking.prototype.getTitleCaption = function () {
            var caption, details, durationCaption, target, targetString;
            target = this.getBookingTarget();
            caption = [];
            // if (targetString = target.toString()) {
            //     caption.push(targetString);
            // }
            if (this.get('notes') && this.get('notes').length) {
                details = this.get('notes').replace(/\n/g, " ").substr(0, 300);
                details = details.length === 300 ? details.substr(0, 297) + "..." : details;
                caption.push(details);
            }
            // durationCaption = this.getDurationCaption();
            // if (this.isSeries) {
            //     durationCaption += " " + this.getDurationRepeatCaption();
            // }
            // caption.push(durationCaption);
            return caption.join(" | ");
        };

        Booking.prototype.getWaitingMinutes = function () {
            var waitingDurations;
            waitingDurations = this.durations.filter(function (d) {
                return d.isWaiting();
            });
            return _.reduce(_.map(waitingDurations, function (d) {
                return d.getMinutes();
            }), (function (a, b) {
                return a + b;
            }), 0);
        };

        Booking.prototype.cloneWithDurations = function () {
            var booking, durations, endDate, startDate;
            durations = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            startDate = durations[0].get('date');
            endDate = _.last(durations).get('date');
            booking = this.clone();
            booking.set({
                startDate: startDate,
                endDate: endDate
            });
            booking.durations = new RG.Collections.Durations(durations);
            booking.collection = this.collection;
            booking.realBooking = this;
            return booking;
        };

        Booking.prototype.split = function (date) {
            var durations, leftDurations, rightBooking, rightDurations;
            leftDurations = this.durations.select(function (duration) {
                return duration.get('date').cloneYMD() < date.cloneYMD();
            });
            rightDurations = this.durations.select(function (duration) {
                return duration.get('date').cloneYMD() > date.cloneYMD();
            });
            if (leftDurations.length && rightDurations.length) {
                this.durations.reset(leftDurations);
                this.set({
                    startDate: leftDurations[0].get('date'),
                    endDate: _.last(leftDurations).get('date')
                });
                rightBooking = this.clone();
                rightBooking.set({
                    id: null,
                    startDate: rightDurations[0].get('date'),
                    endDate: _.last(rightDurations).get('date')
                });
                rightBooking.collection = this.collection;
                rightBooking.durations = new RG.Collections.Durations(rightDurations);
                rightBooking.durations.booking = rightBooking;
                return this.collection.add(rightBooking);
            } else {
                durations = leftDurations.concat(rightDurations);
                this.durations.reset(durations);
                return this.set({
                    startDate: durations[0].get('date'),
                    endDate: _.last(durations).get('date')
                });
            }
        };

        Booking.prototype.isBillable = function () {
            return !!this.get('billable');
        };

        Booking.prototype.isExclusivelyOnWaitingList = function () {
            return this.durations.models.filter(function (d) {
                return d.getMinutes() > 0;
            }).every(function (d) {
                return d.isWaiting();
            });
        };

        Booking.prototype.isSeries = function () {
            return this.durations.length > 1;
        };

        Booking.prototype.predictWaitingList = function () {
            return this.durations.predictWaitingList();
        };

        Booking.prototype.getFirstNonZeroDuration = function () {
            var duration, i, len, ref;
            ref = this.durations.models;
            for (i = 0, len = ref.length; i < len; i++) {
                duration = ref[i];
                if (duration.getMinutes() > 0) {
                    return duration;
                }
            }
            return new RG.Models.NullDuration;
        };

        Booking.prototype._getFirstDuration = function () {
            return this.durations.models[0] || new RG.Models.NullDuration;
        };

        Booking.prototype._getLastDuration = function () {
            return this.durations.models[this.durations.length - 1] || new RG.Models.NullDuration;
        };

        Booking.prototype.getBooker = function () {
            return this.get('booker');
        };

        Booking.prototype.getDurations = function () {
            return this.durations.models;
        };

        Booking.prototype.getStartDate = function () {
            return this._getFirstDuration().getDate();
        };

        Booking.prototype.getEndDate = function () {
            return this._getLastDuration().getDate();
        };

        Booking.prototype.hasNoDurations = function () {
            return this.durations.select(function (d) {
                return !d.transient;
            }).length === 0;
        };

        Booking.prototype.singleDayBooking = function () {
            return this.durations.length === 1 && this.get('startDate') && this.get('endDate') && RG.Utils.DateComparator.equalsYMD(this.get('startDate'), this.get('endDate'));
        };

        return Booking;

    })(RG.Models.AbstractTimeAllocation);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.CustomAvailablePeriod = (function (superClass) {
        extend(CustomAvailablePeriod, superClass);

        function CustomAvailablePeriod() {
            return CustomAvailablePeriod.__super__.constructor.apply(this, arguments);
        }

        CustomAvailablePeriod.prototype.initialize = function (options) {
            return CustomAvailablePeriod.__super__.initialize.apply(this, arguments);
        };

        CustomAvailablePeriod.prototype.isValidOn = function (date) {
            return RG.Utils.DateComparator.equalsYMD(this.get('date'), date);
        };

        CustomAvailablePeriod.prototype.isEditable = function () {
            return true;
        };

        return CustomAvailablePeriod;

    })(RG.Models.AvailablePeriod);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.CustomField = (function (superClass) {
        extend(CustomField, superClass);

        function CustomField() {
            return CustomField.__super__.constructor.apply(this, arguments);
        }

        CustomField.prototype.initialize = function () {
            this.customFieldOptions = new RG.Collections.CustomFieldOptions;
            return this.customFieldOptions.customField = this;
        };

        return CustomField;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.CustomFieldOption = (function (superClass) {
        extend(CustomFieldOption, superClass);

        function CustomFieldOption() {
            return CustomFieldOption.__super__.constructor.apply(this, arguments);
        }

        return CustomFieldOption;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Downtime = (function (superClass) {
        extend(Downtime, superClass);

        function Downtime() {
            Downtime.__super__.constructor.apply(this, arguments);
            this.downtimeType = this.getDowntimeType();
            this._timeRanges = {};
            this._timeZoneConverted = {};
            this._boundClones = [];
            if (!this.attributes.updatedAt) {
                this.attributes.updatedAt = new Date;
            }
            this.on('change', this._resetCache, this);
            this.on('change', (function (_this) {
                return function () {
                    var d, i, len, ref, results;
                    ref = _this._boundClones;
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        d = ref[i];
                        results.push(d.set(_this.attributes));
                    }
                    return results;
                };
            })(this));
            return;
        }

        Downtime.prototype.deepEqual = function (other) {
            return this.constructor === other.constructor && this.layer === other.layer && _.isEqual(this.attributes, other.attributes);
        };

        Downtime.prototype.deepClone = function () {
            return this.clone();
        };

        Downtime.prototype._resetCache = function () {
            this._timeRanges = {};
            this._durations = null;
            return this._timeZoneConverted = {};
        };

        Downtime.prototype.isDowntime = function () {
            return true;
        };

        Downtime.prototype.isSeries = function () {
            return this.getDateRange().getNumberOfDays() > 1;
        };

        Downtime.prototype.clone = function () {
            return new this.constructor(this.attributes);
        };

        Downtime.prototype.cloneWithBinding = function () {
            var d;
            d = this.clone();
            this._boundClones.push(d);
            return d;
        };

        Downtime.prototype.getDowntimeType = function () {
            return this.get('downtimeType');
        };

        Downtime.prototype.getConfirmedMinutes = function () {
            var date, dateRange, i, len, ref, time, timeRange;
            dateRange = this.getDateRange();
            if (dateRange.getNumberOfDays() === 1) {
                timeRange = this.getTimeRange(dateRange.startDate);
                return timeRange.totalTime();
            } else {
                time = 0;
                ref = dateRange.getDates();
                for (i = 0, len = ref.length; i < len; i++) {
                    date = ref[i];
                    timeRange = this.getTimeRange(date);
                    time += timeRange.totalTime();
                }
                return time;
            }
        };

        Downtime.prototype.getSavedDateRange = function () {
            return this.getDateRange();
        };

        Downtime.prototype.getFirstAllocatedDate = function () {
            return this.attributes.from;
        };

        Downtime.prototype.getLastAllocatedDate = function () {
            return this.attributes.to;
        };

        Downtime.prototype.type = function () {
            var ref;
            return (ref = this.getDowntimeType()) != null ? ref.get('name') : void 0;
        };

        Downtime.prototype.inYear = function (year) {
            return this.getDateRange().coversYear(year);
        };

        Downtime.prototype.isValidOn = function (date) {
            return this.getDateRange().includes(date);
        };

        Downtime.prototype.inTimeZoneSimple = function (timeZone) {
            var from, offset, shift, shiftedEnd, shiftedEndDate, shiftedEndTime, shiftedStart, shiftedStartDate, shiftedStartTime, to;
            if (this.isLocalTimeZone()) {
                from = this.attributes.from;
                to = this.attributes.to;
                return {
                    startDate: from,
                    endDate: to,
                    startTime: this.attributes.startTime,
                    endTime: this.attributes.endTime,
                    getDateRange: function () {
                        return new RG.Utils.DateRange(from, to);
                    },
                    getStartDate: function () {
                        return from;
                    },
                    getEndDate: function () {
                        return to;
                    }
                };
            }
            offset = timeZone != null ? timeZone.get('offset') : void 0;
            shift = -this.get('timeZone').get('offset') + offset;
            from = this.get('from');
            to = this.get('to');
            shiftedStartTime = this.get('startTime') + shift;
            shiftedEndTime = this.get('endTime') + shift;
            shiftedStartDate = from.getTime();
            if (shiftedStartTime < 0) {
                shiftedStartDate -= 86400000;
            } else if (shiftedStartTime > 1440) {
                shiftedStartDate += 86400000;
            }
            shiftedEndDate = to.getTime();
            if (shiftedEndTime <= 0) {
                shiftedEndDate -= 86400000;
            } else if (shiftedEndTime > 1440) {
                shiftedEndDate += 86400000;
            }
            shiftedStart = new Date(shiftedStartDate);
            shiftedEnd = new Date(shiftedEndDate);
            return {
                startDate: shiftedStart,
                endDate: shiftedEnd,
                startTime: (shiftedStartTime + 1440) % 1440,
                endTime: ((shiftedEndTime + 1440) % 1440) || 1440,
                getDateRange: function () {
                    return new RG.Utils.DateRange(shiftedStart, shiftedEnd);
                },
                getStartDate: function () {
                    return shiftedStart;
                },
                getEndDate: function () {
                    return shiftedEnd;
                }
            };
        };

        Downtime.prototype.inTimeZone = function (timeZone) {
            var attributes, from, offset, resultDowntime, shift, shiftedDowntime, shiftedEnd, shiftedEndDate, shiftedEndTime, shiftedStart, shiftedStartDate, shiftedStartTime, to;
            offset = timeZone != null ? timeZone.get('offset') : void 0;
            if (this._timeZoneConverted[offset]) {
                return this._timeZoneConverted[offset];
            }
            if (this.isLocalTimeZone()) {
                resultDowntime = new RG.Models.Downtime;
                resultDowntime.attributes = _.clone(this.attributes);
                resultDowntime.id = this.attributes.id;
                return this._timeZoneConverted[offset] = resultDowntime;
            }
            shift = -this.get('timeZone').get('offset') + offset;
            from = this.get('from');
            to = this.get('to');
            shiftedStartTime = this.get('startTime') + shift;
            shiftedEndTime = this.get('endTime') + shift;
            shiftedStartDate = from.getTime();
            if (shiftedStartTime < 0) {
                shiftedStartDate -= 86400000;
            } else if (shiftedStartTime > 1440) {
                shiftedStartDate += 86400000;
            }
            shiftedEndDate = to.getTime();
            if (shiftedEndTime <= 0) {
                shiftedEndDate -= 86400000;
            } else if (shiftedEndTime > 1440) {
                shiftedEndDate += 86400000;
            }
            shiftedStart = new Date(shiftedStartDate);
            shiftedEnd = new Date(shiftedEndDate);
            attributes = {
                id: this.attributes.id,
                timeZone: timeZone,
                downtimeTypeId: this.attributes.downtimeTypeId,
                details: this.attributes.details,
                state: this.attributes.state,
                creatorId: this.attributes.creatorId,
                leave: this.attributes.leave,
                resourceIds: this.attributes.resourceIds,
                downtimeType: this.getDowntimeType(),
                from: shiftedStart,
                to: shiftedEnd,
                updatedAt: this.attributes.updatedAt,
                startTime: ((shiftedStartTime + 1440) % 1440) | 0,
                endTime: (((shiftedEndTime + 1440) % 1440) | 0) || 1440
            };
            shiftedDowntime = new RG.Models.Downtime;
            shiftedDowntime.attributes = attributes;
            shiftedDowntime.id = attributes.id;
            shiftedDowntime.layer = this.layer;
            return this._timeZoneConverted[timeZone] = shiftedDowntime;
        };

        Downtime.prototype.getRawTimeRange = function () {
            return new RG.Utils.TimeRange(this.get('startTime'), this.get('endTime'));
        };

        Downtime.prototype.getTimeRange = function (date) {
            var key;
            key = date.toString();
            if (this._timeRanges[key]) {
                return this._timeRanges[key];
            }
            return this._timeRanges[key] = RG.Utils.DateComparator.equalsYMD(date, this.get('from')) && RG.Utils.DateComparator.equalsYMD(date, this.get('to')) ? new RG.Utils.TimeRange(this.get('startTime'), this.get('endTime')) : RG.Utils.DateComparator.equalsYMD(date, this.get('from')) ? new RG.Utils.TimeRange(this.get('startTime'), 1440) : RG.Utils.DateComparator.equalsYMD(date, this.get('to')) ? new RG.Utils.TimeRange(0, this.get('endTime')) : this.get('from') > date || this.get('to') < date ? new RG.Utils.TimeRange(0, 0) : new RG.Utils.TimeRange(0, 1440);
        };

        Downtime.prototype.getType = function () {
            return this.type();
        };

        Downtime.prototype.getTypeIcon = function () {
            var ref;
            return (ref = this.getDowntimeType()) != null ? ref.typeIcon() : void 0;
        };

        Downtime.prototype.isVacation = function () {
            var ref;
            return (ref = this.getDowntimeType()) != null ? ref.isVacation() : void 0;
        };

        Downtime.prototype.getAllowancePerDay = function (date) {
            return this.getTimeRange(date).getAllowancePerDay();
        };

        Downtime.prototype.getTitleCaption = function () {
            var caption, details;
            caption = [];
            if (this.getType() && this.getType().length) {
                caption.push(this.type());
            }
            if (this.get('details') && this.get('details').length) {
                details = this.get('details').replace(/\n/g, " ").substr(0, 300);
                details = details.length === 300 ? details.substr(0, 297) + "..." : details;
                caption.push(details);
            }
            caption.push(this.getDateTimeString());
            return caption.join(" | ");
        };

        Downtime.prototype.getTimeZone = function () {
            return this.get('timeZone') || RG.Models.NullTimeZone.instance;
        };

        Downtime.prototype.getTimeZoneName = function () {
            return this.getTimeZone().getName();
        };

        Downtime.prototype.getDateTimeString = function (dateFormatter) {
            if (dateFormatter == null) {
                dateFormatter = RG.Utils.DateFormatter.getShortDate;
            }
            return new RG.Utils.DowntimePresenter(this).dateTimeString(dateFormatter);
        };

        Downtime.prototype._getFirstDuration = function () {
            return new RG.Models.Duration({
                date: this.get('from'),
                minutes: 0,
                waiting: false
            });
        };

        Downtime.prototype.getFirstNonZeroDuration = function () {
            return this._getFirstDuration();
        };

        Downtime.prototype._getLastDuration = function () {
            return new RG.Models.Duration({
                date: this.get('to'),
                minutes: 0,
                waiting: false
            });
        };

        Downtime.prototype.isExclusivelyOnWaitingList = function () {
            return false;
        };

        Downtime.prototype.getStartDate = function () {
            return this.attributes.from;
        };

        Downtime.prototype.getEndDate = function () {
            return this.attributes.to;
        };

        Downtime.prototype.getBooker = function () {
            return {
                id: this.get('creatorId')
            };
        };

        Downtime.prototype.getDurations = function (downtime) {
            var date, duration, durations, i, len, ref, timeRange;
            if (downtime == null) {
                downtime = this;
            }
            if (this._durations) {
                return this._durations;
            }
            durations = [];
            ref = this.getDateRange().getDates();
            for (i = 0, len = ref.length; i < len; i++) {
                date = ref[i];
                timeRange = this.getTimeRange(date);
                duration = new RG.Models.DowntimeDuration({
                    startTime: timeRange.startTime,
                    endTime: timeRange.endTime,
                    date: date
                });
                duration.downtime = downtime;
                durations.push(duration);
            }
            return this._durations = durations;
        };

        Downtime.prototype.addResource = function (resource) {
            var resourceIds;
            resourceIds = this.get('resourceIds');
            if (_.include(resourceIds, resource.id)) {
                return;
            }
            resourceIds.push(resource.id);
            return this.set({
                resourceIds: resourceIds
            });
        };

        Downtime.prototype.removeResource = function (resource) {
            var resourceIds;
            resourceIds = this.get('resourceIds');
            resourceIds = _.reject(resourceIds, function (id) {
                return id === resource.id;
            });
            return this.set({
                resourceIds: resourceIds
            });
        };

        Downtime.prototype.isLocalTimeZone = function () {
            return this.getTimeZone().toString() === '';
        };

        Downtime.prototype.singleDayBooking = function () {
            return this.get('from') && this.get('to') && RG.Utils.DateComparator.equalsYMD(this.get('from'), this.get('to'));
        };

        return Downtime;

    })(RG.Models.AbstractTimeAllocation);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.DowntimeType = (function (superClass) {
        extend(DowntimeType, superClass);

        function DowntimeType() {
            return DowntimeType.__super__.constructor.apply(this, arguments);
        }

        DowntimeType.prototype.getName = function () {
            return this.get('name');
        };

        DowntimeType.prototype.isVacation = function () {
            var name;
            name = this.getName();
            return name === RG.Variables.DowntimeType.vacation || name === RG.Variables.DowntimeType.personalHoliday;
        };

        DowntimeType.prototype.isPublicHoliday = function () {
            return this.getName() === RG.Variables.DowntimeType.publicHoliday;
        };

        DowntimeType.prototype.isSick = function () {
            return this.getName() === RG.Variables.DowntimeType.sick;
        };

        DowntimeType.prototype.isMaternity = function () {
            return this.getName() === RG.Variables.DowntimeType.maternity;
        };

        DowntimeType.prototype.isCompassionate = function () {
            return this.getName() === RG.Variables.DowntimeType.compassionate;
        };

        DowntimeType.prototype.typeIcon = function () {
            if (this.isVacation()) {
                return 'rg-icon--vacation';
            } else if (this.isPublicHoliday()) {
                return 'rg-icon--happy';
            } else if (this.isSick()) {
                return 'rg-icon--sick';
            } else if (this.isMaternity()) {
                return 'rg-icon--maternity';
            } else if (this.isCompassionate()) {
                return 'rg-icon--compassionate';
            } else {
                return '';
            }
        };

        return DowntimeType;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Duration = (function (superClass) {
        extend(Duration, superClass);

        function Duration() {
            return Duration.__super__.constructor.apply(this, arguments);
        }

        Duration.prototype.getCaption = function () {
            return RG.Utils.TimeFormatter.formatMinutes(this.realMinutes || this.getMinutes());
        };

        Duration.prototype.getMinutes = function () {
            return this.get('minutes');
        };

        Duration.prototype.getRepeatCaption = function () {
            return "p/d";
        };

        Duration.prototype.getLongRepeatCaption = function () {
            return "per day";
        };

        Duration.prototype.startsAfterTime = function (startTime) {
            return false;
        };

        Duration.prototype.endsBeforeTime = function (endTime) {
            return false;
        };

        Duration.prototype.isFixed = function () {
            return false;
        };

        Duration.prototype.getTimeRange = function () {
            return new RG.Utils.TimeRange(0, 0);
        };

        return Duration;

    })(RG.Models.BaseDuration);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.FilterOption = (function (superClass) {
        extend(FilterOption, superClass);

        function FilterOption() {
            return FilterOption.__super__.constructor.apply(this, arguments);
        }

        FilterOption.prototype.getName = function () {
            return this.escape("name");
        };

        return FilterOption;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.FixedDuration = (function (superClass) {
        extend(FixedDuration, superClass);

        function FixedDuration() {
            return FixedDuration.__super__.constructor.apply(this, arguments);
        }

        FixedDuration.prototype.getCaption = function () {
            return this._getTimeFor(this.get('startTime')) + " - " + this._getTimeFor(this.get('endTime'));
        };

        FixedDuration.prototype.getMinutes = function () {
            return this.attributes.endTime - this.attributes.startTime;
        };

        FixedDuration.prototype.getRepeatCaption = function () {
            return "daily";
        };

        FixedDuration.prototype.getLongRepeatCaption = function () {
            return "every day";
        };

        FixedDuration.prototype._getTimeFor = function (minuteOfDay) {
            return RG.Utils.TimeFormatter.formatFixedTime(minuteOfDay);
        };

        FixedDuration.prototype.isFixed = function () {
            return true;
        };

        FixedDuration.prototype.startsAfterTime = function (endTime) {
            return endTime <= this.get('startTime');
        };

        FixedDuration.prototype.endsBeforeTime = function (startTime) {
            return startTime >= this.get('endTime');
        };

        FixedDuration.prototype.anyClashes = function (durations) {
            return durations.some((function (_this) {
                return function (duration) {
                    return _this.clash(duration);
                };
            })(this));
        };

        FixedDuration.prototype.clash = function (other) {
            return this.getTimeRange().overlapsWith(other.getTimeRange());
        };

        FixedDuration.prototype.within = function (ap) {
            return +this.get('startTime') >= +ap.get('startTime') && +this.get('endTime') <= +ap.get('endTime');
        };

        FixedDuration.prototype.getTimeRange = function () {
            return new RG.Utils.TimeRange(this.get('startTime'), this.get('endTime'));
        };

        FixedDuration.prototype._isValidInTimeRange = function (timeRange) {
            return this.getTimeRange().subtractOne(timeRange).length === 0;
        };

        return FixedDuration;

    })(RG.Models.BaseDuration);

    RG.Models.DowntimeDuration = (function (superClass) {
        extend(DowntimeDuration, superClass);

        function DowntimeDuration() {
            return DowntimeDuration.__super__.constructor.apply(this, arguments);
        }

        DowntimeDuration.prototype.getLayer = function () {
            return this.downtime.layer;
        };

        return DowntimeDuration;

    })(RG.Models.FixedDuration);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.HumanResourceInstance = (function (superClass) {
        extend(HumanResourceInstance, superClass);

        function HumanResourceInstance() {
            return HumanResourceInstance.__super__.constructor.apply(this, arguments);
        }

        HumanResourceInstance.prototype.hasAvatar = function () {
            var ref;
            return ((ref = this.get('imageUrl')) != null ? ref.indexOf("fallback") : void 0) === -1;
        };

        HumanResourceInstance.prototype.getDowntimeText = function () {
            return "time off";
        };

        HumanResourceInstance.prototype.getHeadingDowntimeText = function () {
            return "Time Off";
        };

        return HumanResourceInstance;

    })(RG.Models.ResourceInstance);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.NullTimeZone = (function (superClass) {
        extend(NullTimeZone, superClass);

        function NullTimeZone() {
            return NullTimeZone.__super__.constructor.apply(this, arguments);
        }

        NullTimeZone.prototype.toString = function () {
            return '';
        };

        NullTimeZone.prototype.getFormattedOffset = function () {
            return '';
        };

        NullTimeZone.prototype.getName = function () {
            return 'NullTimeZone';
        };

        NullTimeZone.prototype.getParamValue = function () {
            return null;
        };

        return NullTimeZone;

    })(RG.Models.TimeZone);

    RG.Models.NullTimeZone.instance = new RG.Models.NullTimeZone;

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.OptionGroup = (function (superClass) {
        extend(OptionGroup, superClass);

        function OptionGroup() {
            return OptionGroup.__super__.constructor.apply(this, arguments);
        }

        OptionGroup.prototype.initialize = function (options) {
            this.options = new RG.Collections.FilterOptions;
            return this.options.optionGroup = this;
        };

        OptionGroup.prototype.getName = function () {
            return this.get('name');
        };

        OptionGroup.prototype.getTagId = function () {
            var ref;
            return (ref = this.get('tag')) != null ? ref.id : void 0;
        };

        OptionGroup.prototype.getType = function () {
            var ref, ref1;
            return (ref = this.collection) != null ? (ref1 = ref.category) != null ? ref1.get('name') : void 0 : void 0;
        };

        return OptionGroup;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Overtime = (function (superClass) {
        extend(Overtime, superClass);

        function Overtime() {
            return Overtime.__super__.constructor.apply(this, arguments);
        }

        Overtime.prototype.getMinutesAvailable = function () {
            return this.get('duration');
        };

        return Overtime;

    })(RG.Models.CustomAvailablePeriod);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.ResourceType = (function (superClass) {
        extend(ResourceType, superClass);

        function ResourceType() {
            return ResourceType.__super__.constructor.apply(this, arguments);
        }

        ResourceType.prototype.initialize = function () {
            this.customFields = new RG.Collections.CustomFields;
            return this.customFields.resourceType = this;
        };

        ResourceType.prototype.getName = function () {
            return this.attributes.name;
        };

        return ResourceType;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Calendar.Units.Day = (function (superClass) {
        extend(Day, superClass);

        function Day(date) {
            Day.__super__.constructor.apply(this, arguments);
            this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        }

        Day.prototype.containsDate = function (date) {
            return RG.Utils.DateComparator.equalsYMD(this.date, date);
        };

        Day.prototype.getDateRange = function () {
            return new RG.Utils.DateRange(this.date, this.date);
        };

        Day.prototype.getDaysPerUnit = function () {
            return 1;
        };

        Day.prototype.getName = function () {
            return new RG.Utils.DayName(this.date.getDay()).toString();
        };

        Day.prototype.getFormattedDate = function () {
            return this.date.getDate().toString();
        };

        Day.prototype.getMinutesPerUtilisationLine = function () {
            return 480;
        };

        Day.prototype.isCurrent = function () {
            return RG.Utils.DateComparator.equalsYMD(this.date, RG.Utils.BookingDataParser.getDateFromStr(window.currentUserDate.date));
        };

        Day.prototype.nextUnit = function () {
            var d;
            d = new Date(this.date.getFullYear(), this.date.getMonth(), this.date.getDate() + 1);
            return new RG.Calendar.Units.Day(d);
        };

        Day.prototype.previousUnit = function () {
            var d;
            d = new Date(this.date.getFullYear(), this.date.getMonth(), this.date.getDate() - 1);
            return new RG.Calendar.Units.Day(d);
        };

        Day.prototype.getWeek = function () {
            var ref;
            return (ref = this.date) != null ? ref.getWeek() : void 0;
        };

        return Day;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Calendar.Units.DayUnitGrouping = (function (superClass) {
        extend(DayUnitGrouping, superClass);

        function DayUnitGrouping() {
            return DayUnitGrouping.__super__.constructor.apply(this, arguments);
        }

        DayUnitGrouping.prototype.initialize = function (dateRange) {
            this.dateRange = dateRange;
        };

        DayUnitGrouping.prototype.getUnits = function () {
            var date, day, i, j, ref, sd, ua;
            if (this._units != null) {
                return this._units;
            }
            this._units = new RG.Collections.Units();
            ua = [];
            for (i = j = 0, ref = this.dateRange.getNumberOfDays() - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                sd = this.dateRange.startDate;
                date = new Date(sd.getFullYear(), sd.getMonth(), sd.getDate() + i);
                day = new RG.Calendar.Units.Day(date);
                ua.push(day);
            }
            this._units.reset(ua);
            return this._units;
        };

        DayUnitGrouping.prototype.toString = function () {
            return this.dateRange.toString();
        };

        return DayUnitGrouping;

    })(Backbone.Model);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.UnitDuration = (function (superClass) {
        extend(UnitDuration, superClass);

        function UnitDuration() {
            return UnitDuration.__super__.constructor.apply(this, arguments);
        }

        return UnitDuration;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Client = (function (superClass) {
        extend(Client, superClass);

        function Client() {
            return Client.__super__.constructor.apply(this, arguments);
        }

        Client.prototype.getTypeDescription = function () {
            return "Client";
        };

        Client.prototype.getLongCaption = function () {
            return this.getName();
        };

        Client.prototype.getLongDescription = function () {
            return this.getName();
        };

        Client.prototype.getName = function () {
            return this.escape('name');
        };

        Client.prototype.toString = function () {
            return this.getName();
        };

        return Client;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    RG.Models.CurrentDate = (function () {
        function CurrentDate(date1) {
            this.date = date1;
            _.extend(this, Backbone.Events);
        }

        CurrentDate.prototype.set = function (date) {
            var changed;
            changed = this.date !== date;
            this.date = date;
            if (changed) {
                this.trigger('change', date);
            }
        };

        return CurrentDate;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.DayAvailabilityAggregation = (function (superClass) {
        extend(DayAvailabilityAggregation, superClass);

        function DayAvailabilityAggregation() {
            return DayAvailabilityAggregation.__super__.constructor.apply(this, arguments);
        }

        DayAvailabilityAggregation.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.set('availablePeriods', options.availablePeriods || {});
            this.set('originalAvailablePeriods', options.originalAvailablePeriods || {});
            this.set('durations', options.durations || {});
            this.set('overtimes', options.overtimes || {});
            return this.set('downtimes', options.downtimes || {});
        };

        DayAvailabilityAggregation.prototype.getLowestMinutesAvailable = function () {
            if (this.availabilityCleared) {
                return this.getCurrentMinutesAvailable();
            }
            return this.getAvailabilityWithoutDowntime();
        };

        DayAvailabilityAggregation.prototype.getAvailabilityWithoutDowntime = function () {
            var aggregate, dailyPeriods, i, j, k, len, len1, minutes, p, period, ref, v;
            dailyPeriods = [];
            ref = this.get('availablePeriods');
            for (k in ref) {
                v = ref[k];
                if (v.length > 0) {
                    dailyPeriods.concat(v);
                }
            }
            if (dailyPeriods.length === 1) {
                dailyPeriods = [this.getFirstAvailablePeriods().models];
            } else {
                dailyPeriods.push(this.getFirstAvailablePeriods().models);
            }
            aggregate = [];
            for (i = 0, len = dailyPeriods.length; i < len; i++) {
                period = dailyPeriods[i];
                minutes = 0;
                for (j = 0, len1 = period.length; j < len1; j++) {
                    p = period[j];
                    minutes += p.getMinutesAvailable();
                }
                aggregate.push(minutes);
            }
            return aggregate.min();
        };

        DayAvailabilityAggregation.prototype.getCurrentMinutesAvailable = function () {
            if (!this.downtimesConsistent()) {
                return null;
            }
            return this._totalMinutesFromPeriodsAndDowntimes(this.getFirstAvailablePeriods().models, this.getFirstDowntimes());
        };

        DayAvailabilityAggregation.prototype.getTotalMinutesAvailable = function () {
            var aggregate, dailyPeriods, downtimes;
            if (!this.downtimesConsistent()) {
                return null;
            }
            dailyPeriods = _.values(this.get('availablePeriods'));
            downtimes = this.getFirstDowntimes();
            aggregate = _.map(dailyPeriods, (function (_this) {
                return function (availablePeriods) {
                    return {
                        totalMinutes: _this._totalMinutesFromPeriodsAndDowntimes(availablePeriods, downtimes)
                    };
                };
            })(this));
            if (_.uniq(_.map(aggregate, function (p) {
                return p.totalMinutes;
            })).length === 1) {
                return aggregate[0].totalMinutes;
            }
            return null;
        };

        DayAvailabilityAggregation.prototype.getDates = function () {
            var _, date, ref, results;
            ref = this.get('availablePeriods');
            results = [];
            for (date in ref) {
                _ = ref[date];
                results.push(date);
            }
            return results;
        };

        DayAvailabilityAggregation.prototype.getMinutesAvailable = function () {
            var aggregate, dailyPeriods;
            dailyPeriods = _.values(this.get('availablePeriods'));
            aggregate = _.map(dailyPeriods, function (ps) {
                var totalMinutes;
                totalMinutes = _.reduce(ps, (function (acc, p) {
                    return acc + p.getMinutesAvailable();
                }), 0);
                return {
                    totalMinutes: totalMinutes,
                    availableTimes: _.map(ps, function (ap) {
                        return [ap.get('startTime'), ap.get('endTime')];
                    })
                };
            });
            if (_.all(_.rest(aggregate), function (a) {
                return _.isEqual(aggregate[0], a);
            })) {
                return aggregate[0].totalMinutes;
            }
            return null;
        };

        DayAvailabilityAggregation.prototype.getMinutesBooked = function () {
            var aggregate, durations;
            durations = _.values(this.get('durations'));
            aggregate = _.map(durations, function (ds) {
                return {
                    minutes: _.chain(ds).filter(function (d) {
                        return d.isConfirmed();
                    }).map(function (d) {
                        return d.getMinutes();
                    }).value()
                };
            });
            if (_.all(_.rest(aggregate), function (a) {
                return _.isEqual(aggregate[0], a);
            })) {
                return _.chain(durations[0]).map(function (d) {
                    return d.getMinutes();
                }).reduce((function (acc, m) {
                    return acc + m;
                }), 0).value();
            }
            return null;
        };

        DayAvailabilityAggregation.prototype.availabilityConsistent = function () {
            var mins;
            mins = this.getMinutesAvailable();
            return mins !== null && mins >= 0;
        };

        DayAvailabilityAggregation.prototype.totalAvailabilityConsistent = function () {
            var mins;
            mins = this.getTotalMinutesAvailable();
            return mins !== null && mins >= 0;
        };

        DayAvailabilityAggregation.prototype.bookingsConsistent = function () {
            var mins;
            mins = this.getMinutesBooked();
            return mins !== null && mins >= 0;
        };

        DayAvailabilityAggregation.prototype.downtimesConsistent = function () {
            var currentArray, date, downtimes, i, index, len, ref, timeRange, timeRangeArray;
            downtimes = _.values(this.get('downtimes'));
            if (downtimes.length === 0) {
                return true;
            }
            currentArray = downtimes[0];
            ref = this.get('downtimes');
            for (date in ref) {
                timeRangeArray = ref[date];
                if (currentArray.length !== timeRangeArray.length) {
                    return false;
                }
                for (index = i = 0, len = currentArray.length; i < len; index = ++i) {
                    timeRange = currentArray[index];
                    if (!timeRange.isEqual(timeRangeArray[index])) {
                        return false;
                    }
                }
                currentArray = timeRangeArray;
            }
            return true;
        };

        DayAvailabilityAggregation.prototype.overtimesConsistent = function () {
            var aggregate, overtimes;
            if (this.overtimeSet) {
                return true;
            }
            overtimes = _.values(this.get('overtimes'));
            if (overtimes.length === 0) {
                return true;
            }
            aggregate = _.map(overtimes, function (ot) {
                return {
                    minutes: _.chain(ot).map(function (o) {
                        return o.getMinutesAvailable();
                    }).value()
                };
            });
            return _.all(_.rest(aggregate), function (a) {
                return _.isEqual(aggregate[0], a);
            });
        };

        DayAvailabilityAggregation.prototype.totalAvailabilityAndBookingsConsistent = function () {
            return this.totalAvailabilityConsistent() && this.bookingsConsistent();
        };

        DayAvailabilityAggregation.prototype.totalAvailabilityAndDowntimeConsistent = function () {
            return this.totalAvailabilityConsistent() && this.downtimesConsistent();
        };

        DayAvailabilityAggregation.prototype.availabilityAndDowntimeConsistent = function () {
            return this.availabilityConsistent() && this.downtimesConsistent();
        };

        DayAvailabilityAggregation.prototype.variesFromNormalAvailability = function () {
            var currentPeriods, defaultPeriods;
            currentPeriods = this.getFirstAvailablePeriods().models;
            defaultPeriods = this.getFirstDefaultPeriods().models;
            if (currentPeriods.length !== defaultPeriods.length) {
                return true;
            }
            return defaultPeriods.some(function (period, index) {
                return !period.getTimeRange().isEqual(currentPeriods[index].getTimeRange());
            });
        };

        DayAvailabilityAggregation.prototype.getFirstAvailablePeriods = function () {
            var k, ref, v;
            if (this._aps) {
                return this._aps;
            }
            ref = this.get('availablePeriods');
            for (k in ref) {
                v = ref[k];
                this._aps = new RG.Collections.AvailablePeriods(this._deepCloneModels(v, RG.Models.CustomAvailablePeriod));
                this._aps.on("add remove reset", (function (_this) {
                    return function () {
                        return _this._aps.isDirty = true;
                    };
                })(this));
                return this._aps;
            }
            return new RG.Collections.AvailablePeriods;
        };

        DayAvailabilityAggregation.prototype.getFirstDefaultPeriods = function () {
            var k, ref, v;
            if (this._daps) {
                return this._daps;
            }
            ref = this.get('originalAvailablePeriods');
            for (k in ref) {
                v = ref[k];
                this._daps = new RG.Collections.AvailablePeriods(this._deepCloneModels(v, RG.Models.CustomAvailablePeriod));
                return this._daps;
            }
            return new RG.Collections.AvailablePeriods;
        };

        DayAvailabilityAggregation.prototype.getFirstDowntimes = function () {
            var k, ref, v;
            if (this._downtimes) {
                return this._downtimes;
            }
            ref = this.get('downtimes');
            for (k in ref) {
                v = ref[k];
                this._downtimes = v;
                return this._downtimes;
            }
            return this._downtimes = [];
        };

        DayAvailabilityAggregation.prototype.hasAvailabilityChanged = function () {
            return this.getFirstAvailablePeriods().isDirty;
        };

        DayAvailabilityAggregation.prototype.resetAvailability = function () {
            this.set('availablePeriods', this.get('originalAvailablePeriods'));
            this._aps = null;
            return this.hasAvailabilityChanged = function () {
                return true;
            };
        };

        DayAvailabilityAggregation.prototype.clearVaryingAvailability = function () {
            var k, ref, v;
            ref = this.get('availablePeriods');
            for (k in ref) {
                v = ref[k];
                this.get('availablePeriods')[k] = [];
            }
            this._aps = null;
            this._overtimes = null;
            this.availabilityCleared = true;
            return this.trigger('availabilityReset');
        };

        DayAvailabilityAggregation.prototype.getFirstOvertimes = function () {
            var k, ref, v;
            if (this._overtimes) {
                return this._overtimes;
            }
            ref = this.get('overtimes');
            for (k in ref) {
                v = ref[k];
                this._overtimes = new RG.Collections.Overtimes(this._deepCloneModels(v, RG.Models.Overtime));
                return this._overtimes;
            }
        };

        DayAvailabilityAggregation.prototype.overtime = function () {
            var ref, time;
            if (this.getFirstOvertimes().length > 0) {
                time = (ref = this.getFirstOvertimes().first()) != null ? ref.get('duration') : void 0;
            } else {
                time = 0;
            }
            return [time, this.getCurrentMinutesAvailable()].min();
        };

        DayAvailabilityAggregation.prototype.setOvertime = function (value) {
            this.overtimeSet = true;
            return this.getFirstOvertimes().each(function (model) {
                return model.set({
                    duration: value
                });
            });
        };

        DayAvailabilityAggregation.prototype.hasOvertimeChanged = function () {
            var aps, durationFunc, equalDurations, k, newDurations, originalDurations, ref;
            equalDurations = [];
            durationFunc = function (overtime) {
                return {
                    duration: overtime.get('duration')
                };
            };
            newDurations = this.getFirstOvertimes().map(durationFunc);
            ref = this.get('overtimes');
            for (k in ref) {
                aps = ref[k];
                originalDurations = _.map(aps, durationFunc);
                equalDurations.push(_.isEqual(originalDurations, newDurations));
            }
            return !_.all(equalDurations, function (x) {
                return x;
            });
        };

        DayAvailabilityAggregation.prototype.hasNoAvailability = function () {
            return this.getCurrentMinutesAvailable() <= 0;
        };

        DayAvailabilityAggregation.prototype.getDateRange = function () {
            return this.get('dateRange');
        };

        DayAvailabilityAggregation.prototype._deepCloneModels = function (models, klass) {
            var clonedModels, i, len, model;
            clonedModels = [];
            for (i = 0, len = models.length; i < len; i++) {
                model = models[i];
                clonedModels.push(new klass(model.attributes));
            }
            return clonedModels;
        };

        DayAvailabilityAggregation.prototype._totalMinutesFromPeriodsAndDowntimes = function (periods, downtimes) {
            if (downtimes.length === 0) {
                return this._totalMinutesFromPeriods(periods);
            }
            return _.reduce(periods, function (acc, ap) {
                return acc + ap.getTimeRange().subtractAll(downtimes);
            }, 0);
        };

        DayAvailabilityAggregation.prototype._totalMinutesFromPeriods = function (periods) {
            return _.reduce(periods, function (acc, ap) {
                return acc + ap.getMinutesAvailable();
            }, 0);
        };

        return DayAvailabilityAggregation;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.FilterCategory = (function (superClass) {
        extend(FilterCategory, superClass);

        function FilterCategory() {
            return FilterCategory.__super__.constructor.apply(this, arguments);
        }

        FilterCategory.prototype.initialize = function (options) {
            this.optionGroups = new RG.Collections.OptionGroups;
            return this.optionGroups.category = this;
        };

        FilterCategory.prototype.getName = function () {
            return this.get("name");
        };

        return FilterCategory;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    RG.Models.NullBookingTarget = (function () {
        function NullBookingTarget() { }

        NullBookingTarget.prototype.getTypeDescription = function () {
            return "";
        };

        NullBookingTarget.prototype.getLongCaption = function () {
            return "";
        };

        NullBookingTarget.prototype.getLongDescription = function () {
            return "";
        };

        NullBookingTarget.prototype.getName = function () {
            return "";
        };

        NullBookingTarget.prototype.toString = function () {
            return "";
        };

        return NullBookingTarget;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.NullDuration = (function (superClass) {
        extend(NullDuration, superClass);

        function NullDuration() {
            return NullDuration.__super__.constructor.apply(this, arguments);
        }

        NullDuration.prototype.getCaption = function () {
            return "";
        };

        NullDuration.prototype.getMinutes = function () {
            return 0;
        };

        NullDuration.prototype.getRepeatCaption = function () {
            return "";
        };

        NullDuration.prototype.getLongRepeatCaption = function () {
            return "";
        };

        NullDuration.prototype.isConfirmed = function () {
            return true;
        };

        return NullDuration;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.Project = (function (superClass) {
        var ZERO_WIDTH_SPACE;

        extend(Project, superClass);

        function Project() {
            return Project.__super__.constructor.apply(this, arguments);
        }

        ZERO_WIDTH_SPACE = "\u200B";

        Project.prototype.getTypeDescription = function () {
            return "Project";
        };

        Project.prototype.getLongDescription = function () {
            var caption;
            caption = this.getNameWithProjectCode();
            if (this.get('client') != null) {
                caption = caption + (" (" + (this.escape('client')) + ")");
            }
            return caption;
        };

        Project.prototype.getName = function () {
            return this.escape('name');
        };

        Project.prototype.getProjectCode = function () {
            if (this.get('project_code')) {
                return " (" + ZERO_WIDTH_SPACE + this.escape('project_code') + ZERO_WIDTH_SPACE + ")";
            } else {
                return "";
            }
        };

        Project.prototype.getClientName = function () {
            return this.get('client') && this.get('client').getName();
        };

        Project.prototype.getNameWithProjectCode = function () {
            return this.getName() + this.getProjectCode();
        };

        Project.prototype.isBillableByDefault = function () {
            return this.get('default_billable');
        };

        Project.prototype.getLongCaption = function () {
            var caption;
            caption = this.getNameWithProjectCode();
            if (this.get('client') != null) {
                caption = caption + "<br>" + this.get('client');
            }
            return caption;
        };

        Project.prototype.toString = function (type) {
            var name;
            name = type === 'short' ? this.getName() : this.getName() + this.getProjectCode();
            if (this.get('client') != null) {
                return name + " | " + this.get('client');
            } else {
                return name;
            }
        };

        return Project;

    })(RG.Models.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.SavedFilter = (function (superClass) {
        extend(SavedFilter, superClass);

        function SavedFilter() {
            return SavedFilter.__super__.constructor.apply(this, arguments);
        }

        SavedFilter.prototype.urlRoot = function () {
            return (RG.getApiRoot()) + "/saved_filters";
        };

        SavedFilter.prototype.getFilter = function () {
            return JSON.parse(this.get("filter_json"));
        };

        return SavedFilter;

    })(Backbone.Model);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Models.VaryingAvailablePeriod = (function (superClass) {
        extend(VaryingAvailablePeriod, superClass);

        function VaryingAvailablePeriod() {
            return VaryingAvailablePeriod.__super__.constructor.apply(this, arguments);
        }

        VaryingAvailablePeriod.prototype.toString = function () {
            return 'Availability varies';
        };

        VaryingAvailablePeriod.prototype.isEditable = function () {
            return false;
        };

        return VaryingAvailablePeriod;

    })(Backbone.Model);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Base = (function (superClass) {
        extend(Base, superClass);

        function Base(models, options) {
            if (options) {
                this.model = options.model;
            }
            this._reset();
            this.initialize.apply(this, arguments);
            if (models) {
                this.reset(models, {
                    silent: true
                });
            }
        }

        Base.prototype.setModels = function (array) {
            return this.reset(array);
        };

        return Base;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.AbstractTimePeriods = (function (superClass) {
        extend(AbstractTimePeriods, superClass);

        function AbstractTimePeriods() {
            return AbstractTimePeriods.__super__.constructor.apply(this, arguments);
        }

        AbstractTimePeriods.prototype.calculator = function () {
            return this.calc != null ? this.calc : this.calc = new RG.Utils.TimePeriodsCalculator(this);
        };

        AbstractTimePeriods.prototype.getMinutesAvailableInDateRange = function (dateRange) {
            return this.calculator().availableMinutes(dateRange);
        };

        AbstractTimePeriods.prototype.removeForDate = function (date) {
            throw "Implement removeForDate in subclasses";
        };

        return AbstractTimePeriods;

    })(RG.Collections.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.AvailablePeriods = (function (superClass) {
        extend(AvailablePeriods, superClass);

        function AvailablePeriods() {
            return AvailablePeriods.__super__.constructor.apply(this, arguments);
        }

        return AvailablePeriods;

    })(RG.Collections.AbstractTimePeriods);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Bookers = (function (superClass) {
        extend(Bookers, superClass);

        function Bookers() {
            return Bookers.__super__.constructor.apply(this, arguments);
        }

        Bookers.prototype.comparator = function (b) {
            return b.get('name');
        };

        return Bookers;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Bookings = (function (superClass) {
        extend(Bookings, superClass);

        function Bookings() {
            this.predictWaitingList = bind(this.predictWaitingList, this);
            return Bookings.__super__.constructor.apply(this, arguments);
        }

        Bookings.prototype.initialize = function (options) {
            Bookings.__super__.initialize.apply(this, arguments);
            this._forDateDurations = {};
            this._overlapsDateBookings = {};
            return this.on('add remove reset change', (function (_this) {
                return function () {
                    _this._forDateDurations = {};
                    return _this._overlapsDateBookings = {};
                };
            })(this));
        };

        Bookings.prototype.forDate = function (date) {
            var booking, bookings, dateRange, i, len, ref;
            bookings = [];
            ref = this.models;
            for (i = 0, len = ref.length; i < len; i++) {
                booking = ref[i];
                dateRange = booking.getDateRange();
                if (dateRange.isValid() && dateRange.includes(date)) {
                    bookings.push(booking);
                }
            }
            return bookings;
        };

        Bookings.prototype.startsOnDate = function (date) {
            var booking, bookings, i, len, ref;
            bookings = [];
            ref = this.forDate(date);
            for (i = 0, len = ref.length; i < len; i++) {
                booking = ref[i];
                if (RG.Utils.DateComparator.equalsYMD(date, booking.getDateRange().startDate)) {
                    bookings.push(booking);
                }
            }
            return bookings;
        };

        Bookings.prototype.overlapsDate = function (date) {
            var key;
            key = date.toString();
            if (this._overlapsDateBookings[key]) {
                return this._overlapsDateBookings[key];
            }
            return this._overlapsDateBookings[key] = this.filter(function (booking) {
                var dateRange;
                dateRange = booking.getDateRange();
                return dateRange.startDate < date && dateRange.endDate >= date;
            });
        };

        Bookings.prototype.getDurationsForDate = function (date) {
            var b, bookings, d, durations, i, j, key, len, len1, ref;
            key = date.getTime();
            if (this._forDateDurations[key]) {
                return this._forDateDurations[key];
            }
            bookings = this.forDate(date);
            durations = [];
            for (i = 0, len = bookings.length; i < len; i++) {
                b = bookings[i];
                ref = b.durations.models;
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    d = ref[j];
                    if (RG.Utils.DateComparator.equalsYMD(d.attributes.date, date)) {
                        durations.push(d);
                    }
                }
            }
            return this._forDateDurations[key] = durations;
        };

        Bookings.prototype.predictWaitingList = function () {
            this.models.forEach((function (_this) {
                return function (b) {
                    return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(_this.resource, b.getStartDate(), b.getEndDate()), function () {
                        return b.durations.predictWaitingList();
                    });
                };
            })(this));
            return RG.resizeCards();
        };

        Bookings.prototype.getLayerCount = function () {
            var layer;
            layer = this.map(function (b) {
                return b.layer;
            }).max();
            if (layer >= 0) {
                return layer + 1;
            } else {
                return 0;
            }
        };

        return Bookings;

    })(RG.Collections.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.CustomAvailablePeriods = (function (superClass) {
        extend(CustomAvailablePeriods, superClass);

        function CustomAvailablePeriods() {
            return CustomAvailablePeriods.__super__.constructor.apply(this, arguments);
        }

        CustomAvailablePeriods.prototype.removeForDate = function (date) {
            var models;
            models = this.select((function (_this) {
                return function (cap) {
                    return RG.Utils.DateComparator.equalsYMD(cap.get('date'), date);
                };
            })(this));
            return this.remove(models, {
                silent: true
            });
        };

        return CustomAvailablePeriods;

    })(RG.Collections.AbstractTimePeriods);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.CustomFieldOptions = (function (superClass) {
        extend(CustomFieldOptions, superClass);

        function CustomFieldOptions() {
            return CustomFieldOptions.__super__.constructor.apply(this, arguments);
        }

        return CustomFieldOptions;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.CustomFields = (function (superClass) {
        extend(CustomFields, superClass);

        function CustomFields() {
            return CustomFields.__super__.constructor.apply(this, arguments);
        }

        return CustomFields;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.DowntimeTypes = (function (superClass) {
        extend(DowntimeTypes, superClass);

        function DowntimeTypes() {
            return DowntimeTypes.__super__.constructor.apply(this, arguments);
        }

        DowntimeTypes.prototype.model = RG.Models.DowntimeType;

        return DowntimeTypes;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Downtimes = (function (superClass) {
        extend(Downtimes, superClass);

        function Downtimes() {
            return Downtimes.__super__.constructor.apply(this, arguments);
        }

        Downtimes.prototype.model = RG.Models.Downtime;

        Downtimes.prototype.initialize = function (options) {
            Downtimes.__super__.initialize.apply(this, arguments);
            this._forDateDowntimes = {};
            this._overlapsDateDowntimes = {};
            this._forResourceIndex = {};
            this._forDateInTimeZoneIndex = {};
            this.on('add remove reset change', (function (_this) {
                return function () {
                    _this._forDateDowntimes = {};
                    _this._overlapsDateDowntimes = {};
                    _this._forResourceIndex = {};
                    return _this._forDateInTimeZoneIndex = {};
                };
            })(this));
            this.on('add', function (d) {
                var i, len, ref, results, rid;
                if (d && d.get('resourceIds')) {
                    ref = d.get('resourceIds');
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        rid = ref[i];
                        results.push(this.trigger("add:resource_id:" + rid, d));
                    }
                    return results;
                }
            });
            return this.on('remove', function (d) {
                var i, len, ref, results, rid;
                if (d && d.get('resourceIds')) {
                    ref = d.get('resourceIds');
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        rid = ref[i];
                        results.push(this.trigger("remove:resource_id:" + rid, d));
                    }
                    return results;
                }
            });
        };

        Downtimes.prototype.forResource = function (resource) {
            var base, name;
            return (base = this._forResourceIndex)[name = resource.id] != null ? base[name] : base[name] = this.models.filter(function (downtime) {
                return downtime.get('resourceIds').indexOf(resource.id) !== -1;
            });
        };

        Downtimes.prototype.forYear = function (year) {
            return this.models.filter(function (downtime) {
                return downtime.inYear(year);
            });
        };

        Downtimes.prototype.forDate = function (date) {
            var key;
            key = date.toString();
            if (this._forDateDowntimes[key]) {
                return this._forDateDowntimes[key];
            }
            return this._forDateDowntimes[key] = this.models.filter(function (downtime) {
                return downtime.isValidOn(date);
            });
        };

        Downtimes.prototype.inTimeZone = function (timeZone) {
            var collection, downtimes;
            downtimes = this.models.map(function (downtime) {
                return downtime.inTimeZone(timeZone);
            });
            collection = new RG.Collections.Downtimes;
            collection.models = downtimes;
            collection.length = downtimes.length;
            return collection;
        };

        Downtimes.prototype.forDateInTimeZone = function (date, timeZone) {
            var base, name, offset;
            offset = (timeZone != null ? timeZone.attributes.offset : void 0) || -1;
            return (base = this._forDateInTimeZoneIndex)[name = [date.valueOf(), offset]] != null ? base[name] : base[name] = this.models.filter(function (downtime) {
                return downtime.inTimeZone(timeZone).isValidOn(date);
            });
        };

        Downtimes.prototype.durationsForDateInTimeZone = function (date, timeZone) {
            var downtime, duration, durations, i, j, len, len1, ref, ref1;
            durations = [];
            ref = this.forDateInTimeZone(date, timeZone);
            for (i = 0, len = ref.length; i < len; i++) {
                downtime = ref[i];
                ref1 = downtime.inTimeZone(timeZone).getDurations(downtime);
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    duration = ref1[j];
                    if (duration.containsDate(date)) {
                        durations.push(duration);
                    }
                }
            }
            return durations;
        };

        Downtimes.prototype.startsOnDateInTimeZone = function (date, timeZone) {
            var downtime, downtimes, i, len, ref;
            downtimes = [];
            ref = this.forDateInTimeZone(date, timeZone);
            for (i = 0, len = ref.length; i < len; i++) {
                downtime = ref[i];
                if (RG.Utils.DateComparator.equalsYMD(date, downtime.inTimeZone(timeZone).getDateRange().startDate)) {
                    downtimes.push(downtime);
                }
            }
            return downtimes;
        };

        Downtimes.prototype.startsOnDate = function (date) {
            var downtime, downtimes, i, len, ref;
            downtimes = [];
            ref = this.forDate(date);
            for (i = 0, len = ref.length; i < len; i++) {
                downtime = ref[i];
                if (RG.Utils.DateComparator.equalsYMD(date, downtime.getDateRange().startDate)) {
                    downtimes.push(downtime);
                }
            }
            return downtimes;
        };

        Downtimes.prototype.overlapsDateInTimeZone = function (date, timeZone) {
            var key;
            key = date.toString();
            if (this._overlapsDateDowntimes[key]) {
                return this._overlapsDateDowntimes[key];
            }
            return this._overlapsDateDowntimes[key] = this.filter(function (downtime) {
                var dateRange;
                dateRange = downtime.inTimeZone(timeZone).getDateRange();
                return dateRange.startDate < date && dateRange.endDate >= date;
            });
        };

        Downtimes.prototype.mergedTimeRangesForDate = function (date) {
            var timeRange, timeRanges;
            timeRanges = this.inTimeZone(this.resource.get('timeZone')).forDate(date).map(function (downtime) {
                return downtime.getTimeRange(date);
            });
            if (timeRanges.length < 2) {
                return timeRanges;
            }
            timeRange = timeRanges.pop();
            return timeRange.merge.apply(timeRange, timeRanges);
        };

        return Downtimes;

    })(RG.Collections.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.FilterOptions = (function (superClass) {
        extend(FilterOptions, superClass);

        function FilterOptions() {
            return FilterOptions.__super__.constructor.apply(this, arguments);
        }

        return FilterOptions;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Overtimes = (function (superClass) {
        extend(Overtimes, superClass);

        function Overtimes() {
            return Overtimes.__super__.constructor.apply(this, arguments);
        }

        Overtimes.prototype.removeForDate = function (date) {
            var overtimes;
            overtimes = this.select(function (overtime) {
                return RG.Utils.DateComparator.equalsYMD(overtime.get('date'), date);
            });
            return this.remove(overtimes, {
                silent: true
            });
        };

        return Overtimes;

    })(RG.Collections.AbstractTimePeriods);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.ResourceInstances = (function (superClass) {
        extend(ResourceInstances, superClass);

        function ResourceInstances() {
            return ResourceInstances.__super__.constructor.apply(this, arguments);
        }

        ResourceInstances.prototype.model = RG.Models.ResourceInstance;

        ResourceInstances.prototype.comparator = function (a, b) {
            var left, localeOptions, right;
            left = a.get('name') || '';
            right = b.get('name') || '';
            localeOptions = {
                sensitivity: 'base',
                numeric: true
            };
            return left.localeCompare(right, 'en', localeOptions);
        };

        ResourceInstances.prototype.setVisibleResources = function (resources) {
            this.models.forEach(function (ri) {
                return ri.visible = false;
            });
            resources.forEach(function (ri) {
                return ri.visible = true;
            });
            return this.trigger('change:visible');
        };

        return ResourceInstances;

    })(RG.Collections.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.ResourceTypes = (function (superClass) {
        extend(ResourceTypes, superClass);

        function ResourceTypes() {
            return ResourceTypes.__super__.constructor.apply(this, arguments);
        }

        return ResourceTypes;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.TimeZones = (function (superClass) {
        extend(TimeZones, superClass);

        function TimeZones() {
            return TimeZones.__super__.constructor.apply(this, arguments);
        }

        TimeZones.prototype.model = RG.Models.TimeZone;

        return TimeZones;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Clients = (function (superClass) {
        extend(Clients, superClass);

        function Clients() {
            return Clients.__super__.constructor.apply(this, arguments);
        }

        Clients.prototype.comparator = function (c) {
            return c.toString().toLowerCase();
        };

        return Clients;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.DayAvailabilityAggregations = (function (superClass) {
        extend(DayAvailabilityAggregations, superClass);

        function DayAvailabilityAggregations() {
            return DayAvailabilityAggregations.__super__.constructor.apply(this, arguments);
        }

        DayAvailabilityAggregations.prototype.comparator = function (agg) {
            return agg.get('weekDay') || 2e308;
        };

        return DayAvailabilityAggregations;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Durations = (function (superClass) {
        extend(Durations, superClass);

        function Durations(options) {
            this.predictWaitingList = bind(this.predictWaitingList, this);
            Durations.__super__.constructor.apply(this, arguments);
            this._betweenDates = {};
            this.on('add remove reset change', (function (_this) {
                return function (ignore) {
                    var ref;
                    if (ignore === true) {
                        return;
                    }
                    _this._betweenDates = {};
                    if (_this.booking && !_this.booking.transient) {
                        if ((ref = _this.booking.collection) != null) {
                            ref.trigger('reset');
                        }
                    }
                };
            })(this));
            return;
        }

        Durations.prototype.forDate = function (date) {
            return this.filter(function (duration) {
                return RG.Utils.DateComparator.equalsYMD(duration.get("date"), date);
            });
        };

        Durations.prototype.betweenDates = function (startDate, endDate) {
            var durations, key, minutes, newerDate, olderDate;
            key = new RG.Utils.DateRange(startDate, endDate).toString();
            if (this._betweenDates[key]) {
                return this._betweenDates[key];
            }
            olderDate = false;
            newerDate = false;
            minutes = null;
            durations = this.filter(function (d) {
                if (!minutes) {
                    minutes = d.attributes.minutes;
                }
                if (!olderDate) {
                    olderDate = d.attributes.date < startDate;
                }
                if (!newerDate) {
                    newerDate = d.attributes.date > endDate;
                }
                return d.attributes.date >= startDate && d.attributes.date <= endDate;
            });
            if (durations.length === 0 && olderDate && newerDate) {
                durations = [this._anchorDuration(startDate, minutes), this._anchorDuration(endDate, minutes)];
            }
            return this._betweenDates[key] = durations;
        };

        Durations.prototype.setColor = function (color) {
            this.each(function (d) {
                return d.set({
                    color: color
                });
            });
        };

        Durations.prototype.predictWaitingList = function () {
            this.each(function (d) {
                return d.predictWaitingList();
            });
            return this.trigger('change', true);
        };

        Durations.prototype._anchorDuration = function (date, minutes) {
            var duration;
            duration = new RG.Models.Duration({
                minutes: 0,
                date: date,
                waiting: false
            });
            duration.transient = true;
            duration.realMinutes = minutes;
            duration.collection = this;
            return duration;
        };

        return Durations;

    })(RG.Collections.Base);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.FilterCategories = (function (superClass) {
        extend(FilterCategories, superClass);

        function FilterCategories() {
            return FilterCategories.__super__.constructor.apply(this, arguments);
        }

        return FilterCategories;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.OptionGroups = (function (superClass) {
        extend(OptionGroups, superClass);

        function OptionGroups() {
            return OptionGroups.__super__.constructor.apply(this, arguments);
        }

        return OptionGroups;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Projects = (function (superClass) {
        extend(Projects, superClass);

        function Projects() {
            return Projects.__super__.constructor.apply(this, arguments);
        }

        Projects.prototype.comparator = function (p) {
            return p.toString().toLowerCase();
        };

        return Projects;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.ResourceAvailabilityYears = (function (superClass) {
        extend(ResourceAvailabilityYears, superClass);

        function ResourceAvailabilityYears() {
            return ResourceAvailabilityYears.__super__.constructor.apply(this, arguments);
        }

        ResourceAvailabilityYears.prototype.model = RG.Models.ResourceAvailabilityYear;

        ResourceAvailabilityYears.prototype.totalUsedDays = function () {
            return _.reduce(this.models, function (memo, year) {
                return year.get('numberOfUsedDays');
            }, 0);
        };

        return ResourceAvailabilityYears;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.SavedFilters = (function (superClass) {
        extend(SavedFilters, superClass);

        function SavedFilters() {
            return SavedFilters.__super__.constructor.apply(this, arguments);
        }

        SavedFilters.prototype.comparator = function (sf) {
            var ref;
            return (ref = sf.get('name')) != null ? ref.toLowerCase() : void 0;
        };

        SavedFilters.prototype.initialize = function () {
            SavedFilters.__super__.initialize.apply(this, arguments);
            this.on("change:name", (function (_this) {
                return function () {
                    return _this.sort();
                };
            })(this));
        };

        return SavedFilters;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.UnitDurations = (function (superClass) {
        extend(UnitDurations, superClass);

        function UnitDurations() {
            return UnitDurations.__super__.constructor.apply(this, arguments);
        }

        UnitDurations.prototype.setColor = function (color) {
            var i, len, ref, ud;
            ref = this.models;
            for (i = 0, len = ref.length; i < len; i++) {
                ud = ref[i];
                ud.set({
                    color: color
                });
            }
        };

        return UnitDurations;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.UnitGroupings = (function (superClass) {
        extend(UnitGroupings, superClass);

        function UnitGroupings() {
            return UnitGroupings.__super__.constructor.apply(this, arguments);
        }

        UnitGroupings.prototype.initialize = function () {
            this.on('add', this.addToUnitCollection);
            this.on('remove', this.removeFromUnitCollection);
        };

        UnitGroupings.prototype.comparator = function (pg) {
            return pg.dateRange.startDate;
        };

        UnitGroupings.prototype.getUnitCollection = function () {
            var subUnits, units;
            if (this._units != null) {
                return this._units;
            }
            units = new RG.Collections.Units();
            subUnits = _.flatten(_.map(this.models, function (pg) {
                return pg.getUnits().models;
            }));
            units.reset(subUnits);
            return this._units = units;
        };

        UnitGroupings.prototype.addToUnitCollection = function (group) {
            var units;
            units = group.getUnits();
            if (this.getUnitCollection().models.length && units.models[0].date < this.getUnitCollection().models[0].date) {
                return this._eachUnitReverse(group, (function (_this) {
                    return function (unit) {
                        return _this.getUnitCollection().unshift(unit);
                    };
                })(this));
            } else {
                return this._eachUnit(group, (function (_this) {
                    return function (unit) {
                        return _this.getUnitCollection().add(unit);
                    };
                })(this));
            }
        };

        UnitGroupings.prototype.removeFromUnitCollection = function (group) {
            this._eachUnit(group, (function (_this) {
                return function (unit) {
                    _this.getUnitCollection().remove(unit);
                };
            })(this));
        };

        UnitGroupings.prototype._eachUnit = function (group, func) {
            group.getUnits().each(func);
        };

        UnitGroupings.prototype._eachUnitReverse = function (group, func) {
            var i, j, ref, units;
            units = group.getUnits().models;
            for (i = j = ref = units.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
                func(units[i]);
            }
        };

        return UnitGroupings;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Collections.Units = (function (superClass) {
        extend(Units, superClass);

        function Units() {
            return Units.__super__.constructor.apply(this, arguments);
        }

        Units.prototype.initialize = function () {
            this.on('add', this.notifyAppendOrPrepend);
        };

        Units.prototype.notifyAppendOrPrepend = function (model, collection, options) {
            if (this.models.length > 1 && model === this.models[0]) {
                this.trigger('prepend', model, collection, options);
            } else {
                this.trigger('append', model, collection, options);
            }
        };

        return Units;

    })(Backbone.Collection);

}).call(this);
;
(function () {
    RG.Utils.BookingCommandFactory = (function () {
        function BookingCommandFactory() { }

        BookingCommandFactory.prototype.createDragBookingCommand = function (resource, booking, originalResource, originalDurations, newDurations, dates, bookingDuration, originalAttributes, rendererLock) {
            var command;
            booking.set({
                startDate: dates[0],
                endDate: dates[dates.length - 1],
                saving: true
            });
            booking.durations.reset(newDurations);
            originalResource.bookings.remove(booking);
            resource.bookings.add(booking);
            originalResource.bookings.trigger('add');
            command = new RG.Commands.UpdateBookingCommand({
                booking: booking,
                resource: resource,
                startDate: dates[0],
                endDate: dates[dates.length - 1],
                bookingDuration: bookingDuration,
                successCallback: (function (_this) {
                    return function (data) {
                        var duration, i, len, ref, responseDuration;
                        $(".resources--cal-unit.drag-drop-target").removeClass("drag-drop-target");
                        booking.set({
                            startDate: RG.Utils.BookingMerger.getDateFromStr(data.start_date),
                            endDate: RG.Utils.BookingMerger.getDateFromStr(data.end_date),
                            refreshable: data.refreshable,
                            saving: false
                        });
                        ref = booking.durations.models;
                        for (i = 0, len = ref.length; i < len; i++) {
                            duration = ref[i];
                            responseDuration = _.find(data.durations, function (d) {
                                return d.date === RG.Utils.DateFormatter.getISODate(duration.get('date'));
                            });
                            if (responseDuration) {
                                duration.set({
                                    waiting: responseDuration.waiting
                                });
                            }
                        }
                        window.update();
                        RG.renderer.unlock(rendererLock);
                    };
                })(this)
            });
            command.removedDatesCallback = (function (_this) {
                return function (removedDates, callback) {
                    var removedDatesDialog;
                    removedDatesDialog = new RG.Views.Dialogs.RemovedAvailabilityDates({
                        resource: resource,
                        removedAvailabilityDates: removedDates
                    });
                    return _this._waitingPopover(resource, new Date(removedDates[0]), removedDatesDialog, callback);
                };
            })(this);
            command.waitingCallback = (function (_this) {
                return function (waitingDates) {
                    var waitingConfirmation;
                    waitingConfirmation = new RG.Views.Dialogs.WaitingListConfirmation({
                        resource: resource,
                        waitingDates: waitingDates,
                        duration: newDurations[0].getMinutes(),
                        startTime: newDurations[0].get('startTime'),
                        startDate: dates[0],
                        endDate: dates[dates.length - 1],
                        cancelCallback: function () {
                            booking.set(originalAttributes);
                            booking.durations.reset(originalDurations);
                            resource.bookings.remove(booking);
                            originalResource.bookings.add(booking);
                            resource.predictWaitingList();
                            if (originalResource !== resource) {
                                originalResource.predictWaitingList();
                            }
                            RG.renderer.unlock(rendererLock);
                        },
                        callback: function () {
                            var duration, i, len, ref;
                            ref = booking.durations.models;
                            for (i = 0, len = ref.length; i < len; i++) {
                                duration = ref[i];
                                if (waitingDates.indexOf(RG.Utils.DateFormatter.getISODate(duration.get('date'))) > -1) {
                                    duration.set({
                                        waiting: true
                                    });
                                }
                            }
                            command.forceWaiting = true;
                            command.execute();
                        }
                    });
                    _this._waitingPopover(resource, new Date(waitingDates[0]), waitingConfirmation);
                };
            })(this);
            command.archivedCallback = function (data) {
                RG.Utils.BookingService.reset(data, resource, booking, originalAttributes, originalDurations);
                resource.bookings.remove(booking);
                originalResource.bookings.add(booking);
            };
            return command;
        };

        BookingCommandFactory.prototype.createCopyBookingCommand = function (resource, booking, originalResource, originalDurations, newDurations, dates, bookingDuration, originalAttributes, rendererLock) {
            var command, dateRange, newBooking;
            newBooking = booking.clone();
            newBooking.set({
                id: null,
                startDate: dates[0],
                endDate: dates[dates.length - 1],
                saving: true
            });
            newBooking.durations.reset(newDurations);
            resource.bookings.add(newBooking);
            dateRange = new RG.Utils.DateRange(dates[0], dates[dates.length - 1]);
            bookingDuration = new RG.DTO.BookingDuration({
                startTime: newDurations[0].get('startTime'),
                duration: newDurations[0].getMinutes()
            });
            command = new RG.Commands.CreateBookingCommand({
                resource: resource,
                booker: booking.get('booker'),
                dateRange: dateRange,
                target: booking.getBookingTarget(),
                details: booking.get('notes'),
                bookingDuration: bookingDuration,
                billable: booking.get('billable'),
                successCallback: (function (_this) {
                    return function (data) {
                        newBooking.set({
                            id: data.id,
                            saving: false
                        });
                        RG.renderer.unlock(rendererLock);
                        window.update();
                    };
                })(this)
            });
            command.removedDatesCallback = (function (_this) {
                return function (removedDates, callback) {
                    var removedDatesDialog;
                    removedDatesDialog = new RG.Views.Dialogs.RemovedAvailabilityDates({
                        resource: resource,
                        removedAvailabilityDates: removedDates
                    });
                    return _this._waitingPopover(resource, new Date(removedDates[0]), removedDatesDialog, callback);
                };
            })(this);
            command.waitingCallback = (function (_this) {
                return function (waitingDates) {
                    var waitingConfirmation;
                    waitingConfirmation = new RG.Views.Dialogs.WaitingListConfirmation({
                        resource: resource,
                        waitingDates: waitingDates,
                        duration: newDurations[0].getMinutes(),
                        startTime: newDurations[0].get('startTime'),
                        startDate: dates[0],
                        endDate: dates[dates.length - 1],
                        cancelCallback: function () {
                            resource.bookings.remove(newBooking);
                            RG.renderer.unlock(rendererLock);
                        },
                        callback: function () {
                            var duration, i, len, ref;
                            ref = newBooking.durations.models;
                            for (i = 0, len = ref.length; i < len; i++) {
                                duration = ref[i];
                                if (waitingDates.indexOf(RG.Utils.DateFormatter.getISODate(duration.get('date'))) > -1) {
                                    duration.set({
                                        waiting: true
                                    });
                                }
                            }
                            command.forceWaiting = true;
                            command.execute();
                        }
                    });
                    _this._waitingPopover(resource, new Date(waitingDates[0]), waitingConfirmation);
                };
            })(this);
            command.archivedCallback = function (data) {
                RG.Utils.BookingService.reset(data, resource, newBooking, originalAttributes, originalDurations);
                resource.bookings.remove(newBooking);
            };
            return command;
        };

        BookingCommandFactory.prototype._waitingPopover = function (resource, date, waitingConfirmation, callback) {
            var placer, popover;
            if (callback == null) {
                callback = waitingConfirmation.cancelCallback;
            }
            placer = new RG.Utils.DatePopoverPlacer(resource, date);
            popover = new RG.Views.Dialogs.BookingClashPopover({
                removeAttachTo: true,
                attachTo: placer.createAnchor({
                    className: 'booking-clash-popover-anchor'
                }),
                body: waitingConfirmation,
                className: 'edit-booking-dropdown booking-clash-management-popover'
            });
            RG.Popovers.replace({
                popoverView: popover,
                removeCallback: callback
            });
        };

        return BookingCommandFactory;

    })();

}).call(this);
;
(function () {
    RG.Commands.CreateBookingCommand = (function () {
        function CreateBookingCommand(options) {
            this.account = options.account || RG.Utils.getCurrentAccount();
            this.resource = options.resource;
            this.booker = options.booker;
            this.dateRange = options.dateRange;
            this.target = options.target;
            this.billable = options.billable;
            this.details = options.details;
            this.bookingDuration = options.bookingDuration;
            this.waitingCallback = options.waitingCallback || function () { };
            this.successCallback = options.successCallback || function () { };
            this.removedDatesCallback = options.waitingCallback || function () { };
            this.errorCallback = options.errorCallback || function () { };
            this.archivedCallback = options.archivedCallback || function () { };
            this.forceWaiting = options.forceWaiting;
        }

        CreateBookingCommand.prototype.execute = function () {
            return Q.Promise((function (_this) {
                return function (resolve, reject, notify) {
                    RG.Utils.BookingDataParser.expirePolls();
                    //$.ajax("/v1/" + (_this.account.getSubdomain()) + "/bookings", {
                    $.ajax("http://localhost/EMRMAPI/bookings/POST", {
                        method: "POST",
                        headers: {
                            "X-CSRF-Token": RG.Utils.getCSRFToken()
                        },
                        data: _this._getParameters(),
                        dataType: 'json',
                        success: function (data) {
                            var data = {
                                "id": 10311639, "client_id": null, "project_id": null, "resource_id": 308777, "notes": "Welcome Message 1", "details": "Welcome Message 1", "start_date": "2017-12-12", "end_date": "2017-12-15", "billable": false,
                                "refreshable": false, "created_at": "2017-12-11T05:14:25.000Z", "updated_at": "2017-12-11T05:14:25.000Z", "booker": { "id": 147899, "name": "Viniston Arockiasamy", "email": "myprivcy2015@gmail.com", "color": null },
                                "durations": [{ "date": "2017-12-12", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-13", "duration": 480, "start_time": null, "end_time": null, "waiting": false },
                                { "date": "2017-12-14", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-15", "duration": 480, "start_time": null, "end_time": null, "waiting": false }],
                                "removed_availability_dates": []
                            }

                            var action;
                            RG.Popovers.done();
                            action = function () {
                                var ref;
                                _this.successCallback(data);
                                if ((ref = data.removed_availability_dates) != null ? ref.length : void 0) {
                                    return setTimeout(function () {
                                        return _this.removedDatesCallback(data.removed_availability_dates, data.id);
                                    }, 0);
                                }
                            };
                            RG.Utils.BookingDataParser.expirePolls();
                            return RG.renderer.renderAfter([
                                {
                                    fn: action,
                                    lock: new RG.Renderer.GlobalLock
                                }
                            ]);
                        },
                        error: function (xhr) {
                            var data, e;
                            data = null;
                            try {
                                data = JSON.parse(xhr.responseText);
                                if (data.waiting) {
                                    _this.waitingCallback(data.waiting_dates);
                                } else {
                                    _this.archivedCallback(data);
                                }
                            } catch (error) {
                                e = error;
                                _this.errorCallback(e, xhr);
                            }
                            return RG.Utils.BookingDataParser.expirePolls();
                        }
                    });
                    return resolve();
                };
            })(this));
        };

        CreateBookingCommand.prototype._getParameters = function () {
            var data;
            data = {
                resource_id: this.resource.id,
                booker_id: this.booker.id,
                start_date: RG.Utils.DateFormatter.getISODate(this.dateRange.startDate),
                end_date: RG.Utils.DateFormatter.getISODate(this.dateRange.endDate),
                billable: this.billable,
                details: this.details,
                duration: this.bookingDuration.duration,
                start_time: this.bookingDuration.startTime,
                allow_waiting: this.forceWaiting
            };
            this._assignProjectOrClient(data);
            return data;
        };

        CreateBookingCommand.prototype._assignProjectOrClient = function (data) {
            if (this.target) {
                if (this.target.constructor === RG.Models.Client) {
                    data.client_id = this.target.id;
                } else if (this.target.constructor === RG.Models.Project) {
                    data.project_id = this.target.id;
                }
            }
        };

        return CreateBookingCommand;

    })();

}).call(this);
;
(function () {
    RG.Commands.CreateDowntimeCommand = (function () {
        function CreateDowntimeCommand(options) {
            this.timeZones = options.timeZones;
            this.account = options.account;
            this.resources = options.resources;
            this.booker = options.booker;
            this.dateTimeRange = options.dateTimeRange;
            this.timeZone = options.timeZone;
            this.details = options.details;
            this.leave = options.leave;
            this.type = options.type;
            this.preExecuteCallback = options.preExecuteCallback || function () { };
            this.successCallback = options.successCallback || function () { };
            this.errorCallback = options.errorCallback || function () { };
            this.dataDateRange = RG.Variables.dataDateRange || this.dateTimeRange.dateRange;
            this.saveErrorCallback = options.saveErrorCallback || function () { };
        }

        CreateDowntimeCommand.prototype.execute = function (options) {
            var callbacks, downtime, params;
            if (options == null) {
                options = {};
            }
            params = this._getParameters();
            if (options["delete"] !== void 0) {
                params.delete_invalid_bookings = options["delete"];
            }
            callbacks = {
                successCallback: this.successCallback,
                errorCallback: this.errorCallback,
                saveErrorCallback: this.saveErrorCallback
            };
            downtime = this._buildDowntime(params);
            this.preExecuteCallback(downtime, this.getClashingBookings(), params.delete_invalid_bookings);
            RG.Utils.DowntimeService.createDowntime(downtime, params, callbacks)["catch"](function (err) {
                console.log(err.message);
            });
        };

        CreateDowntimeCommand.prototype.getClashingBookingsFromServer = function (options) {
            var params, req;
            params = this._getParameters();
            req = $.ajax("/v1/" + (this.account.getSubdomain()) + "/downtimes/clashes", {
                method: "POST",
                headers: {
                    "X-CSRF-Token": RG.Utils.getCSRFToken()
                },
                data: params,
                dataType: 'json',
                success: (function (_this) {
                    return function (data) {
                        var bookings;
                        if (parseInt(data.length, 10) > 0) {
                            bookings = data.map(function (object) {
                                var duration;
                                duration = new RG.Models.Duration(object);
                                return duration.collection = {
                                    collection: {
                                        booking: {
                                            getBooker: function () {
                                                return window.bookers.findWhere({
                                                    id: duration.attributes.booker_id
                                                });
                                            }
                                        }
                                    }
                                };
                            });
                            _this._clashingBookings = bookings;
                            if (typeof options.success === "function") {
                                options.success(bookings);
                            }
                        } else {
                            if (typeof options.fail === "function") {
                                options.fail();
                            }
                        }
                    };
                })(this)
            });
            return req;
        };

        CreateDowntimeCommand.prototype.getClashingBookings = function () {
            var allDurations, availabilityManager, availableMinutes, clashes, confirmedDurations, date, dateRange, dates, downtime, duration, i, j, k, len, len1, len2, ref, resource, timeBooked;
            clashes = [];
            ref = this.resources;
            for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                availabilityManager = new RG.Utils.AvailabilityManager({
                    resource: resource,
                    availablePeriods: resource.availablePeriods,
                    customAvailablePeriods: resource.customAvailablePeriods,
                    overtimes: resource.overtimes,
                    downtimes: new RG.Collections.Downtimes(resource.downtimes.map(function (downtime) {
                        return downtime.clone();
                    })),
                    timeZone: resource.getTimeZone(),
                    ignoreEvents: true
                });
                downtime = new RG.Models.Downtime({
                    resourcedIds: [resource.id],
                    from: this.dateTimeRange.dateRange.startDate,
                    to: this.dateTimeRange.dateRange.endDate,
                    timeZone: window.timeZones.findWhere({
                        name: this.timeZone
                    }),
                    startTime: this.dateTimeRange.timeRange.startTime,
                    endTime: this.dateTimeRange.timeRange.endTime
                }).inTimeZone(resource.getTimeZone());
                availabilityManager.downtimes.add(downtime);
                dateRange = downtime.getDateRange();
                dates = dateRange.getDates();
                for (j = 0, len1 = dates.length; j < len1; j++) {
                    date = dates[j];
                    allDurations = resource.bookings.getDurationsForDate(date);
                    confirmedDurations = allDurations.filter(function (d) {
                        return d.isConfirmed() && d.getMinutes() > 0;
                    }).sort(function (a, b) {
                        return a.getMinutes() - b.getMinutes();
                    });
                    availableMinutes = availabilityManager.getMinutesAvailableForDate(date);
                    timeBooked = 0;
                    for (k = 0, len2 = confirmedDurations.length; k < len2; k++) {
                        duration = confirmedDurations[k];
                        if ((duration.isFixed() && availabilityManager.intersectsWithDowntime(date, duration.getTimeRange())) || !this._fitsInFirstOrLastDate(duration, dateRange, date, downtime.startTime, downtime.endTime, availableMinutes, timeBooked)) {
                            clashes.push(duration);
                        } else {
                            timeBooked += duration.getMinutes();
                        }
                    }
                }
            }
            return this._clashingBookings = clashes;
        };

        CreateDowntimeCommand.prototype.willTouchBookings = function (options) {
            var clashes;
            if (options == null) {
                options = {};
            }
            this._buildDowntime(this._getParameters());
            if (this.outsideDataDateRange()) {
                this.getClashingBookingsFromServer(options);
            } else {
                clashes = this.getClashingBookings();
                if (clashes.length > 0) {
                    if (typeof options.success === "function") {
                        options.success(clashes);
                    }
                } else {
                    if (typeof options.fail === "function") {
                        options.fail();
                    }
                }
            }
        };

        CreateDowntimeCommand.prototype.outsideDataDateRange = function () {
            return !this.dataDateRange.contains(this.dateTimeRange.dateRange);
        };

        CreateDowntimeCommand.prototype._buildDowntime = function (options) {
            return this.downtime != null ? this.downtime : this.downtime = new RG.Models.Downtime({
                resourceIds: options.resource_ids,
                creatorId: options.creator_id,
                from: this.dateTimeRange.dateRange.startDate,
                to: this.dateTimeRange.dateRange.endDate,
                timeZone: this.timeZones.findWhere({
                    name: options.timezone
                }),
                startTime: options.start_time,
                endTime: options.end_time,
                details: options.details,
                leave: options.leave,
                downtimeType: this.type
            });
        };

        CreateDowntimeCommand.prototype._getParameters = function () {
            return this.params != null ? this.params : this.params = {
                resource_ids: _.map(this.resources, function (r) {
                    return r.id;
                }),
                creator_id: this.booker.id,
                from: RG.Utils.DateFormatter.getISODate(this.dateTimeRange.dateRange.startDate),
                to: RG.Utils.DateFormatter.getISODate(this.dateTimeRange.dateRange.endDate),
                start_time: this.dateTimeRange.timeRange.startTime,
                end_time: this.dateTimeRange.timeRange.endTime,
                details: this.details,
                leave: this.leave,
                timezone: this.timeZone,
                downtime_type_id: this.type ? this.type.id : null
            };
        };

        CreateDowntimeCommand.prototype._fitsInFirstOrLastDate = function (duration, dateRange, date, startTime, endTime, availableMinutes, timeBooked) {
            if (RG.Utils.DateComparator.equalsYMD(date, dateRange.startDate)) {
                return duration.endsBeforeTime(startTime) || timeBooked + duration.getMinutes() <= availableMinutes;
            } else if (RG.Utils.DateComparator.equalsYMD(date, dateRange.endDate)) {
                return duration.startsAfterTime(endTime) || timeBooked + duration.getMinutes() <= availableMinutes;
            } else {
                return false;
            }
        };

        return CreateDowntimeCommand;

    })();

}).call(this);
;
(function () {
    RG.Utils.DowntimeCommandFactory = (function () {
        function DowntimeCommandFactory() { }

        DowntimeCommandFactory.prototype.createUpdateCommand = function (downtime, account, resources, dateTimeRange, realDowntime, rendererLock) {
            return new RG.Commands.UpdateDowntimeCommand({
                downtime: downtime,
                account: account,
                booker: window.bookers.findWhere({
                    id: downtime.get('creatorId')
                }) || window.deletedBookers.findWhere({
                    id: downtime.get('creatorId')
                }) || {
                    id: window.currentUserId
                },
                resources: resources,
                dateTimeRange: dateTimeRange,
                details: downtime.get('details'),
                timeZones: window.timeZones,
                timeZone: downtime.getTimeZone().getParamValue(),
                type: downtime.getDowntimeType(),
                preExecuteCallback: function (dTime, durations, shouldDelete) {
                    RG.Popovers.done();
                    RG.Popovers.popoverActive = false;
                    RG.Popovers.locked = false;
                },
                successCallback: (function (_this) {
                    return function (dTime) {
                        var action;
                        RG.renderer.unlock(rendererLock);
                        action = function () {
                            realDowntime.set({
                                saving: false
                            });
                            return window.update();
                        };
                        RG.renderer.renderAfter([
                            {
                                fn: action,
                                lock: new RG.Renderer.GlobalLock
                            }
                        ]);
                    };
                })(this)
            });
        };

        DowntimeCommandFactory.prototype.createCommand = function (account, resources, dateTimeRange, newDowntime, rendererLock) {
            return new RG.Commands.CreateDowntimeCommand({
                account: account,
                booker: window.currentUserId,
                resources: resources,
                dateTimeRange: dateTimeRange,
                details: newDowntime.get('details'),
                timeZones: window.timeZones,
                timeZone: newDowntime.getTimeZone().getParamValue(),
                type: newDowntime.getDowntimeType(),
                preExecuteCallback: function (dTime, durations, shouldDelete) {
                    RG.Popovers.locked = false;
                    RG.Popovers.popoverActive = false;
                    RG.Popovers.done();
                },
                successCallback: (function (_this) {
                    return function (dTime) {
                        newDowntime.set({
                            saving: false,
                            id: dTime.id
                        });
                        RG.renderer.unlock(rendererLock);
                        window.update();
                        RG.renderer.unlock(rendererLock);
                    };
                })(this)
            });
        };

        return DowntimeCommandFactory;

    })();

}).call(this);
;
(function () {
    RG.Commands.ResetToNormalAvailabilityCommand = (function () {
        function ResetToNormalAvailabilityCommand(options) {
            this.dates = options.dates;
            this.resourceInstanceId = options.resourceInstanceId;
        }

        ResetToNormalAvailabilityCommand.prototype.execute = function () {
            return Q.Promise((function (_this) {
                return function (resolve, reject, notify) {
                    return $.ajax((RG.getApiRoot()) + "/custom_available_periods/reset", {
                        method: 'DELETE',
                        timeout: 30000,
                        headers: {
                            "X-CSRF-Token": RG.Utils.getCSRFToken()
                        },
                        data: {
                            dates: _this.dates,
                            resource_instance_id: _this.resourceInstanceId
                        },
                        success: function () {
                            return resolve("Availability reset");
                        }
                    });
                };
            })(this));
        };

        return ResetToNormalAvailabilityCommand;

    })();

}).call(this);
;
(function () {
    RG.Commands.UpdateAvailabilityCommand = (function () {
        function UpdateAvailabilityCommand(options) {
            this.account = options.account;
            this.resource = options.resource;
            this.changedDays = options.changedDays;
            this.dateRange = options.dateRange;
            this.forceWaiting = options.forceWaiting;
            this.preExecuteCallback = options.preExecuteCallback || function () { };
            this.successCallback = options.successCallback || function () { };
            this.dataDateRange = RG.Variables.dataDateRange || this.dateRange;
        }

        UpdateAvailabilityCommand.prototype.execute = function (options) {
            var params;
            if (options == null) {
                options = {};
            }
            this.preExecuteCallback(this.getClashingBookings(), options);
            params = this._getParameters();
            if (options["delete"] !== void 0) {
                params.delete_invalid_bookings = options["delete"];
            }
            return $.ajax("/v1/" + (this.account.getSubdomain()) + "/custom_available_periods", {
                contentType: 'application/json',
                method: "POST",
                headers: {
                    "X-CSRF-Token": RG.Utils.getCSRFToken()
                },
                data: JSON.stringify(params),
                dataType: 'json',
                success: (function (_this) {
                    return function (data) {
                        return _this.successCallback(data);
                    };
                })(this)
            });
        };

        UpdateAvailabilityCommand.prototype.getClashingBookingsFromServer = function (options) {
            var params;
            params = this._getParameters();
            return $.ajax("/v1/" + (this.account.getSubdomain()) + "/custom_available_periods/clashes", {
                contentType: 'application/json',
                method: "POST",
                headers: {
                    "X-CSRF-Token": RG.Utils.getCSRFToken()
                },
                data: JSON.stringify(params),
                dataType: 'json',
                success: (function (_this) {
                    return function (data) {
                        if (data.length > 0) {
                            _this._clashingBookings = [];
                            return options.success(data.length);
                        } else {
                            return options.fail();
                        }
                    };
                })(this),
                error: (function (_this) {
                    return function (xhr) {
                        var responseData;
                        return responseData = JSON.parse(xhr.responseText);
                    };
                })(this)
            });
        };

        UpdateAvailabilityCommand.prototype.willTouchBookings = function (options) {
            if (options == null) {
                options = {};
            }
            if (this.outsideDataDateRange()) {
                return this.getClashingBookingsFromServer(options);
            } else {
                if (this.getClashingBookings().length > 0) {
                    return options.success();
                } else {
                    return options.fail();
                }
            }
        };

        UpdateAvailabilityCommand.prototype.outsideDataDateRange = function () {
            return !this.dataDateRange.contains(this.dateRange);
        };

        UpdateAvailabilityCommand.prototype.getClashingBookings = function () {
            var aggregate, allDurations, availableMinutes, clashes, confirmedDurations, date, duration, i, indexedDays, isClash, j, len, len1, ref, ref1, timeBooked;
            if (this._clashingBookings) {
                return this._clashingBookings;
            }
            if (this.changedDays.length === 0) {
                return [];
            }
            indexedDays = _.groupBy(this.changedDays, function (d) {
                return d.get('weekDay');
            });
            clashes = [];
            ref = this.dateRange.getDates();
            for (i = 0, len = ref.length; i < len; i++) {
                date = ref[i];
                aggregate = (ref1 = indexedDays[date.getDay()]) != null ? ref1[0] : void 0;
                if (!aggregate) {
                    continue;
                }
                availableMinutes = aggregate.getCurrentMinutesAvailable();
                allDurations = this.resource.bookings.getDurationsForDate(date);
                confirmedDurations = _.filter(allDurations, function (d) {
                    return d.isConfirmed();
                });
                timeBooked = 0;
                for (j = 0, len1 = confirmedDurations.length; j < len1; j++) {
                    duration = confirmedDurations[j];
                    isClash = false;
                    if (duration.isFixed()) {
                        isClash = !aggregate.getFirstAvailablePeriods().any(function (ap) {
                            return ap.contains(duration.getTimeRange());
                        });
                    }
                    if (isClash || timeBooked + duration.getMinutes() > availableMinutes) {
                        clashes.push(duration);
                    }
                    timeBooked += duration.getMinutes();
                }
            }
            return this._clashingBookings = clashes;
        };

        UpdateAvailabilityCommand.prototype._getParameters = function () {
            var data;
            data = {
                custom_available_periods: {
                    resource_instance_id: this.resource.id,
                    start_date: RG.Utils.DateFormatter.getISODate(this.dateRange.startDate),
                    end_date: RG.Utils.DateFormatter.getISODate(this.dateRange.endDate),
                    days: this._getTimeDaysParameters()
                }
            };
            return data;
        };

        UpdateAvailabilityCommand.prototype._getTimeDaysParameters = function () {
            var dayAggregate, days, i, len, ref, timeBlocks;
            days = {};
            ref = this.changedDays;
            for (i = 0, len = ref.length; i < len; i++) {
                dayAggregate = ref[i];
                timeBlocks = dayAggregate.getFirstAvailablePeriods().map(function (model) {
                    return {
                        start_time: model.get('startTime'),
                        end_time: model.get('endTime')
                    };
                });
                timeBlocks = _.select(timeBlocks, function (tb) {
                    return tb.start_time !== tb.end_time;
                });
                days[dayAggregate.get('weekDay').toString()] = {
                    time_blocks: timeBlocks
                };
            }
            return days;
        };

        return UpdateAvailabilityCommand;

    })();

}).call(this);
;
(function () {
    RG.Commands.UpdateBookingCommand = (function () {
        function UpdateBookingCommand(options) {
            this.account = options.account || RG.Utils.getCurrentAccount();
            this.booking = options.booking;
            this.booker = options.booker;
            this.startDate = options.startDate;
            this.endDate = options.endDate;
            this.resource = options.resource;
            this.target = options.target;
            this.clearTarget = options.clearTarget;
            this.details = options.details;
            this.billable = options.billable;
            this.bookingDuration = options.bookingDuration;
            this.forceWaiting = options.forceWaiting;
            this.waitingCallback = options.waitingCallback || function () { };
            this.removedDatesCallback = options.waitingCallback || function () { };
            this.successCallback = options.successCallback || function () { };
            this.errorCallback = options.errorCallback || function () { };
        }

        UpdateBookingCommand.prototype.execute = function () {
            RG.Utils.BookingDataParser.expirePolls();
            //return $.ajax("/v1/" + (this.account.getSubdomain()) + "/bookings/" + this.booking.id, {
            return $.ajax("http://localhost/EMRMAPI/v1/UpdateBookings/" + this.booking.id, {
                method: "POST",
                data: this._getParameters(),
                dataType: 'json',
                success: (function (_this) {
                    return function (data) {
                        data = { "id": 10308908, "client_id": null, "project_id": 666791, "resource_id": 308774, "notes": "Hello world", "details": "", "start_date": "2017-12-20", "end_date": "2017-12-29", "billable": true, "refreshable": false, "created_at": "2017-12-09T11:37:30.000Z", "updated_at": "2017-12-12T05:35:00.000Z", "booker": { "id": 147899, "name": "Viniston Arockiasamy", "email": "myprivcy2015@gmail.com", "color": "#FFB400" }, "durations": [{ "date": "2017-12-20", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-21", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-22", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-25", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-26", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-27", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-28", "duration": 480, "start_time": null, "end_time": null, "waiting": false }, { "date": "2017-12-29", "duration": 480, "start_time": null, "end_time": null, "waiting": false }], "removed_availability_dates": [] }
                        RG.Popovers.locked = false;
                        RG.Popovers.done();
                        _this.successCallback(data);
                        _this.resource.predictWaitingList();
                        if (data.removed_availability_dates.length) {
                            setTimeout(function () {
                                return _this.removedDatesCallback(data.removed_availability_dates);
                            }, 0);
                        }
                        return RG.Utils.BookingDataParser.expirePolls();
                    };
                })(this),
                error: (function (_this) {
                    return function (xhr) {
                        var data, e;
                        data = null;
                        try {
                            data = JSON.parse(xhr.responseText);
                            if (data.waiting) {
                                return _this.waitingCallback(data.waiting_dates);
                            } else {
                                return _this.archivedCallback(data);
                            }
                        } catch (error) {
                            e = error;
                            return _this.errorCallback(e, xhr);
                        }
                    };
                })(this)
            });
        };

        UpdateBookingCommand.prototype._getParameters = function () {
            var data;
            data = {};
            if (this.startDate) {
                data.start_date = RG.Utils.DateFormatter.getISODate(this.startDate);
            }
            if (this.endDate) {
                data.end_date = RG.Utils.DateFormatter.getISODate(this.endDate);
            }
            if (this.booker) {
                data.booker_id = this.booker.id;
            }
            if (this.resource) {
                data.resource_id = this.resource.id;
            }
            if (this.target && !this.clearTarget) {
                if (this.target.constructor === RG.Models.Project) {
                    data.project_id = this.target.id;
                } else if (this.target.constructor === RG.Models.Client) {
                    data.client_id = this.target.id;
                }
            }
            if (this.clearTarget) {
                data.project_id = null;
                data.client_id = null;
            }
            if (typeof this.billable !== "undefined") {
                data.billable = !!this.billable;
            }
            if (this.details || this.details === '') {
                data.details = this.details;
            }
            if (this.bookingDuration) {
                data.duration = this.bookingDuration.duration;
                if (this.bookingDuration.startTime === 0) {
                    data.start_time = 0;
                } else {
                    data.start_time = this.bookingDuration.startTime || null;
                }
                if (data.start_time !== null) {
                    data.start_time = "" + data.start_time;
                }
            }
            if (this.forceWaiting) {
                data.allow_waiting = true;
            }
            return data;
        };

        return UpdateBookingCommand;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Commands.UpdateDowntimeCommand = (function (superClass) {
        extend(UpdateDowntimeCommand, superClass);

        function UpdateDowntimeCommand(options) {
            UpdateDowntimeCommand.__super__.constructor.apply(this, arguments);
            this.downtime = options.downtime;
        }

        UpdateDowntimeCommand.prototype.execute = function (options) {
            var params;
            if (options == null) {
                options = {};
            }
            params = this._getParameters();
            if (options["delete"] !== void 0) {
                params.delete_invalid_bookings = options["delete"];
            }
            options = {
                successCallback: this.successCallback,
                errorCallback: this.errorCallback,
                saveErrorCallback: this.saveErrorCallback
            };
            this.preExecuteCallback(this._buildDowntime(params), this.getClashingBookings(), params.delete_invalid_bookings);
            return RG.Utils.DowntimeService.updateDowntime(this.downtime.id, params, options);
        };

        UpdateDowntimeCommand.prototype._buildDowntime = function (options) {
            var ref;
            this.downtime.set({
                resourceIds: options.resource_ids,
                creatorId: options.creator_id,
                from: this.dateTimeRange.dateRange.startDate,
                to: this.dateTimeRange.dateRange.endDate,
                timeZone: this.timeZones.findWhere({
                    name: options.timezone
                }),
                startTime: options.start_time,
                endTime: options.end_time,
                details: options.details,
                leave: options.leave,
                downtimeTypeId: (ref = this.type) != null ? ref.id : void 0,
                downtimeType: this.type
            });
            return this.downtime;
        };

        return UpdateDowntimeCommand;

    })(RG.Commands.CreateDowntimeCommand);

}).call(this);
;
(function () {
    RG.Commands.UpdateNoticeCommand = (function () {
        function UpdateNoticeCommand(options) {
            this.data = {};
            this.data[options.dismissedField] = true;
        }

        UpdateNoticeCommand.prototype.execute = function () {
            return $.ajax("/v1/update_notice", {
                method: "PUT",
                data: this.data,
                dataType: 'json'
            });
        };

        return UpdateNoticeCommand;

    })();

}).call(this);
;
(function () {
    RG.Commands.UpdateOvertimeCommand = (function () {
        function UpdateOvertimeCommand(options) {
            this.account = options.account || RG.Utils.getCurrentAccount();
            this.resource = options.resource;
            this.changedDays = options.changedDays;
            this.dateRange = options.dateRange;
            this.forceWaiting = options.forceWaiting;
            this.successCallback = options.successCallback;
        }

        UpdateOvertimeCommand.prototype.execute = function () {
            RG.Popovers.done();
            return $.ajax("/v1/" + (this.account.getSubdomain()) + "/overtimes", {
                contentType: 'application/json',
                method: "POST",
                headers: {
                    "X-CSRF-Token": RG.Utils.getCSRFToken()
                },
                data: JSON.stringify(this._getParameters()),
                dataType: 'json',
                success: (function (_this) {
                    return function (data) {
                        return typeof _this.successCallback === "function" ? _this.successCallback(data) : void 0;
                    };
                })(this),
                error: (function (_this) {
                    return function (xhr) {
                        var responseData;
                        responseData = JSON.parse(xhr.responseText);
                        return typeof _this.waitingCallback === "function" ? _this.waitingCallback(responseData.waiting_dates) : void 0;
                    };
                })(this)
            });
        };

        UpdateOvertimeCommand.prototype._getParameters = function () {
            var data;
            data = {
                overtimes: {
                    resource_instance_id: this.resource.id,
                    start_date: RG.Utils.DateFormatter.getISODate(this.dateRange.startDate),
                    end_date: RG.Utils.DateFormatter.getISODate(this.dateRange.endDate),
                    days: this._getTimeDaysParameters()
                }
            };
            return data;
        };

        UpdateOvertimeCommand.prototype._getTimeDaysParameters = function () {
            var dayAggregate, days, i, len, ref;
            days = {};
            ref = this.changedDays;
            for (i = 0, len = ref.length; i < len; i++) {
                dayAggregate = ref[i];
                days[dayAggregate.get('weekDay').toString()] = dayAggregate.overtime();
            }
            return days;
        };

        return UpdateOvertimeCommand;

    })();

}).call(this);
;
(function () {
    RG.Controllers.DayUnitGroupings = (function () {
        function DayUnitGroupings(periodGroupings) {
            this.periodGroupings = periodGroupings;
            _.extend(this, Backbone.Events);
            this.htmlElement = document.querySelector("html");
            this.clientWidth = this.htmlElement.clientWidth;
            $(window).on("resize", (function (_this) {
                return function () {
                    return _this.clientWidth = _this.htmlElement.clientWidth;
                };
            })(this));
        }

        DayUnitGroupings.prototype.init = function (startDate, initDate) {
            var endDate, ug;
            this.initialDate = initDate;
            endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate() + 6);
            ug = this._createUnitGroupingFromDates(startDate, endDate);
            this.periodGroupings.add(ug);
        };

        DayUnitGroupings.prototype.append = function (count) {
            var currentEndDate, endDate, i, j, ref, startDate, ug;
            if (count == null) {
                count = 1;
            }
            for (i = j = 1, ref = count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                currentEndDate = this._endDate();
                startDate = new Date(currentEndDate.getFullYear(), currentEndDate.getMonth(), currentEndDate.getDate() + 1);
                endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate() + 6);
                ug = this._createUnitGroupingFromDates(startDate, endDate);
                this.periodGroupings.add(ug);
            }
            while (this.periodGroupings.length > this._screenWidthPeriods()) {
                this.periodGroupings.remove(this.periodGroupings.models[0]);
            }
            this.updateUI();
            this.trigger('append');
        };

        DayUnitGroupings.prototype.prepend = function (count) {
            var currentStartDate, endDate, i, j, ref, startDate, ug;
            if (count == null) {
                count = 1;
            }
            for (i = j = 1, ref = count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                currentStartDate = this._startDate();
                endDate = new Date(currentStartDate.getFullYear(), currentStartDate.getMonth(), currentStartDate.getDate() - 1);
                startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() - 6);
                ug = this._createUnitGroupingFromDates(startDate, endDate);
                this.periodGroupings.unshift(ug);
            }
            while (this.periodGroupings.length > this._screenWidthPeriods()) {
                this.periodGroupings.remove(this.periodGroupings.models[this._screenWidthPeriods()]);
            }
            this.updateUI();
            this.trigger('prepend');
        };

        DayUnitGroupings.prototype.scrollToDate = function (date) {
            var currentResource;
            currentResource = RG.getCurrentResource();
            if (currentResource) {
                window.rgStorage.set('lastResourceId', currentResource.id);
            }
            window.rgStorage.set('filterBarWasCollapsed', !$("nav ul.filters").hasClass("open"));
            $("#loader").show();
            $("#calendar").hide();
            setTimeout(function () {
                date = RG.Utils.DateFormatter.getISODate(date);
                window.location.hash = date;
                window.location.reload();
            }, 300);
            return true;
        };

        DayUnitGroupings.prototype.triggerChange = function () {
            this.periodGroupings.getUnitCollection().each(function (u) {
                u.trigger('change', u);
            });
            this.periodGroupings.getUnitCollection().trigger('change');
        };

        DayUnitGroupings.prototype.updateUI = function () {
            $("span#active-year").text(this.initialDate.getFullYear().toString());
            $("#jump-to-year-options li").removeClass("active");
            $("#jump-to-year-options li[data-year=" + (this.initialDate.getFullYear().toString()) + "]").addClass("active");
        };

        DayUnitGroupings.prototype._endDate = function () {
            return this.periodGroupings.models[this.periodGroupings.models.length - 1].dateRange.endDate;
        };

        DayUnitGroupings.prototype._startDate = function () {
            return this.periodGroupings.models[0].dateRange.startDate;
        };

        DayUnitGroupings.prototype._screenWidthPeriods = function () {
            return (Math.ceil(this.clientWidth / 280) + 3) | 0;
        };

        DayUnitGroupings.prototype._createUnitGroupingFromDates = function (startDate, endDate) {
            var dr;
            dr = new RG.Utils.DateRange(startDate, endDate);
            return new RG.Calendar.Units.DayUnitGrouping(dr);
        };

        return DayUnitGroupings;

    })();

}).call(this);
;
(function () {
    var LayerAllocation,
        bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

    RG.Controllers.TimeAllocationLayers = (function () {
        function TimeAllocationLayers(bookingsCollection, downtimesCollection) {
            this.bookingsCollection = bookingsCollection;
            this.downtimesCollection = downtimesCollection;
            this.resetLayers = bind(this.resetLayers, this);
            this._bindEvents();
        }

        TimeAllocationLayers.prototype.layerFor = function (timeAllocation, timeAllocations) {
            var date, dv, i, j, k, len, overlappingTimeAllocations, ref, timeAllocationDateRange, usedLayers;
            if (timeAllocation.original.isExclusivelyOnWaitingList()) {
                return null;
            }
            timeAllocationDateRange = timeAllocation.modified.getDateRange();
            overlappingTimeAllocations = [];
            ref = timeAllocationDateRange.getDates();
            for (j = 0, len = ref.length; j < len; j++) {
                date = ref[j];
                dv = RG.Utils.DateFormatter.getISODate(date);
                overlappingTimeAllocations = overlappingTimeAllocations.concat(this.overlapIndex[dv]);
            }
            overlappingTimeAllocations = overlappingTimeAllocations.filter(function (ta) {
                return ta !== timeAllocation;
            });
            usedLayers = overlappingTimeAllocations.map(function (ta) {
                return ta.original.layer;
            });
            for (i = k = 0; k <= 1000; i = ++k) {
                if (usedLayers.indexOf(i) === -1) {
                    return i;
                }
            }
        };

        TimeAllocationLayers.prototype._indexOverlappingTimeAllocations = function (timeAllocations) {
            var base, date, dv, j, k, len, len1, ref, ta;
            this.overlapIndex = {};
            for (j = 0, len = timeAllocations.length; j < len; j++) {
                ta = timeAllocations[j];
                ref = ta.modified.getDateRange().getDates();
                for (k = 0, len1 = ref.length; k < len1; k++) {
                    date = ref[k];
                    dv = RG.Utils.DateFormatter.getISODate(date);
                    if ((base = this.overlapIndex)[dv] == null) {
                        base[dv] = [];
                    }
                    this.overlapIndex[dv].push(ta);
                }
            }
        };

        TimeAllocationLayers.prototype.resetLayers = function () {
            RG.backburner.deferOnce('layers', this, this._resetLayers);
        };

        TimeAllocationLayers.prototype._resetLayers = function () {
            var j, k, len, len1, timeAllocation, timeAllocations;
            this._unbindEvents();
            timeAllocations = this._getTimeAllocations();
            timeAllocations = this._tetrisSort(timeAllocations);
            for (j = 0, len = timeAllocations.length; j < len; j++) {
                timeAllocation = timeAllocations[j];
                timeAllocation.original.previousLayer = timeAllocation.original.layer;
                timeAllocation.original.layer = null;
            }
            this._indexOverlappingTimeAllocations(timeAllocations);
            for (k = 0, len1 = timeAllocations.length; k < len1; k++) {
                timeAllocation = timeAllocations[k];
                timeAllocation.original.layer = this.layerFor(timeAllocation, timeAllocations);
                if (timeAllocation.original.previousLayer && timeAllocation.original.layer !== timeAllocation.original.previousLayer) {
                    timeAllocation.original.trigger('change', timeAllocation.original);
                }
            }
            return this._bindEvents();
        };

        TimeAllocationLayers.prototype._bindEvents = function () {
            this.bookingsCollection.on('add', this.resetLayers);
            this.bookingsCollection.on('remove', this.resetLayers);
            this.bookingsCollection.on('change', this.resetLayers);
            this.bookingsCollection.on('reset', this.resetLayers);
            this.downtimesCollection.on('add', this.resetLayers);
            this.downtimesCollection.on('remove', this.resetLayers);
            this.downtimesCollection.on('change', this.resetLayers);
            this.downtimesCollection.on('reset', this.resetLayers);
        };

        TimeAllocationLayers.prototype._unbindEvents = function () {
            this.bookingsCollection.off('add', this.resetLayers);
            this.bookingsCollection.off('remove', this.resetLayers);
            this.bookingsCollection.off('change', this.resetLayers);
            this.bookingsCollection.off('reset', this.resetLayers);
            this.downtimesCollection.off('add', this.resetLayers);
            this.downtimesCollection.off('remove', this.resetLayers);
            this.downtimesCollection.off('change', this.resetLayers);
            this.downtimesCollection.off('reset', this.resetLayers);
        };

        TimeAllocationLayers.prototype.close = function () {
            this._unbindEvents();
        };

        TimeAllocationLayers.prototype._tetrisSort = function (timeAllocations) {
            timeAllocations = _.sortBy(timeAllocations, function (timeAllocation) {
                return -(timeAllocation.modified.getEndDate());
            });
            return _.sortBy(timeAllocations, function (timeAllocation) {
                return timeAllocation.modified.getStartDate();
            });
        };

        TimeAllocationLayers.prototype._getTimeAllocations = function () {
            var allocations, bookingCollectionModels, ref, timeZone;
            bookingCollectionModels = _.sortBy(this.bookingsCollection.models, function (booking) {
                return booking._getFirstDuration().get('startTime');
            });
            allocations = [].concat(bookingCollectionModels.map(function (b) {
                return new LayerAllocation(b, b);
            }));
            timeZone = (ref = this.downtimesCollection.resource) != null ? ref.get('timeZone') : void 0;
            allocations = allocations.concat(this.downtimesCollection.models.map(function (d) {
                return new LayerAllocation(d, d.inTimeZoneSimple(timeZone));
            }));
            return allocations;
        };

        return TimeAllocationLayers;

    })();

    LayerAllocation = (function () {
        function LayerAllocation(original, modified) {
            this.original = original;
            this.modified = modified;
        }

        return LayerAllocation;

    })();

}).call(this);
;
(function () {
    RG.FSM.BaseState = (function () {
        BaseState.prototype.startDrag = 'startDrag';

        BaseState.prototype.dragging = 'dragging';

        BaseState.prototype.dropped = 'dropped';

        function BaseState(options) {
            this.ui = options.ui;
            this.event = options.event;
            this.interaction = options.interaction;
            this.entered = false;
            this.exited = false;
        }

        BaseState.prototype.handleInput = function (input) {
            throw 'Not Implemented';
        };

        BaseState.prototype.enter = function () {
            this.entered = true;
            return this.exited = false;
        };

        BaseState.prototype.exit = function () {
            this.entered = false;
            return this.exited = true;
        };

        BaseState.prototype.update = function () {
            if (!this.entered) {
                return this.enter();
            }
        };

        return BaseState;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.BookingState = (function (superClass) {
        extend(BookingState, superClass);

        function BookingState() {
            return BookingState.__super__.constructor.apply(this, arguments);
        }

        BookingState.prototype.handleInput = function (input) {
            if (input === this.startDrag) {
                return new RG.FSM.BookingStartDragState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else {
                throw "Input not implemented: " + input;
            }
        };

        return BookingState;

    })(RG.FSM.BaseState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.DowntimeState = (function (superClass) {
        extend(DowntimeState, superClass);

        function DowntimeState() {
            return DowntimeState.__super__.constructor.apply(this, arguments);
        }

        DowntimeState.prototype.handleInput = function (input) {
            if (input === this.startDrag) {
                return new RG.FSM.DowntimeStartDragState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else {
                throw "Input not implemented";
            }
        };

        return DowntimeState;

    })(RG.FSM.BaseState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.BookingDraggingState = (function (superClass) {
        extend(BookingDraggingState, superClass);

        function BookingDraggingState() {
            return BookingDraggingState.__super__.constructor.apply(this, arguments);
        }

        BookingDraggingState.prototype.handleInput = function (input) {
            if (input === this.dropped) {
                return new RG.FSM.BookingDroppedState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else if (input === this.dragging) {
                this.update();
                return this;
            } else {
                throw "Input not implemented";
            }
        };

        BookingDraggingState.prototype.enter = function () {
            BookingDraggingState.__super__.enter.apply(this, arguments);
            RG.Popovers.clear();
            return Q.delay(300).then(function () {
                return RG.Popovers.popoverActive = false;
            });
        };

        BookingDraggingState.prototype.update = function () {
            var bookingView, date, dropDates, ex, i, len, timeUnit;
            BookingDraggingState.__super__.update.apply(this, arguments);
            bookingView = this.interaction.bookingView;
            $(".resources--cal-unit.drag-drop-target").removeClass("drag-drop-target");
            window.getSelection().removeAllRanges();
            try {
                if (!RG.Utils.Permissions.canManage(bookingView.model) || RG.Popovers.locked) {
                    bookingView._calculator.targetDate = null;
                    bookingView._calculator.resource = null;
                    this.interaction.bookingViewEl.draggable("option", "revert", true);
                    $(".booking.ui-draggable-dragging").addClass("no-drop");
                    $("body").css({
                        cursor: "no-drop"
                    });
                    return;
                }
                bookingView._calculator.targetDate = RG.getDateAtClientX(this.event.clientX);
                bookingView._calculator.resource = RG.getResourceAtClientY(this.event.clientY);
                dropDates = bookingView._calculator.getNewDates();
                for (i = 0, len = dropDates.length; i < len; i++) {
                    date = dropDates[i];
                    timeUnit = $("#" + (RG.Utils.generateTimeUnitId(bookingView._calculator.resource.cid, date)));
                    timeUnit.addClass("drag-drop-target");
                }
                if (dropDates.length > 0) {
                    this.interaction.bookingViewEl.draggable("option", "revert", false);
                    $(".booking.ui-draggable-dragging").removeClass("no-drop");
                    $("body").css({
                        cursor: "move"
                    });
                } else {
                    this.interaction.bookingViewEl.draggable("option", "revert", true);
                    $(".booking.ui-draggable-dragging").addClass("no-drop");
                    $("body").css({
                        cursor: "no-drop"
                    });
                }
            } catch (error) {
                ex = error;
                bookingView._calculator.targetDate = null;
                bookingView._calculator.resource = null;
                this.interaction.bookingViewEl.draggable("option", "revert", true);
                $(".booking.ui-draggable-dragging").addClass("no-drop");
                return $("body").css({
                    cursor: "no-drop"
                });
            }
        };

        return BookingDraggingState;

    })(RG.FSM.BookingState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.BookingDroppedState = (function (superClass) {
        extend(BookingDroppedState, superClass);

        function BookingDroppedState() {
            return BookingDroppedState.__super__.constructor.apply(this, arguments);
        }

        BookingDroppedState.prototype.enter = function () {
            var booking, bookingDuration, bookingView, command, date, dates, ex, i, initialDuration, j, len, len1, newDurations, originalAttributes, originalDurations, originalResource, resource;
            bookingView = this.interaction.bookingView;
            bookingView._stopPropagation(this.event);
            $(".resources--cal-unit.drag-drop-target").removeClass("drag-drop-target");
            $("body").css({
                cursor: ""
            });
            this.interaction.eventsOff();
            try {
                RG.Utils.BookingDataParser.expirePolls();
                resource = bookingView._calculator.resource;
                booking = bookingView.model.realBooking;
                originalResource = bookingView._getBookingResource();
                if (originalResource && resource && originalResource.get('id') !== resource.get('id')) {
                    originalResource.bookings.trigger('remove');
                }
                if (!resource || !bookingView._calculator.targetDate || bookingView.model.hasNoDurations() || (RG.Utils.DateComparator.equalsYMD(bookingView._calculator.sourceDate, bookingView._calculator.targetDate) && resource === originalResource && !this.event.shiftKey)) {
                    this.interaction.bookingViewEl.css({
                        opacity: ''
                    });
                    this.interaction.relatedBookings.forEach(function (b) {
                        return b.style.opacity = '';
                    });
                    RG.renderer.unlock(this.interaction.rendererLock);
                    return;
                }
                originalAttributes = {
                    startDate: booking.get('startDate'),
                    endDate: booking.get('endDate'),
                    saving: false
                };
                originalDurations = booking.durations.models;
                if (dates = bookingView._calculator.getNewDates()) {
                    if (this._datesUnchanged(dates, originalAttributes, originalResource, resource)) {
                        this.interaction.bookingViewEl.css({
                            opacity: ''
                        });
                        this.interaction.relatedBookings.forEach(function (b) {
                            return b.style.opacity = '';
                        });
                        return;
                    }
                    initialDuration = booking._getFirstDuration();
                    newDurations = [];
                    bookingDuration = new RG.DTO.BookingDuration({
                        startTime: initialDuration.get('startTime'),
                        duration: initialDuration.getMinutes()
                    });
                    if (!resource.isHuman() || initialDuration.constructor === RG.Models.FixedDuration) {
                        bookingDuration.startTime = bookingDuration.startTime || '0';
                        for (i = 0, len = dates.length; i < len; i++) {
                            date = dates[i];
                            newDurations.push(new RG.Models.FixedDuration({
                                date: date,
                                startTime: bookingDuration.startTime,
                                endTime: bookingDuration.startTime + bookingDuration.duration,
                                waiting: false
                            }));
                        }
                    } else if (initialDuration.constructor === RG.Models.Duration) {
                        for (j = 0, len1 = dates.length; j < len1; j++) {
                            date = dates[j];
                            newDurations.push(new RG.Models.Duration({
                                date: date,
                                minutes: bookingDuration.duration,
                                waiting: false
                            }));
                        }
                    }
                    command = null;
                    resource.predictWaitingList();
                    if (!this.event.shiftKey) {
                        command = this.commandFactory.createDragBookingCommand(resource, booking, originalResource, originalDurations, newDurations, dates, bookingDuration, originalAttributes, this.interaction.rendererLock);
                    } else {
                        command = this.commandFactory.createCopyBookingCommand(resource, booking, originalResource, originalDurations, newDurations, dates, bookingDuration, originalAttributes, this.interaction.rendererLock);
                    }
                    RG.renderer.unlock(this.interaction.rendererLock);
                    booking.trigger('change', booking);
                    command.execute();
                } else {
                    this.interaction.bookingViewEl.draggable("option", "revert", true);
                }
            } catch (error) {
                ex = error;
                RG.renderer.unlock(this.interaction.rendererLock);
                this.interaction.bookingViewEl.draggable("option", "revert", true);
                throw ex;
            }
            this.interaction.helperView.remove();
            RG.renderer.unlock(this.interaction.rendererLock);
        };

        BookingDroppedState.prototype._datesUnchanged = function (dates, originalAttributes, originalResource, resource) {
            if (dates.length === 0) {
                return true;
            }
            if (this.event.shiftKey || originalResource.id !== resource.id) {
                return false;
            }
            return RG.Utils.DateComparator.equalsYMD(dates[0], originalAttributes.startDate) && RG.Utils.DateComparator.equalsYMD(dates[dates.length - 1], originalAttributes.endDate);
        };

        return BookingDroppedState;

    })(RG.FSM.BookingState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.BookingStartDragState = (function (superClass) {
        extend(BookingStartDragState, superClass);

        function BookingStartDragState() {
            return BookingStartDragState.__super__.constructor.apply(this, arguments);
        }

        BookingStartDragState.prototype.handleInput = function (input) {
            if (input === this.dragging) {
                return new RG.FSM.BookingDraggingState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else {
                throw "Input not implemented: " + input;
            }
        };

        BookingStartDragState.prototype.enter = function () {
            var duration, ex, offset;
            BookingStartDragState.__super__.enter.apply(this, arguments);
            try {
                window.getSelection().removeAllRanges();
                if (!this.event.shiftKey) {
                    this.interaction.bookingViewEl.css({
                        opacity: 0.5
                    });
                    this.interaction.relatedBookings.forEach(function (b) {
                        return b.style.opacity = 0.5;
                    });
                }
                this.interaction.helper = $(document.querySelectorAll(".booking.ui-draggable-dragging")[0]);
                this.interaction.eventsOn();
                this.interaction.keyEvent(this.event);
                duration = this.interaction.bookingView.getDurationAtOffset(this.event.pageX - this.interaction.bookingViewOffsetLeft);
                offset = 0;
                while (!duration) {
                    offset += 10;
                    duration = this.interaction.bookingView.getDurationAtOffset(this.event.pageX - this.interaction.bookingViewOffsetLeft - offset) || this.interaction.bookingView.getDurationAtOffset(this.event.pageX - this.interaction.bookingViewOffsetLeft + offset);
                }
                this._setBookingCalculator(duration);
            } catch (error) {
                ex = error;
                RG.renderer.unlock(this.interaction.rendererLock);
                throw ex;
            }
        };

        BookingStartDragState.prototype._setBookingCalculator = function (duration) {
            this.interaction.bookingView._calculator = new RG.Interactions.MoveBookingDates({
                booking: this.interaction.bookingView.model.realBooking,
                sourceDate: duration.get('date')
            });
        };

        return BookingStartDragState;

    })(RG.FSM.BookingState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.DowntimeDraggingState = (function (superClass) {
        extend(DowntimeDraggingState, superClass);

        function DowntimeDraggingState() {
            return DowntimeDraggingState.__super__.constructor.apply(this, arguments);
        }

        DowntimeDraggingState.prototype.handleInput = function (input) {
            if (input === this.dropped) {
                return new RG.FSM.DowntimeDroppedState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else if (input === this.dragging) {
                this.update();
                return this;
            } else {
                throw "Input not implemented";
            }
        };

        DowntimeDraggingState.prototype.enter = function () {
            DowntimeDraggingState.__super__.enter.apply(this, arguments);
            RG.Popovers.clear();
            Q.delay(300).then(function () {
                return RG.Popovers.popoverActive = false;
            });
            return this.update();
        };

        DowntimeDraggingState.prototype.update = function () {
            var bookingView, date, dropDates, ex, i, len, timeUnit;
            DowntimeDraggingState.__super__.update.apply(this, arguments);
            bookingView = this.interaction.bookingView;
            $(".resources--cal-unit.drag-drop-target").removeClass("drag-drop-target");
            window.getSelection().removeAllRanges();
            try {
                if (!RG.Utils.Permissions.canManageDowntime(bookingView.model) || RG.Popovers.locked) {
                    bookingView._calculator.targetDate = null;
                    bookingView._calculator.resource = null;
                    this.interaction.bookingViewEl.draggable("option", "revert", true);
                    $(".booking.ui-draggable-dragging").addClass("no-drop");
                    $("body").css({
                        cursor: "no-drop"
                    });
                    return;
                }
                bookingView._calculator.targetDate = RG.getDateAtClientX(this.event.clientX);
                bookingView._calculator.resource = RG.getResourceAtClientY(this.event.clientY);
                dropDates = bookingView._calculator.getNewDates();
                for (i = 0, len = dropDates.length; i < len; i++) {
                    date = dropDates[i];
                    timeUnit = $("#" + (RG.Utils.generateTimeUnitId(bookingView._calculator.resource.cid, date)));
                    timeUnit.addClass("drag-drop-target");
                }
                this.interaction.bookingViewEl.draggable("option", "revert", false);
                $(".booking.ui-draggable-dragging").removeClass("no-drop");
                $("body").css({
                    cursor: "move"
                });
            } catch (error) {
                ex = error;
                bookingView._calculator.targetDate = null;
                bookingView._calculator.resource = null;
                this.interaction.bookingViewEl.draggable("option", "revert", true);
                $(".booking.ui-draggable-dragging").addClass("no-drop");
                return $("body").css({
                    cursor: "no-drop"
                });
            }
        };

        return DowntimeDraggingState;

    })(RG.FSM.BookingState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.DowntimeDroppedState = (function (superClass) {
        extend(DowntimeDroppedState, superClass);

        function DowntimeDroppedState() {
            return DowntimeDroppedState.__super__.constructor.apply(this, arguments);
        }

        DowntimeDroppedState.prototype.enter = function () {
            var bookingView, command, dates, downtime, ex, originalAttributes, originalResource, resource;
            bookingView = this.interaction.bookingView;
            bookingView._stopPropagation(this.event);
            $(".resources--cal-unit.drag-drop-target").removeClass("drag-drop-target");
            $("body").css({
                cursor: ""
            });
            this.interaction.eventsOff();
            try {
                resource = bookingView._calculator.resource;
                downtime = bookingView.model.realBooking;
                originalResource = bookingView._getBookingResource();
                if (!resource || !bookingView._calculator.targetDate || (RG.Utils.DateComparator.equalsYMD(bookingView._calculator.sourceDate, bookingView._calculator.targetDate) && resource === originalResource && !this.event.shiftKey)) {
                    this.interaction.bookingViewEl.css({
                        opacity: ''
                    });
                    this.interaction.relatedBookings.forEach(function (b) {
                        return b.style.opacity = '';
                    });
                    RG.renderer.unlock(this.interaction.rendererLock);
                    return;
                }
                originalAttributes = {
                    from: downtime.get('from'),
                    to: downtime.get('to'),
                    resourceIds: downtime.get('resourceIds'),
                    saving: false
                };
                if (dates = bookingView._calculator.getNewDates()) {
                    if (dates.length === 0) {
                        this.interaction.bookingViewEl.css({
                            opacity: ''
                        });
                        this.interaction.relatedBookings.forEach(function (b) {
                            return b.style.opacity = '';
                        });
                        return;
                    }
                    command = null;
                    if (!this.event.shiftKey) {
                        this._dragDowntime(dates, downtime, resource, originalResource, originalAttributes);
                        return;
                    } else {
                        this._copyDowntime(dates, downtime, resource, originalResource);
                        return;
                    }
                } else {
                    this.interaction.bookingViewEl.draggable("option", "revert", true);
                    RG.renderer.unlock(this.interaction.rendererLock);
                }
            } catch (error) {
                ex = error;
                RG.renderer.unlock(this.interaction.rendererLock);
                this.interaction.bookingViewEl.draggable("option", "revert", true);
                throw ex;
            }
            this.interaction.helperView.remove();
            RG.renderer.unlock(this.interaction.rendererLock);
        };

        DowntimeDroppedState.prototype._dragDowntime = function (dates, downtime, resource, originalResource, originalAttributes) {
            var account, command, dateTimeRange, endDate, realDowntime, removeCallback, resourceIds, resources, startDate;
            startDate = dates[0];
            endDate = dates[dates.length - 1];
            downtime.set({
                from: dates[0],
                to: dates[dates.length - 1],
                saving: true
            });
            dateTimeRange = {
                dateRange: downtime.getDateRange(),
                timeRange: downtime.getRawTimeRange()
            };
            account = resource.account;
            resourceIds = downtime.get('resourceIds');
            resourceIds = resourceIds.filter(function (id) {
                return id !== originalResource.id;
            });
            resourceIds.push(resource.id);
            downtime.set('resourceIds', resourceIds);
            resources = window.resources.select(function (r) {
                return _.include(downtime.get('resourceIds'), r.id);
            });
            realDowntime = window.downtimes.findWhere({
                id: downtime.id
            });
            realDowntime.set(downtime.attributes);
            command = this.commandFactory.createUpdateCommand(downtime, account, resources, dateTimeRange, realDowntime, this.interaction.rendererLock);
            removeCallback = (function (_this) {
                return function () {
                    realDowntime.set(originalAttributes);
                    RG.Popovers.locked = false;
                    RG.renderer.unlock(_this.interaction.rendererLock);
                };
            })(this);
            command.willTouchBookings({
                success: function (bookings) {
                    var placer, popover, waitingConfirmation;
                    placer = new RG.Utils.DatePopoverPlacer(resource, bookings[0].attributes.date);
                    waitingConfirmation = new RG.Views.Dialogs.BookingClashManagement({
                        command: command,
                        clashBookingsCount: bookings != null ? bookings.length : void 0,
                        cancelCallback: removeCallback
                    });
                    popover = new RG.Views.Dialogs.BookingClashPopover({
                        attachTo: placer.createAnchor({
                            className: 'booking-clash-popover-anchor'
                        }),
                        removeAttachTo: true,
                        body: waitingConfirmation,
                        className: 'edit-booking-dropdown booking-clash-management-popover'
                    });
                    waitingConfirmation.on('cancelled', function () {
                        removeCallback();
                    });
                    window.setTimeout(function () {
                        return window.requestAnimationFrame(function () {
                            RG.Popovers.replace({
                                popoverView: popover,
                                removeCallback: removeCallback
                            });
                        });
                    }, 102);
                },
                fail: function () {
                    command.execute();
                }
            });
        };

        DowntimeDroppedState.prototype._copyDowntime = function (dates, downtime, resource, originalResource) {
            var account, command, dateTimeRange, newDowntime, removeCallback, resourceIds, resources;
            newDowntime = downtime.clone();
            newDowntime.set({
                id: null,
                from: dates[0],
                to: dates[dates.length - 1],
                saving: true
            });
            resourceIds = newDowntime.get('resourceIds');
            resourceIds = resourceIds.filter(function (id) {
                return id !== originalResource.id;
            });
            resourceIds.push(resource.id);
            newDowntime.set('resourceIds', resourceIds);
            dateTimeRange = {
                dateRange: newDowntime.getDateRange(),
                timeRange: newDowntime.getRawTimeRange()
            };
            account = resource.account;
            resources = window.resources.select(function (r) {
                return _.include(newDowntime.get('resourceIds'), r.id);
            });
            command = this.commandFactory.createCommand(account, resources, dateTimeRange, newDowntime, this.interaction.rendererLock);
            account.downtimes.add(newDowntime);
            if (newDowntime.get('resourceIds').indexOf(originalResource.id) === -1) {
                resource.bookings.predictWaitingList();
                resource.refreshDowntimes();
            }
            removeCallback = (function (_this) {
                return function () {
                    account.downtimes.remove(newDowntime);
                    RG.Popovers.locked = false;
                    RG.renderer.unlock(_this.interaction.rendererLock);
                };
            })(this);
            return command.willTouchBookings({
                success: function (bookings) {
                    var placer, popover, waitingConfirmation;
                    placer = new RG.Utils.DatePopoverPlacer(resource, bookings[0].attributes.date);
                    waitingConfirmation = new RG.Views.Dialogs.BookingClashManagement({
                        command: command,
                        clashBookingsCount: bookings != null ? bookings.length : void 0,
                        cancelCallback: removeCallback
                    });
                    popover = new RG.Views.Dialogs.BookingClashPopover({
                        attachTo: placer.createAnchor({
                            className: 'booking-clash-popover-anchor'
                        }),
                        removeAttachTo: true,
                        body: waitingConfirmation,
                        className: 'edit-booking-dropdown booking-clash-management-popover'
                    });
                    window.setTimeout(function () {
                        return window.requestAnimationFrame(function () {
                            RG.Popovers.replace({
                                popoverView: popover,
                                removeCallback: removeCallback
                            });
                        });
                    }, 102);
                },
                fail: function () {
                    command.execute();
                }
            });
        };

        return DowntimeDroppedState;

    })(RG.FSM.DowntimeState);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.FSM.DowntimeStartDragState = (function (superClass) {
        extend(DowntimeStartDragState, superClass);

        function DowntimeStartDragState() {
            return DowntimeStartDragState.__super__.constructor.apply(this, arguments);
        }

        DowntimeStartDragState.prototype.handleInput = function (input) {
            if (input === this.dragging) {
                return new RG.FSM.DowntimeDraggingState({
                    ui: this.ui,
                    event: this.event,
                    interaction: this.interaction
                });
            } else {
                throw "Input not implemented";
            }
        };

        DowntimeStartDragState.prototype._setBookingCalculator = function (duration) {
            this.interaction.bookingView._calculator = new RG.Interactions.MoveDowntimeDates({
                booking: this.interaction.bookingView.model.realBooking,
                sourceDate: duration.get('date')
            });
        };

        return DowntimeStartDragState;

    })(RG.FSM.BookingStartDragState);

}).call(this);
;
(function () {
    RG.FSM.Booking = (function () {
        function Booking(state) {
            this.state = state;
        }

        Booking.prototype.handleInput = function (input, stateChange) {
            var k, v;
            if (stateChange == null) {
                stateChange = {};
            }
            this.state.exit();
            this.state = this.state.handleInput(input);
            for (k in stateChange) {
                v = stateChange[k];
                this.state[k] = v;
            }
            return this.state.update();
        };

        return Booking;

    })();

}).call(this);
;
(function () {
    RG.Interactions.DragDropBooking = (function () {
        function DragDropBooking(bookingView) {
            var bookingState;
            this.bookingView = bookingView;
            bookingState = new RG.FSM.BookingState({
                interaction: this
            });
            this.bookingFSM = new RG.FSM.Booking(bookingState);
            this.bookingViewEl = this.bookingView.$el;
            this.commandFactory = new RG.Utils.BookingCommandFactory;
        }

        DragDropBooking.prototype.detach = function () {
            this.eventsOff();
            RG.Popovers.locked = false;
            RG.renderer.unlock(this.rendererLock);
        };

        DragDropBooking.prototype.eventsOff = function () {
            $(window).off('keydown', this.keyEvent);
            $(window).off('keyup', this.keyEvent);
        };

        DragDropBooking.prototype.eventsOn = function () {
            $(window).on('keydown', this.keyEvent);
            $(window).on('keyup', this.keyEvent);
        };

        DragDropBooking.prototype.attach = function () {
            var originalBooking;
            originalBooking = null;
            this.relatedBookings = null;
            this.helper = null;
            this.keyEvent = (function (_this) {
                return function (e) {
                    if (!e.shiftKey) {
                        _this.bookingViewEl.css({
                            opacity: 0.5
                        });
                        _this.relatedBookings.forEach(function (b) {
                            return b.style.opacity = 0.5;
                        });
                        _this.helper.removeClass("copying");
                    } else {
                        _this.bookingViewEl.css({
                            opacity: ''
                        });
                        _this.relatedBookings.forEach(function (b) {
                            return b.style.opacity = '';
                        });
                        _this.helper.addClass("copying");
                    }
                    $(window).trigger('mousemove');
                };
            })(this);
            this.bookingViewEl.draggable({
                addClasses: false,
                containment: "#resources",
                distance: 10,
                helper: (function (_this) {
                    return function () {
                        return _this._helper();
                    };
                })(this),
                cursor: 'no-drop',
                revert: true,
                start: (function (_this) {
                    return function (event, ui) {
                        _this.rendererLock = new RG.Renderer.GlobalLock;
                        RG.renderer.lock(_this.rendererLock);
                        _this.bookingFSM.handleInput('startDrag', {
                            event: event,
                            ui: ui
                        });
                    };
                })(this),
                drag: (function (_this) {
                    return function (event, ui) {
                        _this.bookingFSM.handleInput('dragging', {
                            event: event,
                            ui: ui
                        });
                    };
                })(this),
                stop: (function (_this) {
                    return function (event, ui) {
                        _this.bookingFSM.handleInput('dropped', {
                            event: event,
                            ui: ui,
                            commandFactory: _this.commandFactory
                        });
                    };
                })(this)
            });
        };

        DragDropBooking.prototype._helper = function () {
            var dateRange, firstVisibleDate, lastVisibleDate, offset, setWidth, widthStartDate;
            this.relatedBookings = Array.prototype.slice.call(document.querySelectorAll(".booking[data-booking-id='" + this.bookingView.model.id + "']"));
            this._buildHelperView();
            this.bookingViewOffsetLeft = this.bookingViewEl.offset().left;
            offset = this.bookingViewOffsetLeft - $(this.relatedBookings[0]).offset().left;
            if (offset > 0 && !this.bookingView.model.isDowntime()) {
                this.bookingViewEl.draggable("option", "cursorAt", {
                    left: offset
                });
            }
            this.helperView.render();
            dateRange = this.bookingView.model.realBooking.getDateRange();
            widthStartDate = dateRange.startDate;
            firstVisibleDate = RG.Utils.firstVisibleDate()._d;
            lastVisibleDate = RG.Utils.lastVisibleDate()._d;
            setWidth = false;
            if (firstVisibleDate > widthStartDate) {
                setWidth = true;
                widthStartDate = firstVisibleDate;
                dateRange = new RG.Utils.DateRange(firstVisibleDate, dateRange.endDate);
                window.requestAnimationFrame((function (_this) {
                    return function () {
                        $(_this.helperView.el).find('.unit span').hide();
                    };
                })(this));
            }
            if (dateRange.endDate > lastVisibleDate) {
                setWidth = true;
                dateRange = new RG.Utils.DateRange(dateRange.startDate, lastVisibleDate);
                window.requestAnimationFrame((function (_this) {
                    return function () {
                        $(_this.helperView.el).find('.unit span').hide();
                    };
                })(this));
            }
            if (setWidth) {
                this.helperView.el.style.width = ((RG.getUnitWidth() * dateRange.getNumberOfDays() / this.bookingView.unit.getDaysPerUnit()) + 1) + "px";
            }
            return this.helperView.el;
        };

        DragDropBooking.prototype._buildHelperView = function () {
            this.helperView = new RG.Views.Resource.Booking({
                dateController: window.dateController,
                bookingFormFactory: {
                    currentUserId: window.currentUserId
                },
                model: this.bookingView.model.realBooking,
                unit: this.bookingView.unit,
                availability: this.bookingView.availability,
                colorSource: this.bookingView._colorSource
            });
        };

        return DragDropBooking;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Interactions.DragDropDowntime = (function (superClass) {
        extend(DragDropDowntime, superClass);

        function DragDropDowntime(bookingView) {
            var downtimeState;
            this.bookingView = bookingView;
            downtimeState = new RG.FSM.DowntimeState({
                interaction: this
            });
            this.bookingFSM = new RG.FSM.Booking(downtimeState);
            this.bookingViewEl = this.bookingView.$el;
            this.commandFactory = new RG.Utils.DowntimeCommandFactory;
        }

        DragDropDowntime.prototype._buildHelperView = function () {
            this.helperView = new RG.Views.Resource.Downtime({
                dateController: window.dateController,
                downtimeFormFactory: {
                    currentUserId: window.currentUserId
                },
                model: this.bookingView.model.realBooking,
                unit: this.bookingView.unit,
                availability: this.bookingView.availability,
                colorSource: this.bookingView._colorSource
            });
        };

        return DragDropDowntime;

    })(RG.Interactions.DragDropBooking);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

    RG.Interactions.DragToCreate = (function () {
        function DragToCreate(line) {
            this.line = line;
            this._triggerDialog = bind(this._triggerDialog, this);
            this._setEndDate = bind(this._setEndDate, this);
            this._setStartDate = bind(this._setStartDate, this);
        }

        DragToCreate.prototype.attach = function () {
            this.line.$el.on('mousedown', this._setStartDate);
            $(window).on('mousemove', this._setEndDate);
            $(window).on('mouseup', this._triggerDialog);
        };

        DragToCreate.prototype.detach = function () {
            this.line.$el.off('mousedown', this._setStartDate);
            $(window).off('mousemove', this._setEndDate);
            $(window).off('mouseup', this._triggerDialog);
        };

        DragToCreate.prototype._addDragMarkers = function (dateRange) {
            var date, i, len, ref;
            if (dateRange == null) {
                dateRange = null;
            }
            ref = this._getDates(dateRange);
            for (i = 0, len = ref.length; i < len; i++) {
                date = ref[i];
                this.lastUnit = $("#" + (RG.Utils.generateTimeUnitId(this.line.model.cid, date)), this.line.$el).addClass("drag-drop-target");
            }
        };

        DragToCreate.prototype._getDateRange = function () {
            var dates;
            dates = _.sortBy([this._startDate, this._endDate], function (d) {
                return d;
            });
            return new RG.Utils.DateRange(dates[0], dates[1]);
        };

        DragToCreate.prototype._getDates = function (dateRange) {
            var date, dates, day, days, i, ref;
            if (dateRange == null) {
                dateRange = null;
            }
            if (dateRange) {
                return dateRange.getDates();
            }
            if (!this._hasValidDateRange()) {
                return [];
            }
            days = new RG.Utils.DateRange(this._startDate, this._endDate).getNumberOfDays();
            dates = [];
            for (day = i = 0, ref = days - 1; 0 <= ref ? i <= ref : i >= ref; day = 0 <= ref ? ++i : --i) {
                date = new Date(this._startDate);
                date.setDate(date.getDate() + day);
                dates.push(date);
            }
            return dates;
        };

        DragToCreate.prototype._hasValidDateRange = function () {
            return this._startDate && this._endDate;
        };

        DragToCreate.prototype._setStartDate = function (e) {
            var $target, validTarget;
            $target = $(e.target);
            validTarget = e.target.className.indexOf(RG.Views.Resource.TimeUnit.prototype.className) >= 0 || e.target.className.indexOf('bookings') >= 0 && e.target.className.indexOf('js-delete-bookings') <= 0;
            if (!validTarget || e.which !== 1 || !RG.Utils.Permissions.canAdd(this.line.model)) {
                if (!RG.Utils.Permissions.canAdd(this.line.model) && $(e.target).closest('.f-dropdown, .overlay').length === 0) {
                    RG.Popovers.clear();
                }
                return;
            }
            if (RG.Popovers.locked) {
                this._removeDragMarkers();
                return this._reset();
            }
            RG.Popovers.clear();
            this._isDragging = true;
            this._startDate = RG.getDateAtClientX(e.clientX);
            this._endDate = RG.getDateAtClientX(e.clientX);
        };

        DragToCreate.prototype._setEndDate = function (e) {
            if (!this._isDragging) {
                return;
            }
            if (RG.Popovers.locked) {
                this._removeDragMarkers();
                return this._reset();
            }
            RG.Popovers.clear();
            RG.Popovers.popoverActive = false;
            window.getSelection().removeAllRanges();
            this._resetDragMarkers();
            this._endDate = RG.getDateAtClientX(e.clientX);
        };

        DragToCreate.prototype._removeDragMarkers = function () {
            $(".resources--cal-unit.drag-drop-target", this.line.$el).removeClass("drag-drop-target");
        };

        DragToCreate.prototype._changeDragMarkers = function (dateRange) {
            this._removeDragMarkers();
            this._addDragMarkers(dateRange);
        };

        DragToCreate.prototype._reset = function () {
            this._startDate = null;
            this._endDate = null;
        };

        DragToCreate.prototype._resetDragMarkers = function () {
            this._removeDragMarkers();
            this._addDragMarkers();
        };

        DragToCreate.prototype._triggerDialog = function (e) {
            var anchor, dateRange, placer, popover;
            this._isDragging = false;
            if (!this._hasValidDateRange()) {
                return;
            }
            if (!$("#resources").find(e.target).length) {
                this._removeDragMarkers();
                return;
            }
            this._addDragMarkers();
            dateRange = this._getDateRange();
            if (dateRange.getNumberOfDays() > 1) {
                e.target = this.lastUnit;
            }
            placer = new RG.Utils.EventPopoverPlacer(e, 'booking');
            anchor = placer.createAnchor({
                className: 'new-booking-downtime'
            });
            popover = this.line._bookingFormDialogFactory.create({
                dateRange: dateRange,
                resource: this.line.model,
                attachTo: anchor,
                removeCallback: this._removeDragMarkers.bind(this),
                changeCallback: this._changeDragMarkers.bind(this)
            });
            RG.Popovers.set(popover, this._removeDragMarkers.bind(this));
            this._reset();
        };

        return DragToCreate;

    })();

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Interactions.DragToCreateCustomAvailability = (function (superClass) {
        extend(DragToCreateCustomAvailability, superClass);

        function DragToCreateCustomAvailability() {
            this._triggerDialog = bind(this._triggerDialog, this);
            this._setStartDate = bind(this._setStartDate, this);
            return DragToCreateCustomAvailability.__super__.constructor.apply(this, arguments);
        }

        DragToCreateCustomAvailability.prototype._addDragMarkers = function (dateRange) {
            var date, i, len, ref;
            if (dateRange == null) {
                dateRange = null;
            }
            ref = this._getDates(dateRange);
            for (i = 0, len = ref.length; i < len; i++) {
                date = ref[i];
                this.lastUnit = $("#" + (RG.Utils.generateTimeUnitId(this.line.model.cid, date)) + " .utilisation", this.line.$el).addClass("drag-drop-target");
            }
        };

        DragToCreateCustomAvailability.prototype._setStartDate = function (e) {
            var $target, validTarget;
            $target = $(e.target);
            validTarget = $target.closest(".utilisation").length > 0 && this._isNotActivePopover(e);
            if (!validTarget || e.which !== 1) {
                return;
            }
            if (RG.Popovers.locked) {
                this._removeDragMarkers();
                return this._reset;
            }
            RG.Popovers.clear();
            this._isDragging = true;
            this._startDate = RG.getDateAtClientX(e.clientX);
            this._endDate = RG.getDateAtClientX(e.clientX);
        };

        DragToCreateCustomAvailability.prototype._removeDragMarkers = function () {
            $('.resources--cal-unit .js-custom-availability').remove();
            $(".resources--cal-unit .utilisation.drag-drop-target", this.line.$el).removeClass("drag-drop-target");
        };

        DragToCreateCustomAvailability.prototype._isNotActivePopover = function (e) {
            return $(e.target).closest(".js-availability-popover-parent").length === 0;
        };

        DragToCreateCustomAvailability.prototype._triggerDialog = function (e) {
            var dateRange, placer, popover;
            if (!this._isDragging) {
                return;
            }
            if (!this._isNotActivePopover(e)) {
                return;
            }
            this._isDragging = false;
            if (!this._hasValidDateRange()) {
                return;
            }
            this._addDragMarkers();
            dateRange = this._getDateRange();
            if (dateRange.getNumberOfDays() > 1) {
                e.target = this.lastUnit;
            }
            placer = new RG.Utils.EventPopoverPlacer(e, 'utilisation', {
                topAdjustment: -6
            });
            popover = new RG.Views.Dialogs.CustomAvailabilityPopover({
                attachTo: placer.createAnchor({
                    className: 'custom-availability'
                }),
                removeAttachTo: true,
                callback: this._removeDragMarkers.bind(this),
                changeCallback: this._changeDragMarkers.bind(this),
                line: this.line,
                dateRange: dateRange,
                resource: this.line.model
            });
            RG.Popovers.set(popover, this._removeDragMarkers.bind(this));
            this._reset();
        };

        return DragToCreateCustomAvailability;

    })(RG.Interactions.DragToCreate);

}).call(this);
;
(function () {
    RG.Interactions.MoveBookingDates = (function () {
        function MoveBookingDates(options) {
            this._booking = options.booking;
            this.resource = options.resource;
            this.sourceDate = options.sourceDate;
            this.targetDate = options.targetDate;
            this.cachedResults = {};
        }

        MoveBookingDates.prototype.getNewDates = function () {
            var cacheKey, result;
            cacheKey = {
                source: this.sourceDate,
                target: this.targetDate,
                resource: this.resource
            };
            result = this.cachedResults[JSON.stringify(cacheKey)];
            if (result) {
                return result;
            }
            return this.newDates(cacheKey, this._booking.getDurations());
        };

        MoveBookingDates.prototype.newDates = function (cacheKey, durations) {
            var availability, date, options;
            availability = this.resource.availability;
            date = new Date(this.targetDate.getFullYear(), this.targetDate.getMonth(), this.targetDate.getDate());
            options = {
                date: date,
                dates: [],
                durations: durations.filter(function (d) {
                    return d.getMinutes() > 0;
                }),
                durationIndex: 0,
                availability: availability,
                noNormalAvailability: availability.hasNoNormalAvailability(),
                lastCap: availability.customAvailablePeriods.last(),
                firstCap: availability.customAvailablePeriods.first()
            };
            if (options.noNormalAvailability) {
                if (options.availability.customAvailablePeriods.length < options.durations.length) {
                    return [];
                } else {
                    if (options.date.valueOf() >= options.lastCap.get('date').valueOf()) {
                        options.durationIndex = options.durations.length - 1;
                    } else {
                        options = this._setDurationIndex(options);
                    }
                }
            } else {
                options = this._setDurationIndex(options);
            }
            options = this._moveLeft(options);
            options.date = new Date(this.targetDate.getFullYear(), this.targetDate.getMonth(), this.targetDate.getDate() + 1);
            options = this._moveRight(options);
            options = this._trimDates(options);
            options = this._ensureCapMatch(options);
            return this.cachedResults[JSON.stringify(cacheKey)] = options.dates;
        };

        MoveBookingDates.prototype._moveLeft = function (options) {
            var counter, dateRange, unshiftedDate;
            if (options.noNormalAvailability && options.firstCap.get('date').valueOf() >= options.date.valueOf()) {
                return options;
            }
            dateRange = new RG.Utils.DateRange(options.date, options.date);
            counter = 0;
            while (options.dates.length <= options.durationIndex) {
                if (options.availability.isAvailableIn(dateRange)) {
                    unshiftedDate = new Date(options.date.getFullYear(), options.date.getMonth(), options.date.getDate());
                    options.dates.unshift(unshiftedDate);
                }
                counter += 1;
                if (counter > 1000) {
                    options.dates = [];
                    return options;
                }
                options.date.setDate(options.date.getDate() - 1);
            }
            return options;
        };

        MoveBookingDates.prototype._moveRight = function (options) {
            var counter, dateRange, dateToPush;
            dateRange = new RG.Utils.DateRange(options.date, options.date);
            counter = 0;
            while (options.dates.length < options.durations.length) {
                if (options.availability.isAvailableIn(dateRange) || options.noNormalAvailability && options.lastCap.get('date').valueOf() <= options.date.valueOf()) {
                    dateToPush = new Date(options.date.getFullYear(), options.date.getMonth(), options.date.getDate());
                    options.dates.push(dateToPush);
                }
                counter += 1;
                if (counter > 1000) {
                    options.dates = [];
                    return options;
                }
                options.date.setDate(options.date.getDate() + 1);
            }
            return options;
        };

        MoveBookingDates.prototype._trimDates = function (options) {
            while (options.dates.length > options.durations.length) {
                options.dates.pop();
            }
            return options;
        };

        MoveBookingDates.prototype._setDurationIndex = function (options) {
            var duration;
            duration = _.find(options.durations, (function (_this) {
                return function (d) {
                    return RG.Utils.DateComparator.equalsYMD(_this.sourceDate, d.get('date'));
                };
            })(this));
            options.durationIndex = _.indexOf(options.durations, duration);
            return options;
        };

        MoveBookingDates.prototype._ensureCapMatch = function (options) {
            var periods;
            if (options.noNormalAvailability) {
                periods = options.availability.customAvailablePeriods.filter(function (cap) {
                    return options.dates.some(function (date) {
                        return date.valueOf() === cap.get('date').valueOf();
                    });
                });
                if (periods.length !== options.dates.length) {
                    options.dates = [];
                }
            }
            return options;
        };

        return MoveBookingDates;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Interactions.MoveDowntimeDates = (function (superClass) {
        extend(MoveDowntimeDates, superClass);

        function MoveDowntimeDates(options) {
            MoveDowntimeDates.__super__.constructor.apply(this, arguments);
            this.offsetIndex = options.offsetIndex;
        }

        MoveDowntimeDates.prototype.newDates = function (cacheKey, durations) {
            var date, dateRange, dateToPush, dates, duration, durationIndex, unshiftedDate;
            duration = _.find(durations, (function (_this) {
                return function (d) {
                    return RG.Utils.DateComparator.equalsYMD(_this.sourceDate, d.get('date'));
                };
            })(this));
            durationIndex = _.indexOf(durations, duration);
            if (durationIndex === -1) {
                durationIndex = 0;
            }
            dates = [];
            date = new Date(this.targetDate.getFullYear(), this.targetDate.getMonth(), this.targetDate.getDate());
            dateRange = new RG.Utils.DateRange(date, date);
            while (dates.length <= durationIndex) {
                unshiftedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                dates.unshift(unshiftedDate);
                date.setDate(date.getDate() - 1);
            }
            date = new Date(this.targetDate.getFullYear(), this.targetDate.getMonth(), this.targetDate.getDate() + 1);
            dateRange = new RG.Utils.DateRange(date, date);
            while (dates.length < durations.length) {
                dateToPush = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                dates.push(dateToPush);
                date.setDate(date.getDate() + 1);
            }
            while (dates.length > durations.length) {
                dates.pop();
            }
            return this.cachedResults[JSON.stringify(cacheKey)] = dates;
        };

        return MoveDowntimeDates;

    })(RG.Interactions.MoveBookingDates);

}).call(this);
;
(function () {
    RG.Interactions.ResizeBooking = (function () {
        function ResizeBooking(bookingView) {
            this.bookingView = bookingView;
        }

        ResizeBooking.prototype.detach = function () {
            RG.Popovers.locked = false;
            return RG.renderer.unlock(this.rendererLock);
        };

        ResizeBooking.prototype.attach = function () {
            var resize;
            resize = {
                leftAdjustmentDays: null,
                rightAdjustmentDays: null,
                startDate: null,
                endDate: null,
                dates: []
            };
            return this.bookingView.$el.resizable({
                handles: "e, w",
                start: (function (_this) {
                    return function () {
                        RG.Popovers.locked = false;
                        RG.Popovers.clear();
                        return _this._start(resize);
                    };
                })(this),
                resize: (function (_this) {
                    return function (event, ui) {
                        return _this._resize(resize, event, ui);
                    };
                })(this),
                stop: (function (_this) {
                    return function (event, ui) {
                        return _this._stop(resize, event, ui);
                    };
                })(this)
            });
        };

        ResizeBooking.prototype._start = function (resize) {
            this.bookingView.$el.find('.unit').hide();
            this.bookingView.$el.resizable("option", "minWidth", RG.getUnitWidth() - 2);
            this.offsetTop = this.bookingView.$el.offset().top + 40;
            this.bookingView.isInInteraction = true;
            resize.booking = this.bookingView.model.realBooking;
            resize.resource = this.bookingView._getBookingResource();
            this.rendererLock = new RG.Renderer.ResourceDateLock(resize.resource, new Date(resize.booking.getFirstAllocatedDate()), new Date(resize.booking.getLastAllocatedDate()));
            RG.renderer.lock(this.rendererLock);
            return RG.Popovers.lock();
        };

        ResizeBooking.prototype._resize = function (resize, event, ui) {
            var currentDate, day, days, i, leftAdjustment, ref, ref1, rightAdjustment, unitWidth, width, width_start_date;
            width = $(ui.element).width();
            unitWidth = RG.getUnitWidth();
            leftAdjustment = ui.position.left - ui.originalPosition.left;
            rightAdjustment = ui.size.width - ui.originalSize.width + leftAdjustment;
            resize.leftAdjustmentDays = Math.floor(leftAdjustment / RG.getUnitWidth());
            resize.rightAdjustmentDays = Math.ceil(rightAdjustment / RG.getUnitWidth());
            resize.startDate = new Date(resize.booking.getFirstAllocatedDate());
            resize.endDate = new Date(resize.booking.getLastAllocatedDate());
            resize.startDate.setDate(resize.startDate.getDate() + resize.leftAdjustmentDays);
            resize.endDate.setDate(resize.endDate.getDate() + resize.rightAdjustmentDays);
            days = new RG.Utils.DateRange(resize.startDate, resize.endDate).getNumberOfDays() - 1;
            width_start_date = resize.startDate;
            if (RG.Utils.firstVisibleDate()._d > width_start_date) {
                width_start_date = RG.Utils.firstVisibleDate()._d;
            }
            width = new RG.Utils.DateRange(width_start_date, resize.endDate).getNumberOfDays() - 1;
            $(ui.element).width(((width + 1) * RG.getUnitWidth()) - 1);
            $(ui.element).css({
                left: (RG.getUnitWidth() * resize.leftAdjustmentDays) - 1
            });
            resize.dates = [];
            for (day = i = ref = resize.startDate.getDate(), ref1 = resize.startDate.getDate() + days; ref <= ref1 ? i <= ref1 : i >= ref1; day = ref <= ref1 ? ++i : --i) {
                currentDate = new Date(resize.startDate);
                currentDate.setDate(day);
                if (this._isAvailableIn(resize.resource, currentDate)) {
                    resize.dates.push(currentDate);
                }
            }
            if (_.any(resize.dates, function (d) {
                return RG.Utils.DateComparator.equalsYMD(d, resize.startDate);
            }) && _.any(resize.dates, function (d) {
                return RG.Utils.DateComparator.equalsYMD(d, resize.endDate);
            })) {
                return $(ui.element).removeClass("no-drop");
            } else {
                return $(ui.element).addClass("no-drop");
            }
        };

        ResizeBooking.prototype._stop = function (resize, event, ui) {
            var booking, changed, command, date, duration, i, index, initialDuration, j, len, len1, newDurations, oldBookingDates, oldDate, originalAttributes, originalDurations, originalResource, ref, ref1, resource;
            resource = resize.resource;
            booking = resize.booking;
            oldBookingDates = booking.getDateRange().getDates();
            changed = resize.dates.length !== oldBookingDates.length;
            Q.delay(10).then(function () {
                return RG.Popovers.locked = false;
            });
            ref = resize.dates;
            for (index = i = 0, len = ref.length; i < len; index = ++i) {
                date = ref[index];
                if (!(!changed)) {
                    continue;
                }
                oldDate = oldBookingDates[index];
                changed = !oldDate || !RG.Utils.DateComparator.equalsYMD(date, oldDate);
            }
            if (resize.leftAdjustmentDays === 0 && resize.rightAdjustmentDays === 0 || !changed) {
                resource.bookings.remove(booking);
                resource.bookings.add(booking);
                RG.renderer.unlock(this.rendererLock);
                return;
            }
            originalAttributes = booking.attributes;
            originalDurations = booking.durations.models;
            initialDuration = originalDurations[0];
            newDurations = [];
            ref1 = resize.dates;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                date = ref1[j];
                duration = initialDuration.clone();
                duration.set({
                    date: date,
                    waiting: _.select(booking.durations.where({
                        waiting: true
                    }), function (d) {
                        return RG.Utils.DateComparator.equalsYMD(d.get('date'), date);
                    }).length > 0
                });
                newDurations.push(duration);
            }
            RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(resource, resize.startDate, resize.endDate), function () {
                booking.set({
                    saving: true,
                    startDate: resize.startDate,
                    endDate: resize.endDate
                });
                booking.durations.reset(newDurations);
                resource.bookings.remove(booking);
                return resource.bookings.add(booking);
            });
            originalResource = resource;
            this.bookingView.$el.find('.unit').hide();
            this.bookingView.isInInteraction = false;
            RG.renderer.unlock(this.rendererLock);
            command = new RG.Commands.UpdateBookingCommand({
                booking: booking,
                resource: resource,
                startDate: resize.dates[0],
                endDate: resize.dates[resize.dates.length - 1],
                successCallback: function (data) {
                    return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(resource, resize.startDate, resize.endDate), function () {
                        var k, len2, ref2, responseDuration;
                        booking.set({
                            startDate: RG.Utils.BookingMerger.getDateFromStr(data.start_date),
                            endDate: RG.Utils.BookingMerger.getDateFromStr(data.end_date),
                            refreshable: data.refreshable,
                            saving: false
                        });
                        ref2 = booking.durations.models;
                        for (k = 0, len2 = ref2.length; k < len2; k++) {
                            duration = ref2[k];
                            responseDuration = _.find(data.durations, function (d) {
                                return d.date === RG.Utils.DateFormatter.getISODate(duration.get('date'));
                            });
                            if (responseDuration) {
                                duration.set({
                                    waiting: responseDuration.waiting
                                });
                            }
                        }
                        return window.update();
                    });
                }
            });
            command.removedDatesCallback = (function (_this) {
                return function (removedDates) {
                    var placer, popover, removedDatesDialog;
                    removedDatesDialog = new RG.Views.Dialogs.RemovedAvailabilityDates({
                        resource: resource,
                        removedAvailabilityDates: removedDates
                    });
                    placer = new RG.Utils.DatePopoverPlacer(resource, new Date(removedDates[0]), {
                        offsetTop: _this.offsetTop
                    });
                    popover = new RG.Views.Dialogs.BookingClashPopover({
                        removeAttachTo: true,
                        attachTo: placer.createAnchor({
                            className: 'booking-clash-popover-anchor'
                        }),
                        body: removedDatesDialog,
                        className: 'edit-booking-dropdown'
                    });
                    return RG.Popovers.replace({
                        popoverView: popover,
                        removeCallback: function () { }
                    });
                };
            })(this);
            command.waitingCallback = (function (_this) {
                return function (waitingDates) {
                    var waitingConfirmation;
                    RG.Popovers.unlock();
                    waitingConfirmation = new RG.Views.Dialogs.WaitingListConfirmation({
                        resource: resource,
                        waitingDates: waitingDates,
                        duration: newDurations[0].getMinutes(),
                        startDate: resize.dates[0],
                        endDate: resize.dates[resize.dates.length - 1],
                        cancelCallback: function () {
                            return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(resource, resize.startDate, resize.endDate), function () {
                                booking.set(originalAttributes);
                                booking.set({
                                    saving: false
                                });
                                booking.durations.reset(originalDurations);
                                resource.bookings.remove(booking, {
                                    silent: true
                                });
                                return resource.bookings.add(booking);
                            });
                        },
                        callback: function () {
                            return RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(resource, resize.startDate, resize.endDate), function () {
                                var k, len2, ref2;
                                booking.set({
                                    saving: false
                                });
                                ref2 = booking.durations.models;
                                for (k = 0, len2 = ref2.length; k < len2; k++) {
                                    duration = ref2[k];
                                    if (waitingDates.indexOf(RG.Utils.DateFormatter.getISODate(duration.get('date'))) > -1) {
                                        duration.set({
                                            waiting: true
                                        });
                                    }
                                }
                                command.forceWaiting = true;
                                return command.execute();
                            });
                        }
                    });
                    _this._waitingPopover(resource, new Date(waitingDates[0]), waitingConfirmation);
                    return waitingConfirmation.on('addWaiting', function () {
                        return RG.Popovers.done();
                    });
                };
            })(this);
            command.archivedCallback = function (data) {
                return RG.Utils.BookingService.reset(data, resource, booking, originalAttributes, originalDurations);
            };
            return command.execute().then(function () {
                return RG.Popovers.unlock();
            });
        };

        ResizeBooking.prototype._isAvailableIn = function (resource, date) {
            if (this.availability == null) {
                this.availability = resource.availability;
            }
            return this.availability.isAvailableIn(new RG.Utils.DateRange(date, date));
        };

        ResizeBooking.prototype._waitingPopover = function (resource, date, waitingConfirmation, callback) {
            var placer;
            if (callback == null) {
                callback = waitingConfirmation.cancelCallback;
            }
            placer = new RG.Utils.DatePopoverPlacer(resource, date, {
                offsetTop: this.offsetTop
            });
            this.popover = new RG.Views.Dialogs.BookingClashPopover({
                removeAttachTo: true,
                attachTo: placer.createAnchor({
                    className: 'booking-clash-popover-anchor'
                }),
                body: waitingConfirmation,
                className: 'edit-booking-dropdown'
            });
            return RG.Popovers.replace({
                popoverView: this.popover,
                removeCallback: callback
            });
        };

        return ResizeBooking;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Interactions.ResizeDowntime = (function (superClass) {
        extend(ResizeDowntime, superClass);

        function ResizeDowntime() {
            return ResizeDowntime.__super__.constructor.apply(this, arguments);
        }

        ResizeDowntime.prototype._start = function (resize) {
            this.bookingView.$el.resizable("option", "minWidth", RG.getUnitWidth() - 2);
            this.offsetTop = this.bookingView.$el.offset().top + 40;
            resize.resource = this.bookingView._getBookingResource();
            resize.booking = this.bookingView.model.realBooking.inTimeZone(resize.resource.getTimeZone());
            resize.initialTimeZone = this.bookingView.model.realBooking.getTimeZone();
            this.rendererLock = new RG.Renderer.ResourceDateLock(resize.resource, new Date(resize.booking.getFirstAllocatedDate()), new Date(resize.booking.getLastAllocatedDate()));
            RG.renderer.lock(this.rendererLock);
            return RG.Popovers.lock();
        };

        ResizeDowntime.prototype._stop = function (resize, event, ui) {
            var account, calendarUpdater, command, dateTimeRange, downtime, originalAttributes, originalResource, realDowntime, resizingLeft, resource, resourceDowntime, resources;
            resourceDowntime = resize.booking;
            downtime = window.downtimes.findWhere({
                id: resize.booking.id
            });
            resource = resize.resource;
            account = resource.account;
            if (resize.startDate < downtime.get('from')) {
                resizingLeft = true;
            }
            originalAttributes = {
                from: downtime.get('from'),
                to: downtime.get('to'),
                saving: false
            };
            downtime.set({
                saving: true,
                from: resize.startDate,
                to: resize.endDate
            });
            dateTimeRange = {
                dateRange: downtime.getDateRange(),
                timeRange: downtime.getRawTimeRange()
            };
            originalResource = resource;
            realDowntime = downtime;
            resources = window.resources.select(function (r) {
                return downtime.get('resourceIds').indexOf(r.id) !== -1;
            });
            calendarUpdater = new RG.Utils.DowntimeCalendarUpdater(window.currentUserId, account, window.resources, window.timeZones, resources);
            RG.renderer.enqueue(new RG.Renderer.ResourceDateLock(resource, resize.startDate, resize.endDate), function () {
                downtime.set({
                    saving: true,
                    from: resize.startDate,
                    to: resize.endDate
                });
                downtime = downtime.inTimeZone(resize.initialTimeZone);
                return resourceDowntime.set(downtime.attributes);
            });
            RG.renderer.unlock(this.rendererLock);
            command = new RG.Commands.UpdateDowntimeCommand({
                downtime: downtime,
                account: account,
                booker: window.bookers.findWhere({
                    id: downtime.get('creatorId')
                }),
                resources: resources,
                dateTimeRange: dateTimeRange,
                details: downtime.get('details'),
                timeZones: window.timeZones,
                timeZone: downtime.getTimeZone().getParamValue(),
                type: downtime.getDowntimeType(),
                preExecuteCallback: function (dTime, durations, shouldDelete) {
                    Q.delay(100).then(function () {
                        RG.Popovers.unlock();
                        return RG.Popovers.done();
                    });
                    return calendarUpdater.update(downtime, durations, shouldDelete);
                },
                successCallback: function (dTime) {
                    realDowntime.set({
                        saving: false
                    });
                    return window.update();
                }
            });
            return command.willTouchBookings({
                success: (function (_this) {
                    return function (bookings) {
                        var date, waitingConfirmation, wasCancelClicked;
                        RG.Popovers.locked = false;
                        wasCancelClicked = true;
                        waitingConfirmation = new RG.Views.Dialogs.BookingClashManagement({
                            command: command,
                            clashBookingsCount: bookings.length,
                            successCallback: function () {
                                return wasCancelClicked = false;
                            },
                            cancelCallback: function () {
                                RG.Popovers.locked = false;
                                if (wasCancelClicked) {
                                    realDowntime.set(originalAttributes);
                                    return calendarUpdater.updateAffectedResources();
                                }
                            }
                        });
                        date = dateTimeRange.dateRange.endDate;
                        if (resizingLeft) {
                            date = dateTimeRange.dateRange.startDate;
                        }
                        return setTimeout(function () {
                            return _this._waitingPopover(resource, date, waitingConfirmation);
                        }, 0);
                    };
                })(this),
                fail: function () {
                    command.execute();
                    return Q.delay(10).then(function () {
                        return RG.Popovers.locked = false;
                    });
                }
            });
        };

        ResizeDowntime.prototype._isAvailableIn = function (resource, date) {
            return true;
        };

        ResizeDowntime.prototype._getTimeAllocationAfterResize = function (resize) {
            return resize.booking.inTimeZone(resize.initialTimeZone);
        };

        return ResizeDowntime;

    })(RG.Interactions.ResizeBooking);

}).call(this);
;
(function () {
    RG.Interactions.RightClickDragToScroll = (function () {
        function RightClickDragToScroll(el1) {
            this.el = el1;
            this.isDragging = false;
            this._lastOffset = {};
            this.jEl = $(this.el);
        }

        RightClickDragToScroll.prototype.attach = function () {
            var isOldSafari, toggle, userAgent;
            userAgent = this._getNormalizedUserAgentString();
            isOldSafari = userAgent.indexOf("safari") !== -1 && userAgent.indexOf("chrome") === -1 && this.getSafariVersion() < 7;
            toggle = true;
            $(this.el).on('contextmenu', (function (_this) {
                return function (e) {
                    return _this._elementAllowsRightClick(e.target);
                };
            })(this));
            $(this.el).on('mousedown', (function (_this) {
                return function (e) {
                    if (e.which !== 3) {
                        return;
                    }
                    if (_this._elementAllowsRightClick(e.target)) {
                        return true;
                    }
                    _this.isDragging = true;
                    _this._lastOffset = {
                        x: e.clientX,
                        y: e.clientY
                    };
                    return false;
                };
            })(this));
            $(this.el).on('mouseup', (function (_this) {
                return function (e) {
                    if (e.which !== 3) {
                        return;
                    }
                    return _this.isDragging = false;
                };
            })(this));
            return $(this.el).on('mousemove', (function (_this) {
                return function (e) {
                    var moveX, moveY;
                    if (!_this.isDragging) {
                        return;
                    }
                    if (_this.animationQueued) {
                        return;
                    }
                    if (RG.Popovers.locked) {
                        _this.isDragging = false;
                        return;
                    }
                    _this.animationQueued = true;
                    moveX = e.clientX - _this._lastOffset.x;
                    moveY = e.clientY - _this._lastOffset.y;
                    if (isOldSafari) {
                        if (toggle) {
                            _this._lastOffset.x = e.clientX;
                            _this.jEl.scrollLeft(_this.jEl.scrollLeft() - moveX);
                        } else {
                            _this._lastOffset.y = e.clientY;
                            _this.jEl.scrollTop(_this.jEl.scrollTop() - moveY);
                        }
                        toggle = !toggle;
                    } else {
                        _this._lastOffset = {
                            x: e.clientX,
                            y: e.clientY
                        };
                        _this.jEl.scrollLeft(_this.jEl.scrollLeft() - moveX);
                        _this.jEl.scrollTop(_this.jEl.scrollTop() - moveY);
                    }
                    return _this.animationQueued = false;
                };
            })(this));
        };

        RightClickDragToScroll.prototype._getNormalizedUserAgentString = function () {
            return navigator.userAgent.toLowerCase();
        };

        RightClickDragToScroll.prototype._elementAllowsRightClick = function (el) {
            var $el;
            $el = $(el);
            return $el.closest("#resources").length === 0 || $el.closest(".f-dropdown").length !== 0;
        };

        RightClickDragToScroll.prototype.getSafariVersion = function () {
            var match, userAgent, versionPatt;
            userAgent = this._getNormalizedUserAgentString();
            versionPatt = /version\/(\d+)\.(\d+)/i;
            match = versionPatt.exec(userAgent);
            if (match) {
                return parseFloat(match[1] + "." + match[2]);
            } else {
                return 0;
            }
        };

        return RightClickDragToScroll;

    })();

}).call(this);
;
(function () {
    RG.DTO.BookingDuration = (function () {
        function BookingDuration(options) {
            this.duration = options.duration;
            this.startTime = options.startTime;
        }

        return BookingDuration;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Routers.Calendar = (function (superClass) {
        extend(Calendar, superClass);

        function Calendar() {
            return Calendar.__super__.constructor.apply(this, arguments);
        }

        Calendar.prototype.initialize = function (options) {
            this.root = options.root;
            this.rendered = false;
            return this.dateController = null;
        };

        Calendar.prototype.routes = {
            '': 'index',
            ':year-:month-:day': 'scrollDate'
        };

        Calendar.prototype.index = function () {
            if (!this.rendered) {
                this._render();
            }
            return this.openAtUnit(".cal-unit.current");
        };

        Calendar.prototype.openAtUnit = function (selector) {
            return this.scrollToUnit(selector).then(function () {
                return $("#loader").hide();
            });
        };

        Calendar.prototype.scrollToUnit = function (selector) {
            var offsetLeft, scrollFunc;
            offsetLeft = $("aside").width() - 1;
            scrollFunc = function (resolve) {
                var element;
                element = $(selector);
                if (element.length > 0 && RG.Utils.unitsRendered()) {
                    return window.setTimeout(function () {
                        if (typeof newrelic !== "undefined" && newrelic !== null) {
                            newrelic.finished();
                        }
                        // Tracker.mark('ready');
                        return window.requestAnimationFrame(function () {
                            $("html, body").animate({
                                scrollLeft: element.first().offset().left - offsetLeft
                            });
                            return resolve();
                        });
                    }, 500);
                } else {
                    return setTimeout(function () {
                        return scrollFunc(resolve);
                    }, 100);
                }
            };
            return Q.promise(scrollFunc);
        };

        Calendar.prototype.scrollDate = function (year, month, date) {
            var browser, d, dd, klassName, m, y;
            if (this.rendered) {
                return true;
            }
            y = parseInt(year, 10);
            m = parseInt(month, 10);
            d = parseInt(date, 10);
            dd = new Date(y, m - 1, d);
            if (!this.rendered) {
                this._render(dd);
                browser = $('html').attr('class');
                klassName = '.cal-unit';
                if (browser.indexOf('ff') !== -1 || browser.indexOf('safari') !== -1) {
                    klassName = '.resources--cal-unit';
                }
                return this.openAtUnit(klassName + "[data-date=" + (RG.Utils.DateFormatter.getISODate(dd)) + "]:visible");
            } else {
                return this.dateController.scrollToDate(dd);
            }
        };

        Calendar.prototype._render = function (initialDate) {
            var $document, $window, colorBookingsBy, d, filterSource, initDate, layout, screenWidthPeriods;
            $window = $(window);
            $document = $(document);
            window.colorSource = new RG.Utils.ColorSource;
            colorBookingsBy = window.rgStorage.get('colorBookingsBy');
            if (colorBookingsBy) {
                window.colorSource.colorBy(colorBookingsBy);
            }
            window.ugc = new RG.Collections.UnitGroupings;
            window.dateController = new RG.Controllers.DayUnitGroupings(ugc);
            d = initialDate || new Date;
            screenWidthPeriods = $(window).width() / (7 * 40);
            initDate = new Date(d.getFullYear(), d.getMonth(), d.getDate() - d.getDay() + 1);
            dateController.init(initDate, d);
            dateController.prepend(2);
            dateController.append(screenWidthPeriods);
            this.dateController = dateController;
            if (window.clients == null) {
                window.clients = new RG.Collections.Clients;
            }
            if (window.projects == null) {
                window.projects = new RG.Collections.Projects;
            }
            if (window.resources == null) {
                window.resources = new RG.Collections.ResourceInstances;
            }
            if (window.resourceTypes == null) {
                window.resourceTypes = new RG.Collections.ResourceTypes;
            }
            if (window.bookers == null) {
                window.bookers = new RG.Collections.Bookers;
            }
            if (window.savedFilters == null) {
                window.savedFilters = new RG.Collections.SavedFilters;
            }
            if (window.currentUserDate == null) {
                window.currentUserDate = new RG.Models.CurrentDate(RG.Utils.getTodayISO());
            }
            filterSource = new RG.Utils.FilterSource(window.resourceTypes, window.resources, window.projects, window.clients);
            layout = new RG.Views.Calendar.Layout({
                dateController: this.dateController,
                initialDate: initialDate,
                periodGroupings: window.ugc,
                resources: window.resources,
                savedFilters: window.savedFilters,
                filterSource: filterSource,
                colorSource: window.colorSource,
                currentUserId: window.currentUserId,
                clients: window.clients,
                deletedClients: window.deletedClients,
                projects: window.projects,
                deletedProjects: window.deletedProjects,
                bookers: window.bookers,
                deletedBookers: window.deletedBookers,
                downtimeTypes: window.downtimeTypes,
                timeZones: window.timeZones,
                currentUserTimeZone: window.currentUserTimeZone,
                currentDate: window.currentUserDate
            });
            layout.render();
            if (window.rgStorage.get('zoomLevel') === "detailed") {
                layout.el.className = "daily detailed";
            } else {
                layout.el.className = "daily";
            }
            layout.el.style.display = "none";
            this.root.replaceWith(layout.el);
            layout._resize();
            this.dateController.updateUI();
            layout.setInitialFilters();
            layout.setInitialResource();
            return this.rendered = true;
        };

        return Calendar;

    })(Backbone.Router);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Renderer.ResourceDateLock = (function () {
        function ResourceDateLock(resource, startDate, endDate) {
            this.resource = resource;
            this.dateRange = new RG.Utils.DateRange(startDate, endDate);
        }

        ResourceDateLock.prototype.isLockedBy = function (lock) {
            if (lock.constructor === RG.Renderer.GlobalLock) {
                return true;
            }
            return this.dateRange.overlapsWith(lock.dateRange) && this.resource === lock.resource;
        };

        return ResourceDateLock;

    })();

    RG.Renderer.ResourcesDateLock = (function (superClass) {
        extend(ResourcesDateLock, superClass);

        function ResourcesDateLock() {
            return ResourcesDateLock.__super__.constructor.apply(this, arguments);
        }

        ResourcesDateLock.prototype.isLockedBy = function (lock) {
            if (lock.constructor === RG.Renderer.GlobalLock) {
                return true;
            }
            return this.dateRange.overlapsWith(lock.dateRange) && this.resources && this.resources.indexOf(lock.resource) !== -1;
        };

        return ResourcesDateLock;

    })(RG.Renderer.ResourceDateLock);

    RG.Renderer.GlobalLock = (function () {
        function GlobalLock() {
            setTimeout((function (_this) {
                return function () {
                    if (RG.renderer.locks.indexOf(_this) !== -1) {
                        return RG.renderer.unlock(_this);
                    }
                };
            })(this), 20000);
        }

        GlobalLock.prototype.isLockedBy = function (lock) {
            return true;
        };

        return GlobalLock;

    })();

}).call(this);
;
(function () {
    RG.Renderer.Renderer = (function () {
        function Renderer() {
            this.queue = [];
            this.locks = [];
        }

        Renderer.prototype.enqueue = function (lock, fn) {
            this.queue.push({
                lock: lock,
                fn: fn
            });
            return this.render();
        };

        Renderer.prototype.lock = function (lock) {
            return this.locks.push(lock);
        };

        Renderer.prototype.unlock = function (lock) {
            var index;
            index = this.locks.indexOf(lock);
            if (index > -1) {
                this.locks.splice(index, 1);
            }
            return this.render();
        };

        Renderer.prototype.isLocked = function (action) {
            var i, len, lock, ref;
            ref = this.locks;
            for (i = 0, len = ref.length; i < len; i++) {
                lock = ref[i];
                if (action.lock.isLockedBy(lock)) {
                    return true;
                }
            }
            return false;
        };

        Renderer.prototype.render = function (queue) {
            var action, i, index, j, len, len1, processedActionIndexes, results;
            if (queue == null) {
                queue = this.queue;
            }
            if (this.paused) {
                return;
            }
            processedActionIndexes = [];
            for (index = i = 0, len = queue.length; i < len; index = ++i) {
                action = queue[index];
                if (!this.isLocked(action)) {
                    action.fn();
                    processedActionIndexes.unshift(index);
                }
            }
            results = [];
            for (j = 0, len1 = processedActionIndexes.length; j < len1; j++) {
                index = processedActionIndexes[j];
                results.push(this.queue.splice(index, 1));
            }
            return results;
        };

        Renderer.prototype.renderAfter = function (queue) {
            if (!queue.some((function (_this) {
                return function (action) {
                    return _this.isLocked(action);
                };
            })(this))) {
                return this.render(queue);
            } else {
                return setTimeout((function (_this) {
                    return function () {
                        return _this.renderAfter(queue);
                    };
                })(this), 50);
            }
        };

        Renderer.prototype.pause = function () {
            return this.paused = true;
        };

        Renderer.prototype.unpause = function () {
            this.paused = false;
            return this.render();
        };

        Renderer.prototype.unlockAll = function () {
            var action, i, len, ref;
            ref = this.queue;
            for (i = 0, len = ref.length; i < len; i++) {
                action = ref[i];
                action.fn();
            }
            this.queue = [];
            return this.locks = [];
        };

        return Renderer;

    })();

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.NewDowntime = (function (superClass) {
        extend(NewDowntime, superClass);

        function NewDowntime() {
            this.toggleTimeZoneSelector = bind(this.toggleTimeZoneSelector, this);
            return NewDowntime.__super__.constructor.apply(this, arguments);
        }

        NewDowntime.prototype.template = templates.find('dialogs/new_downtime');

        NewDowntime.prototype.headerTemplate = templates.find('dialogs/new_downtime_header');

        NewDowntime.prototype.initialize = function (options) {
            this.currentUserId = options.currentUserId;
            this.resources = options.resources;
            this.resource = options.resource;
            this.interactedResource = options.resource;
            this.selectedResources = [this.resource];
            this.account = this.resource.account;
            this.bookers = options.bookers;
            this.dateRange = options.dateRange;
            this.timeRange = options.timeRange || new RG.Utils.TimeRange(0, 1440);
            this.downtimeTypes = options.downtimeTypes;
            this.timeZones = options.timeZones;
            this.currentUserTimeZone = options.currentUserTimeZone;
            this.successCallback = options.successCallback;
            this.renderHeader = options.renderHeader;
            this.spinnerAttachToEl = options.spinnerAttachToEl;
            return this.resourceSelector = new RG.Views.Downtimes.ResourceSelector({
                resources: this.resources,
                selected: this.selectedResources,
                itemClassName: 'multiselect-downtime-item',
                groupClassName: 'multiselect-downtime-group',
                onChange: this.toggleTimeZoneSelector
            });
        };

        NewDowntime.prototype.close = function () {
            if (typeof e !== "undefined" && e !== null) {
                e.stopPropagation();
            }
            return this.trigger("close");
        };

        NewDowntime.prototype.remove = function () {
            var ref, ref1, ref2, ref3;
            if ((ref = this.resourceSelector) != null) {
                ref.remove();
            }
            if ((ref1 = this.dateTimeRangeSelector) != null) {
                ref1.remove();
            }
            if ((ref2 = this.downtimeTypeSelector) != null) {
                ref2.remove();
            }
            if ((ref3 = this.vacationAllowance) != null) {
                ref3.remove();
            }
            return NewDowntime.__super__.remove.apply(this, arguments);
        };

        NewDowntime.prototype.render = function () {
            var html;
            html = [];
            if (this.renderHeader) {
                html.push(this.headerTemplate());
            }
            html.push(this.template());
            this.$el.html(html.join(""));
            this._fillValues();
            this._bindEvents();
            return this;
        };

        NewDowntime.prototype._bindEvents = function () {
            this.$el.on("click", ".chzn-single", (function (_this) {
                return function (e) {
                    return _this.trigger("shrinkDropdown", e);
                };
            })(this));
            this.$el.on("click", (function (_this) {
                return function (e) {
                    var ref;
                    if (!$(e.target).hasClass('js-tooltip')) {
                        return (ref = _this.vacationAllowance) != null ? ref.closeAllPopovers() : void 0;
                    }
                };
            })(this));
            this.$el.on("click", "#cancel", (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return _this.close();
                };
            })(this));
            this.$el.on("click", "#add-downtime", (function (_this) {
                return function (e) {
                    _this.resourceSelector.searchBlur();
                    return Q.delay(15).then(function () {
                        e.preventDefault();
                        e.stopPropagation();
                        return _this.createDowntime();
                    });
                };
            })(this));
            this.$el.on("click", (function (_this) {
                return function () {
                    _this.$('.js-menu-options').hide();
                    RG.Utils.select2Close($(".select2-drop"), true);
                    return _this.resourceSelector.searchBlur();
                };
            })(this));
            return this.dateTimeRangeSelector.on('change', (function (_this) {
                return function (dateRange, timeRange) {
                    _this.dateRange = dateRange;
                    _this.timeRange = timeRange;
                    return _this.trigger('change', dateRange);
                };
            })(this));
        };

        NewDowntime.prototype.validate = function () {
            var flag;
            flag = true;
            if (this.timeZoneSelector) {
                flag = this.dateTimeRangeSelector.validate() & this.timeZoneSelector.validate() & this.resourceSelector.validate();
            } else {
                flag = this.dateTimeRangeSelector.validate() & this.resourceSelector.validate();
            }
            this.trigger('validate');
            return flag;
        };

        NewDowntime.prototype._adjustOverlayForDashboard = function (overlay) {
            var spinner;
            overlay.$el.css({
                left: "-488px",
                top: "14px"
            });
            spinner = overlay.$el.find(".spinner");
            return spinner.css({
                top: "50%",
                left: "50%"
            });
        };

        NewDowntime.prototype.toggleTimeZoneSelector = function () {
            this.selectedResources = this._getResources();
            this.resource = this.selectedResources[0];
            return this._composeTimezoneSelector();
        };

        NewDowntime.prototype.createDowntime = function () {
            var overlay, spinnerAttachToEl;
            spinnerAttachToEl = $(this.spinnerAttachToEl)[0] || $(this.el).closest('.js-booking-downtime-new')[0];
            overlay = RG.Utils.spinnerOverlay(spinnerAttachToEl);
            if (this.spinnerAttachToEl) {
                this._adjustOverlayForDashboard(overlay);
            }
            return Q.delay(20).then((function (_this) {
                return function () {
                    var command, dateTimeRange, resources;
                    dateTimeRange = _this.dateTimeRangeSelector.getValues();
                    resources = _this._getResources();
                    if (!_.any(resources, function (r) {
                        return _this.interactedResource.id === r.id;
                    })) {
                        _this.interactedResource = _this.resource;
                    }
                    if (_this.validate()) {
                        _this.rendererLock = new RG.Renderer.GlobalLock;
                        RG.renderer.lock(_this.rendererLock);
                        command = new RG.Commands.CreateDowntimeCommand({
                            account: _this.resource.account,
                            resources: _this._getResources(),
                            booker: _this._getBooker(),
                            dateTimeRange: dateTimeRange,
                            details: _this._getDetails(),
                            timeZones: _this.timeZones,
                            timeZone: _this._getTimeZone(),
                            type: _this._getType(),
                            preExecuteCallback: function (downtime, durations, shouldDelete) {
                                return RG.renderer.unlock(_this.rendererLock);
                            },
                            successCallback: function (downtime) {
                                RG.renderer.unlock(_this.rendererLock);
                                window.update().then(function () {
                                    RG.Popovers.popoverActive = false;
                                    return RG.Popovers.done();
                                });
                                return typeof _this.successCallback === "function" ? _this.successCallback() : void 0;
                            },
                            errorCallback: function (data) {
                                RG.renderer.unlock(_this.rendererLock);
                                overlay.close();
                                _this.optionView = new RG.Views.Dialogs.ErrorList({
                                    errors: data
                                });
                                return _this.trigger('changeOverlay', _this.optionView, {
                                    className: 'overlay availability-waiting'
                                });
                            },
                            saveErrorCallback: function (e, xhr) {
                                RG.renderer.unlock(_this.rendererLock);
                                overlay.close();
                                _this.$('.downtime-save-error').show();
                                return window.Raven.captureException(e, {
                                    extra: {
                                        account_id: _this.resource.account.id,
                                        resource_ids: _this.resourceSelector.getResourceIds(),
                                        booker_id: _this._getBooker().id,
                                        dateTimeRange: dateTimeRange,
                                        timeZones: _this.timeZones,
                                        timeZone: _this._getTimeZone(),
                                        type: _this._getType(),
                                        xhr: {
                                            responseText: xhr.responseText,
                                            responseStatus: xhr.status
                                        }
                                    }
                                });
                            }
                        });
                        return Q.delay(50).then(function () {
                            return command.willTouchBookings({
                                success: function (bookingsCount) {
                                    var cancelCallback;
                                    cancelCallback = function () {
                                        RG.renderer.unlock(_this.rendererLock);
                                        RG.Popovers.removeCallback = null;
                                        return _this.account.downtimes.remove(command.downtime);
                                    };
                                    _this.optionView = new RG.Views.Dialogs.BookingClashManagement({
                                        command: command,
                                        clashBookingsCount: bookingsCount,
                                        cancelCallback: cancelCallback,
                                        successCallback: function () {
                                            RG.renderer.unlock(_this.rendererLock);
                                            return RG.Popovers.removeCallback = null;
                                        },
                                        userPermissions: RG.Utils.Permissions
                                    });
                                    overlay.close();
                                    _this.trigger('changeOverlay', _this.optionView, {
                                        className: 'overlay availability-waiting'
                                    });
                                    return RG.Popovers.removeCallback = cancelCallback;
                                },
                                fail: function () {
                                    RG.renderer.unlock(_this.rendererLock);
                                    return command.execute();
                                }
                            });
                        });
                    } else {
                        return overlay.close();
                    }
                };
            })(this));
        };

        NewDowntime.prototype._getResourceIds = function () {
            return this.resourceSelector.getResourceIds();
        };

        NewDowntime.prototype._getResources = function () {
            var resourceIds;
            resourceIds = this.resourceSelector.getResourceIds();
            return this.resources.models.filter(function (r) {
                return resourceIds.indexOf(r.id) !== -1;
            });
        };

        NewDowntime.prototype._getBooker = function () {
            return this.bookerSelector.getBooker();
        };

        NewDowntime.prototype._getDetails = function () {
            return this.$('#downtime-details-value').val();
        };

        NewDowntime.prototype._getLeave = function () {
            var data;
            data = {};
            _.each(this.$('.js-vacation-allowance input'), function (input) {
                return data[$(input).attr('data-attribute-year')] = $(input).val();
            });
            return data;
        };

        NewDowntime.prototype._getTimeZone = function () {
            var ref, timeZone;
            timeZone = (ref = this.timeZoneSelector) != null ? ref.getTimeZone() : void 0;
            if (timeZone === "NullTimeZone") {
                timeZone = "";
            }
            return timeZone;
        };

        NewDowntime.prototype._getType = function () {
            var id;
            id = this.$("#downtime-type-options select").val();
            id = (id !== void 0 && id.length && +id) || null;
            return this.downtimeTypes.findWhere({
                id: id
            });
        };

        NewDowntime.prototype._fillValues = function () {
            var booker, dateTimeRange, ref;
            this._composeResourceSelector();
            this._composeDateRangeSelector();
            this._composeDownTimeTypes();
            this._composeTimezoneSelector();
            booker = this.bookers.find({
                id: (ref = this.downtime) != null ? ref.getBooker().id : void 0
            });
            this.bookerSelector = new RG.Views.Selectors.Booker({
                currentUserId: (booker != null ? booker.id : void 0) || this.currentUserId,
                bookers: this.bookers,
                booker: booker
            });
            this.$("dd.js-booker").html(this.bookerSelector.render().el);
            this.$(this.bookerSelector.el).find("select").chosen();
            this.$(this.downtimeTypeSelector.el).chosen();
            dateTimeRange = this.dateTimeRangeSelector.getValues();
            this.timeRange = dateTimeRange.timeRange;
            this.dateRange = dateTimeRange.dateRange;
            return this.$('#add-downtime').text("Add " + (this.resource.getHeadingDowntimeText()));
        };

        NewDowntime.prototype._composeResourceSelector = function () {
            this.$('.js-resource-selector').html(this.resourceSelector.render().el);
            return this.resourceSelector.setFilters([
                {
                    categoryName: 'Person',
                    options: [
                        {
                            matchType: 'any',
                            name: 'Name',
                            selectedOptions: [this.resource.id]
                        }
                    ]
                }
            ]);
        };

        NewDowntime.prototype._composeDateRangeSelector = function () {
            var dateRange;
            this.dateTimeRangeSelector = new RG.Views.Selectors.DateTimeRange({
                resource: this.resource,
                dateRange: this.dateRange,
                timeRange: this.timeRange,
                customValidations: new RG.Validators.DowntimeLengthValidator().validate
            });
            this.dateTimeRangeSelector.on("validate", (function (_this) {
                return function () {
                    return _this.trigger("validate");
                };
            })(this));
            dateRange = this.$(".downtime-date");
            return dateRange.html(this.dateTimeRangeSelector.render().el);
        };

        NewDowntime.prototype._composeDownTimeTypes = function () {
            this.downtimeTypeSelector = new RG.Views.Selectors.DowntimeTypeSelector({
                downtimeTypes: this.downtimeTypes
            });
            return this.$("#downtime-type-options").append(this.downtimeTypeSelector.render().el);
        };

        NewDowntime.prototype._composeTimezoneSelector = function () {
            var ref;
            if ((ref = this.timeZoneSelector) != null) {
                ref.remove();
            }
            this.timeZoneSelector = null;
            if (this._isDifferentTimeZones()) {
                this.$("dd.js-timezone-selector").show();
                this.$('.js-timezone-heading').text('Timezone').show();
                this.timeZoneSelector = new RG.Views.Selectors.TimeZoneSelector({
                    currentUserTimeZone: this.currentUserTimeZone,
                    selectedOption: this.selectedTimeZoneOption,
                    timeZones: this.timeZones
                });
                this.$("dd.js-timezone-selector").html(this.timeZoneSelector.render().el);
                return this.$(this.timeZoneSelector.el).find('select').chosen({
                    width: "100%"
                });
            } else {
                this.$("dd.js-timezone-selector").hide();
                return this.$('.js-timezone-heading').empty().hide();
            }
        };

        NewDowntime.prototype._selectedDowntimeType = function () {
            var ref;
            return (ref = this.downtimeTypes.findWhere({
                id: +this.downtimeTypeSelector.$el.val()
            })) != null ? ref.get('name') : void 0;
        };

        NewDowntime.prototype._isDifferentTimeZones = function () {
            return RG.Utils.isDifferentTimeZones(this.selectedResources, this.currentUserTimeZone);
        };

        return NewDowntime;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.Popover = (function (superClass) {
        extend(Popover, superClass);

        function Popover() {
            return Popover.__super__.constructor.apply(this, arguments);
        }

        Popover.prototype.baseTemplate = templates.find('dialogs/popover');

        Popover.prototype.spinnerOptions = RG.Utils.spinnerOptions;

        Popover.prototype.initialize = function (options) {
            this.$el.on("click", (function (_this) {
                return function (e) {
                    _this._closeOpenDropdowns(e);
                    RG.Popovers.clearNest();
                    return e.stopPropagation();
                };
            })(this));
            this.attachTo = options.attachTo;
            this.bodyView = options.body;
            this.callback = options.callback;
            this.cssClass = options.cssClass || this.cssClass || this.cid;
            this.$el.addClass(options.className);
            this.removeAttachTo = options.removeAttachTo;
            return this._debouncedSetPosition = _.debounce((function (_this) {
                return function () {
                    return _this.setPosition({
                        animate: false
                    });
                };
            })(this), 50);
        };

        Popover.prototype.render = function () {
            this.$el.html(this.baseTemplate({
                cssClass: this.cssClass
            }));
            this._fillValues();
            return this;
        };

        Popover.prototype._closeOpenDropdowns = function (e) {
            var ref;
            return (ref = this.$el.find(".open")) != null ? ref.removeClass("open") : void 0;
        };

        Popover.prototype.remove = function () {
            var ref, ref1;
            $(window).off("resize", this._debouncedSetPosition);
            if (this.removeAttachTo) {
                $(this.attachTo).remove();
            }
            if ((ref = this.overlay) != null) {
                ref.remove();
            }
            if ((ref1 = this.bodyView) != null) {
                ref1.remove();
            }
            if (typeof this.callback === "function") {
                this.callback();
            }
            if ($(".dropdown-content").length === 0) {
                RG.Utils.enableScrolling(true);
            }
            return Popover.__super__.remove.apply(this, arguments);
        };

        Popover.prototype.popup = function () {
            var $attachTo;
            RG.closeAllSelections();
            this.render();
            $attachTo = $(this.attachTo);
            $attachTo.append(this.el);
            this.setPosition();
            $(window).on("resize", this._debouncedSetPosition);
            return RG.Popovers.locked = false;
        };

        Popover.prototype.setBodyView = function (view, options) {
            var content;
            if (options == null) {
                options = {
                    render: true
                };
            }
            if (this.removeFunc == null) {
                this.removeFunc = (function (_this) {
                    return function () {
                        _this.remove();
                        return RG.Popovers.popoverActive = false;
                    };
                })(this);
            }
            if (this.bodyView) {
                this.bodyView.remove();
            }
            this.bodyView = view;
            content = this._getContentPanel();
            while (content != null ? content.firstChild : void 0) {
                content.removeChild(content.firstChild);
            }
            if (options.className) {
                this.$el.addClass(options.className);
            }
            if (options.render) {
                this.bodyView.render();
            }
            if (content) {
                content.appendChild(this.bodyView.el);
            } else {
                this.render();
            }
            this.bodyView.on("shrinkDropdown", (function (_this) {
                return function (el) {
                    return _this.shrinkDropdown(el);
                };
            })(this));
            this.bodyView.on("hide", (function (_this) {
                return function () {
                    return _this.$el.hide();
                };
            })(this));
            this.bodyView.on("show", (function (_this) {
                return function () {
                    return _this.$el.show();
                };
            })(this));
            this.bodyView.on("close", this.removeFunc);
            this.bodyView.on("changeView", this.setBodyView, this, options);
            this.bodyView.on("changeOverlay", this.setOverlay, this);
            this.bodyView.on("changeView", this.setPosition, this);
            return this.bodyView.on("updatePosition", this._updateAndReposition, this);
        };

        Popover.prototype._updateAndReposition = function () {
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    _this.setPosition();
                    return $(window).trigger('scroll');
                };
            })(this));
        };

        Popover.prototype._getContentPanel = function () {
            return this.el.querySelector(".dropdown-content");
        };

        Popover.prototype.setPosition = function (arg) {
            var animate, baseTopOffset, contentHeight, main, offset, scrollable, shadowMargin, shadowTopOffset, windowBottom;
            animate = (arg != null ? arg : {
                animate: true
            }).animate;
            this.$el.css('visibility', 'visible');
            this.$(".shadow-arrow").css({
                top: ""
            });
            this.$el.css({
                top: "",
                left: ""
            });
            this.$(".f-dropdown").removeClass("cdrop-left").removeClass("cdrop-right");
            this.$(".f-dropdown .dropdown-content").css({
                "max-height": $(window).height()
            });
            this.$(".f-dropdown .dropdown-content main").css({
                "max-height": $(window).height() - this.$(".f-dropdown .dropdown-content header, .f-dropdown .dropdown-content .tabs").height() - 130
            });
            this._setOpenDirection();
            baseTopOffset = -20;
            offset = this.$el.offset();
            windowBottom = $(window).scrollTop() + $(window).height();
            shadowMargin = parseInt(this.$(".shadow-arrow").css("margin-top"), 10);
            if (offset.top + shadowMargin > windowBottom - 40) {
                $(window).scrollTop($(window).scrollTop() + 40 + shadowMargin + offset.top - windowBottom);
            }
            windowBottom = $(window).scrollTop() + $(window).height();
            contentHeight = this.$el.children(0).outerHeight();
            if (windowBottom - contentHeight - $(window).scrollTop() - 20 < 0) {
                baseTopOffset = -offset.top + $(window).scrollTop() + 60;
            } else {
                baseTopOffset = _.min([-20, -(offset.top + contentHeight - windowBottom) + 20]);
            }
            shadowTopOffset = -baseTopOffset + 10;
            this.$(".shadow-arrow").css({
                top: shadowTopOffset
            });
            this.$el.css({
                position: 'absolute',
                top: baseTopOffset
            });
            this._scrollIntoHorizontalView(animate);
            main = this.el.querySelector(".f-dropdown .dropdown-content main");
            scrollable = !!(main && main.scrollHeight > main.offsetHeight) && main.querySelectorAll(".chzn-drop").length === 0;
            this.$el.toggleClass("is-scrollable", scrollable);
        };

        Popover.prototype.setOverlay = function (view, options) {
            var ref, removeFunc, removeOverlayClassFunc;
            if (options == null) {
                options = {
                    className: 'overlay'
                };
            }
            removeOverlayClassFunc = (function (_this) {
                return function () {
                    return _this.$el.removeClass("has-overlay");
                };
            })(this);
            removeFunc = function () {
                removeOverlayClassFunc();
                return typeof options.removeCallback === "function" ? options.removeCallback() : void 0;
            };
            if ((ref = this.overlay) != null) {
                ref.remove();
            }
            this.overlay = new RG.Views.Dialogs.Overlay({
                attachTo: this.el,
                template: function () {
                    return view.render().el;
                },
                className: options.className,
                removeCallback: removeFunc,
                bodyView: view
            });
            this.overlay.render();
            return this.$el.addClass("has-overlay");
        };

        Popover.prototype._fillValues = function () {
            if (this.bodyView) {
                return this.setBodyView(this.bodyView);
            }
        };

        Popover.prototype._setOpenDirection = function () {
            var droppingLeft, ref;
            droppingLeft = this._getOpenDirection() === "left";
            if (droppingLeft) {
                this._setOpenLeft();
            } else {
                this._setOpenRight();
            }
            return (ref = this.attachTo) != null ? typeof ref.callback === "function" ? ref.callback(false) : void 0 : void 0;
        };

        Popover.prototype._getOpenDirection = function () {
            var $window, offset, width, windowRight;
            $window = $(window);
            windowRight = $window.scrollLeft() + $window.width();
            offset = this.$el.offset();
            width = $(this.el.firstChild).outerWidth();
            if (this.openDirection === "left" || windowRight <= offset.left + width + RG.getUnitWidth() + 14) {
                return "left";
            } else {
                return "right";
            }
        };

        Popover.prototype._setOpenTop = function () {
            var topPosition;
            this.verticalDirection = "top";
            topPosition = $(this.el.firstChild).outerHeight();
            this.$el.css({
                top: -topPosition
            });
            return this.$(".f-dropdown").addClass("cdrop-top");
        };

        Popover.prototype._setOpenLeft = function () {
            var leftPosition;
            leftPosition = $(this.el.firstChild).outerWidth();
            this.$el.css({
                left: -leftPosition - 40
            });
            this.$(".f-dropdown").addClass("cdrop-left");
            return this.$(".f-dropdown").removeClass("cdrop-right");
        };

        Popover.prototype._setOpenRight = function () {
            this.$(".f-dropdown").addClass("cdrop-right");
            this.$(".f-dropdown").removeClass("cdrop-left");
            return this.$el.css({
                left: 27
            });
        };

        Popover.prototype._scrollIntoVerticalView = function () {
            var dropdownRect, elRect, offset;
            offset = this.$el.offset();
            elRect = this.el.getBoundingClientRect();
            if (elRect.top < 0) {
                $("html, body").animate({
                    scrollTop: offset.top - 10
                }, 300);
            }
            dropdownRect = this.el.querySelector(".f-dropdown").getBoundingClientRect();
            if (dropdownRect.bottom > $(window).height()) {
                return $("html, body").animate({
                    scrollTop: offset.top + (this.$(".f-dropdown").height() * 2) - $(window).height()
                }, 300);
            }
        };

        Popover.prototype._scrollIntoHorizontalView = function (animate) {
            var cardsWidth, offset, rect, scrollFunc, targetLeft;
            if (animate == null) {
                animate = true;
            }
            scrollFunc = function (left) {
                if (animate) {
                    return $("html, body").animate({
                        scrollLeft: left
                    }, 300);
                } else {
                    return $(window).scrollLeft(left);
                }
            };
            offset = this.$el.offset();
            try {
                rect = this.el.querySelector(".f-dropdown").getBoundingClientRect();
            } catch (error) {
                return;
            }
            cardsWidth = $("#calendar > aside").outerWidth();
            if (rect.left < cardsWidth || rect.right > $(window).width()) {
                if ($(".f-dropdown").hasClass("cdrop-right") && rect.left - cardsWidth < 0) {
                    scrollFunc(offset.left - cardsWidth - 40);
                }
                if (rect.left < 0) {
                    this._setOpenRight();
                    offset = this.$el.offset();
                    rect = this.el.querySelector(".f-dropdown").getBoundingClientRect();
                }
                if (rect.right > $(window).width()) {
                    targetLeft = offset.left + rect.width - $(window).width() + RG.getUnitWidth() + 40;
                    if (targetLeft + $(window).width() > $("#resources").width() + cardsWidth) {
                        this._setOpenLeft();
                        offset = this.$el.offset();
                        targetLeft = offset.left - 10;
                    }
                    return scrollFunc(targetLeft);
                }
            }
        };

        Popover.prototype._resetPosition = function () {
            if (this.verticalDirection === "top") {
                return this._setOpenTop();
            }
        };

        return Popover;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.BookingClashManagement = (function (superClass) {
        extend(BookingClashManagement, superClass);

        function BookingClashManagement() {
            return BookingClashManagement.__super__.constructor.apply(this, arguments);
        }

        BookingClashManagement.prototype.template = templates.find('dialogs/booking_clash_management');

        BookingClashManagement.prototype.initialize = function (options) {
            var ref, ref1;
            this.command = options.command;
            this.clashBookingsCount = ((ref = options.clashBookingsCount) != null ? ref.length : void 0) || ((ref1 = this.command) != null ? ref1.getClashingBookings().length : void 0);
            this.cancelCallback = options.cancelCallback;
            this.successCallback = options.successCallback;
            return this.userPermissions = options.userPermissions || RG.Utils.Permissions;
        };

        BookingClashManagement.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this._removeDisallowedActions();
            this._bindEvents();
            return this;
        };

        BookingClashManagement.prototype.addToWaitingList = function (e) {
            var overlay;
            e.preventDefault();
            overlay = this._spinner();
            return Q.delay(50).then((function (_this) {
                return function () {
                    if (typeof _this.successCallback === "function") {
                        _this.successCallback();
                    }
                    return _this.command.execute({
                        "delete": false
                    }).then(function () {
                        overlay.close();
                        _this.trigger("close");
                        return RG.Popovers.done();
                    });
                };
            })(this));
        };

        BookingClashManagement.prototype.deleteBookings = function (e) {
            var overlay;
            e.preventDefault();
            overlay = this._spinner();
            return Q.delay(50).then((function (_this) {
                return function () {
                    if (typeof _this.successCallback === "function") {
                        _this.successCallback();
                    }
                    return _this.command.execute({
                        "delete": true
                    }).then(function () {
                        overlay.close();
                        _this.trigger("close");
                        return RG.Popovers.done();
                    });
                };
            })(this));
        };

        BookingClashManagement.prototype.cancel = function (e) {
            e.preventDefault();
            if (typeof this.cancelCallback === "function") {
                this.cancelCallback();
            }
            this.trigger("close");
            return e.stopPropagation();
        };

        BookingClashManagement.prototype._spinner = function () {
            var overlay, parentDropdown;
            parentDropdown = this.$el.closest('.dropdown-anchor').children();
            overlay = RG.Utils.spinnerOverlay(parentDropdown[0]);
            if (this._isRenderedAsOverlay(parentDropdown)) {
                this.$el.hide();
            } else {
                $(overlay.el).find('.dropdown-overlay-backdrop').css('height', parentDropdown.find('.f-dropdown').outerHeight());
                $(overlay.el).find('.spinner').css('margin-top', '-20px');
            }
            return overlay;
        };

        BookingClashManagement.prototype._isRenderedAsOverlay = function ($parent) {
            return $parent.find('.dropdown-overlay-backdrop').length > 1;
        };

        BookingClashManagement.prototype._fillValues = function () {
            this.$(".js-booking-count").text(this.clashBookingsCount + " booking" + (this.clashBookingsCount > 1 ? "s" : ""));
            return this.$(".js-fit-text").text("fit" + (this.clashBookingsCount > 1 ? "" : "s"));
        };

        BookingClashManagement.prototype._bindEvents = function () {
            this.$el.on('click', '.js-add-waiting', this.addToWaitingList.bind(this));
            this.$el.on('click', '.js-delete-bookings', this.deleteBookings.bind(this));
            return this.$el.on('click', '.js-cancel', this.cancel.bind(this));
        };

        BookingClashManagement.prototype._removeDisallowedActions = function () {
            var clashBookings;
            clashBookings = this.command._clashingBookings.map(function (duration) {
                return duration.collection.booking;
            });
            if (!this.userPermissions.canDeleteClashBooking(clashBookings)) {
                this.$(".js-delete-bookings").remove();
            }
            if (!this.userPermissions.canMoveClashBookingToWaitingList(clashBookings)) {
                this.$(".js-add-waiting").remove();
                this.$('.js-fit-text').remove();
                this.$('.js-booking-count').remove();
                this.$(".js-booking-clash-text").text('Some bookings within the date range clash with your time off. Please select dates when time is available instead.');
                return this.$('.js-cancel').text('OK');
            }
        };

        return BookingClashManagement;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.Overlay = (function (superClass) {
        extend(Overlay, superClass);

        function Overlay() {
            return Overlay.__super__.constructor.apply(this, arguments);
        }

        Overlay.prototype.events = {
            "click .js-close": "close",
            "click": "_stopPropagation"
        };

        Overlay.prototype.initialize = function (options) {
            this.template = options.template;
            this.attachTo = options.attachTo;
            this.removeCallback = options.removeCallback;
            return this.bodyView = options.bodyView;
        };

        Overlay.prototype.render = function () {
            var offset;
            this.$el.css("position", "absolute");
            if (this.attachTo) {
                this.$el.width($(this.attachTo.firstChild).outerWidth() - 2);
                this.$el.height($(this.attachTo.firstChild).outerHeight() - 2);
                offset = $(this.attachTo.firstChild).offset();
            }
            this.$el.append(this._renderBackdrop());
            this.$el.append(this._renderModal().addClass("dropdown-overlay"));
            this._bindBodyClose();
            $(this.attachTo).append(this.el);
            if (this.attachTo) {
                this.$el.offset({
                    top: offset.top + 1,
                    left: offset.left + 1
                });
            }
            return this;
        };

        Overlay.prototype.close = function () {
            if (typeof this.removeCallback === "function") {
                this.removeCallback();
            }
            return this.remove();
        };

        Overlay.prototype._renderBackdrop = function () {
            var $backdrop;
            $backdrop = $(document.createElement("div"));
            $backdrop.width("100%");
            $backdrop.height("100%");
            $backdrop.addClass("dropdown-overlay-backdrop");
            return $backdrop;
        };

        Overlay.prototype._bindBodyClose = function () {
            if (this.bodyView) {
                return this.bodyView.on('close', (function (_this) {
                    return function () {
                        _this.bodyView.off();
                        _this.bodyView.remove();
                        return _this.close();
                    };
                })(this));
            }
        };

        Overlay.prototype._renderModal = function () {
            return $(this.template());
        };

        Overlay.prototype._stopPropagation = function (e) {
            return e.stopPropagation();
        };

        return Overlay;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    RG.Views.Factories.NameSearch = (function () {
        function NameSearch(resources1) {
            this.resources = resources1;
        }

        NameSearch.prototype.create = function (options) {
            var allOptions, filterableResources, filteredOptions, menu, searchGroupModel, visibleResources;
            if (options == null) {
                options = {};
            }
            searchGroupModel = new RG.Models.OptionGroup;
            visibleResources = this.resources.filter(function (resource) {
                return resource.visible;
            });
            filterableResources = this._getFilterableResources(this.resources.models);
            allOptions = this._mapResources(filterableResources);
            filteredOptions = this._mapResources(visibleResources);
            searchGroupModel.options.reset(allOptions);
            if (options.showMenu) {
                menu = new RG.Views.Filters.QuickSearchMenu({
                    optionGroup: searchGroupModel,
                    filteredOptions: filteredOptions,
                    allResourceOptions: allOptions,
                    savedFilters: RG.Utils.getLastUsedFilters()
                });
                return new RG.Views.Filters.QuickSearchWithMenu({
                    menu: menu,
                    optionGroup: searchGroupModel,
                    cssClass: options.cssClass,
                    resourceSelector: options.resourceSelector
                });
            }
            return new RG.Views.Filters.QuickSearch({
                optionGroup: searchGroupModel,
                cssClass: options.cssClass,
                resourceSelector: options.resourceSelector
            });
        };

        NameSearch.prototype._getFilterableResources = function (resources) {
            return resources.filter(function (r) {
                return r.isBookable();
            });
        };

        NameSearch.prototype._mapResources = function (resources) {
            return resources.map(function (r) {
                return new RG.Models.FilterOption({
                    id: r.id,
                    name: r.get('name'),
                    tag: 'quick_search',
                    ref: r,
                    type: r.get('resourceType').getName()
                });
            });
        };

        return NameSearch;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.OptionGroup = (function (superClass) {
        extend(OptionGroup, superClass);

        function OptionGroup() {
            return OptionGroup.__super__.constructor.apply(this, arguments);
        }

        OptionGroup.prototype.template = templates.find('filters/option_group');

        OptionGroup.prototype.className = "filter__options-container";

        OptionGroup.prototype.events = {
            "change select": "triggerChangeFilter",
            "select2-open select.filter-option": 'focus'
        };

        OptionGroup.prototype.clearSelection = function () {
            this.getFilterOptionSelect().val([]);
            this.getFilterOptionSelect().trigger("change");
            this.$(".filter-option .select2-search-field .select2-input").width("290px");
            return this.trigger("change:filter");
        };

        OptionGroup.prototype.getFilterOptionSelect = function () {
            return this.$("select.filter-option");
        };

        OptionGroup.prototype.getMatchType = function () {
            return this.switchValue;
        };

        OptionGroup.prototype.focus = function (e) {
            return $("select.filter-option").not(this.$("select.filter-option")).select2("close");
        };

        OptionGroup.prototype.focusMatchType = function () {
            return $("select.filter-option").select2("close");
        };

        OptionGroup.prototype.getOptions = function () {
            return {
                name: this.optionGroup.getName(),
                id: this.optionGroup.getTagId(),
                matchType: this.getMatchType(),
                selectedOptions: this.getFilterOptionSelect().val(),
                type: this.optionGroup.getType()
            };
        };

        OptionGroup.prototype.getSelectedOptions = function () {
            var selectedOptions, values;
            values = this.getFilterOptionSelect().val();
            if (!values) {
                return null;
            }
            selectedOptions = values.map((function (_this) {
                return function (id) {
                    return _this.optionGroup.options.findWhere({
                        id: parseInt(id, 10)
                    });
                };
            })(this));
            return {
                optionGroup: this.optionGroup,
                selectedOptions: selectedOptions,
                matchType: this.getMatchType()
            };
        };

        OptionGroup.prototype.initialize = function (options) {
            return this.optionGroup = options.optionGroup;
        };

        OptionGroup.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        OptionGroup.prototype.setFilters = function (filters) {
            var category, filter, i, len, option, results;
            category = this.optionGroup.collection.category;
            results = [];
            for (i = 0, len = filters.length; i < len; i++) {
                filter = filters[i];
                if (category.get('name') === filter.categoryName) {
                    results.push((function () {
                        var j, len1, ref, results1;
                        ref = filter.options;
                        results1 = [];
                        for (j = 0, len1 = ref.length; j < len1; j++) {
                            option = ref[j];
                            if ((option.id && option.id === this.optionGroup.getTagId()) || ((option.id == null) && option.name === this.optionGroup.getName())) {
                                results1.push(this.getFilterOptionSelect().val(option.selectedOptions).trigger("change"));
                            }
                        }
                        return results1;
                    }).call(this));
                }
            }
            return results;
        };

        OptionGroup.prototype.triggerChangeFilter = function () {
            return this.trigger("change:filter", this.optionGroup, this.getSelectedOptions());
        };

        OptionGroup.prototype._createMatchAllOrAny = function () {
            var container, options;
            container = this.$('.match-type');
            container.append('any &nbsp;<span/>&nbsp; all');
            options = {
                mode: 'a-b',
                left: 'any',
                right: 'all'
            };
            this.switchValue = 'any';
            if (this.optionGroup.get("multiple")) {
                options.onChange = (function (_this) {
                    return function (val) {
                        _this.switchValue = val;
                        return _this.triggerChangeFilter();
                    };
                })(this);
            } else {
                options.selected = 'any';
                options.disabled = true;
            }
            return RGComponents.createSwitch(container.find('span').get(0), options);
        };

        OptionGroup.prototype._fillValues = function () {
            this.getFilterOptionSelect().html(this._getSelectOptions());
            this.getFilterOptionSelect().select2({
                placeholder: this._getPlaceholderText(),
                allowClear: true
            });
            return this._createMatchAllOrAny();
        };

        OptionGroup.prototype._getPlaceholderText = function () {
            return (this.optionGroup.getName()) + " - select one or more";
        };

        OptionGroup.prototype._getSelectOptions = function () {
            var html, i, len, option, ref;
            html = [];
            ref = this.optionGroup.options.models;
            for (i = 0, len = ref.length; i < len; i++) {
                option = ref[i];
                html.push("<option value=\"" + option.id + "\">" + (_.unescape(option.getName())) + "</option>");
            }
            return html.join("");
        };

        return OptionGroup;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.QuickSearch = (function (superClass) {
        extend(QuickSearch, superClass);

        function QuickSearch() {
            this.searchBlur = bind(this.searchBlur, this);
            this.searchFocused = bind(this.searchFocused, this);
            return QuickSearch.__super__.constructor.apply(this, arguments);
        }

        QuickSearch.prototype.resourceSelectorTemplate = templates.find('downtimes/resource_selector');

        QuickSearch.prototype.events = {
            "change select": "triggerChangeFilter",
            "focus .select2-input": 'searchFocused',
            "blur .select2-input": 'searchBlur'
        };

        QuickSearch.prototype.initialize = function (options) {
            var view;
            QuickSearch.__super__.initialize.apply(this, arguments);
            this.controls = options.controls;
            this.cssClass = options.cssClass;
            this.callback = options.callback;
            this.resourceSelector = options.resourceSelector;
            view = this;
            return $("#root nav").on('click', function (e) {
                return view.closeQuickSearch();
            });
        };

        QuickSearch.prototype._fillValues = function () {
            return this._renderOptions();
        };

        QuickSearch.prototype._renderOptions = function () {
            this.getFilterOptionSelect().html(this._getSelectOptions());
            return this.getFilterOptionSelect().select2({
                placeholder: this._getPlaceholderText(),
                formatResult: function (result, container, query, escapeMarkup) {
                    var markup;
                    markup = ["<div class=\"resource-quick-search-entry\" title=\"" + (escapeMarkup(this.text(result))) + "\">"];
                    window.Select2.util.markMatch(this.text(result), query.term, markup, escapeMarkup);
                    markup.push(['</div>']);
                    return markup.join("");
                }
            });
        };

        QuickSearch.prototype._getPlaceholderText = function () {
            return "Name Search";
        };

        QuickSearch.prototype.triggerChangeFilter = function (e) {
            this.focused = false;
            if (e.removed && this.getSelectedOptions() === null) {
                RG.spin(this.$('.select2-container')[0]);
                return window.requestAnimationFrame((function (_this) {
                    return function () {
                        return _this.bubbleChanges();
                    };
                })(this));
            } else {
                return this.bubbleChanges();
            }
        };

        QuickSearch.prototype.bubbleChanges = function () {
            this.validate();
            this.trigger("change:filter", this.optionGroup, this.getSelectedOptions());
            if (this.$('.select2-container-disabled').length) {
                return this.searchBlur();
            }
        };

        QuickSearch.prototype.searchFocused = function (e) {
            $('.select2-drop-active:not(#select2-drop)').hide();
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    RG.Popovers.clear();
                    if (_this._isSearchFocused()) {
                        return;
                    }
                    return Q.delay(150).then(function () {
                        _this.$('.select2-input').focus();
                        _this.$('.select2-choices').click();
                        return RG.spin();
                    });
                };
            })(this));
        };

        QuickSearch.prototype.toggle = function (toggle) {
            if (toggle) {
                return $('#select2-drop-mask').trigger('click');
            } else {
                this.$("select.filter-option").select2('enable', true);
                return this.searchBlur();
            }
        };

        QuickSearch.prototype.searchBlur = function (e) {
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    if ($("li." + _this.cssClass).length === 0) {
                        _this.focused = false;
                        _this.togglePlaceholder(false);
                        if (_this.isMultiple()) {
                            $(_this.el).removeClass('search-hover');
                            _this.addAllPill();
                        }
                    }
                    return _this.$('.select2-input').trigger('blur');
                };
            })(this));
        };

        QuickSearch.prototype.isMultiple = function () {
            return this.$('.select2-choices').find('li.select2-search-choice').length > 1;
        };

        QuickSearch.prototype.togglePlaceholder = function (focused) {
            var input, ref, ref1;
            if (((ref = $('html')) != null ? (ref1 = ref.attr('class')) != null ? ref1.indexOf('ie') : void 0 : void 0) === -1) {
                input = this.$('.select2-input');
                if (this.getFilterOptionSelect().val()) {
                    return input.attr('placeholder', '');
                } else {
                    if (focused) {
                        return input.attr('placeholder', 'Select one or more');
                    } else {
                        return input.attr('placeholder', this._getPlaceholderText());
                    }
                }
            }
        };

        QuickSearch.prototype.addAllPill = function () {
            var choices, html, plural, selected_options_length;
            if (this.$('.all-pill').length === 0) {
                html = [];
                choices = this.$('.select2-choices');
                selected_options_length = choices.find('li.select2-search-choice').length;
                plural = "resources";
                if (selected_options_length < 2) {
                    plural = "resource";
                }
                html.push("<li class='all-pill select2-search-choice'>");
                html.push("<div>" + selected_options_length + " " + plural + " selected</div>");
                html.push("<a href=\"#\" class=\"all-pill-remove select2-search-choice-close\" tabindex=\"-1\"></a>");
                html.push("</li>");
                choices.prepend(html.join(''));
                return this.bindAllPill();
            }
        };

        QuickSearch.prototype.bindAllPill = function () {
            if (!this.allPillBound) {
                this.$('.select2-choices').on('click', '.all-pill-remove', (function (_this) {
                    return function () {
                        return _this.clearAll();
                    };
                })(this));
                this.allPillBound = true;
            }
            this.$('.all-pill').off();
            return this.$('.all-pill').on('click', (function (_this) {
                return function (e) {
                    return _this.$('.select2-input').click();
                };
            })(this));
        };

        QuickSearch.prototype.clearAll = function () {
            window.rgStorage["delete"]('lastActiveFilterId');
            RG.spin(this.$('.select2-container')[0]);
            this.removeAllPill();
            this.$('.select2-choices li.select2-search-choice').hide();
            return this.clearSelection();
        };

        QuickSearch.prototype.clearSelection = function () {
            return setTimeout((function (_this) {
                return function () {
                    _this.getFilterOptionSelect().val([]).trigger('change');
                    return RG.spin(_this.$('.select2-container')[0]);
                };
            })(this), 16);
        };

        QuickSearch.prototype.removeAllPill = function () {
            return this.$('.all-pill').remove();
        };

        QuickSearch.prototype.getResourceIds = function () {
            var ref, selectedOptions;
            selectedOptions = (ref = this.getSelectedOptions()) != null ? ref.selectedOptions : void 0;
            if (!selectedOptions) {
                return [];
            }
            return _.collect(selectedOptions, function (so) {
                return so.id;
            });
        };

        QuickSearch.prototype._getOptions = function () {
            return _.groupBy(this.optionGroup.options.models, function (e) {
                return e.get('type');
            });
        };

        QuickSearch.prototype._getSelectOptions = function () {
            var categories, category, html, i, len, option, options;
            categories = this._getOptions();
            html = [];
            for (category in categories) {
                options = categories[category];
                if (options.length) {
                    html.push("<optgroup class='" + this.cssClass + "' label=\"" + category + "\">");
                    for (i = 0, len = options.length; i < len; i++) {
                        option = options[i];
                        html.push("<option value=\"" + option.id + "\">" + (option.getName()) + "</option>");
                    }
                    html.push("</optgroup>");
                }
            }
            return html.join("");
        };

        QuickSearch.prototype.setFilters = function (filters) {
            var filter, i, j, len, len1, option, ref, selectedOptions;
            selectedOptions = [];
            for (i = 0, len = filters.length; i < len; i++) {
                filter = filters[i];
                ref = filter.options;
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    option = ref[j];
                    if (option.name === 'Name') {
                        selectedOptions.push(option.selectedOptions);
                    }
                }
            }
            return this.getFilterOptionSelect().val(_.flatten(_.compact(selectedOptions))).trigger("change");
        };

        QuickSearch.prototype.setSearchHeigth = function (e) {
            var options, ref;
            options = this.searchGroup.getSelectedOptions();
            this.quickSearchCount = options != null ? (ref = options.selectedOptions) != null ? ref.length : void 0 : void 0;
            return this.$('#quick-search').addClass('search-hover');
        };

        QuickSearch.prototype.setDropMaskOffset = function () {
            var offset;
            offset = 60 + (20 * this.getFilterOptionSelect().val().length);
            return $('#select2-drop-mask').offset({
                top: "" + offset
            });
        };

        QuickSearch.prototype.closeQuickSearch = function () {
            RG.closeAllSelections();
            this.focused = false;
            this.togglePlaceholder(false);
            if (this.isMultiple()) {
                this.addAllPill();
            }
            return $(this.el).removeClass('search-hover');
        };

        QuickSearch.prototype.remove = function () {
            return QuickSearch.__super__.remove.apply(this, arguments);
        };

        QuickSearch.prototype.render = function () {
            this.$el.html(this._template());
            this._fillValues();
            this.$(".match-type-select").select2({
                minimumResultsForSearch: 10
            });
            setTimeout((function (_this) {
                return function () {
                    return _this.searchBlur();
                };
            })(this), 1000);
            return this;
        };

        QuickSearch.prototype.validate = function () {
            if (this.getResourceIds().length > 0) {
                this.$el.find('.error').hide();
                return true;
            } else {
                this.$el.find('.error').show();
                return false;
            }
        };

        QuickSearch.prototype._template = function () {
            if (this.resourceSelector) {
                return this.resourceSelectorTemplate;
            }
            return this.template;
        };

        QuickSearch.prototype._isSearchFocused = function () {
            var ref, ref1;
            if (typeof this.callback === "function") {
                this.callback();
            }
            RG.closeAllDropdowns();
            if (this.focused) {
                return true;
            }
            this.removeAllPill();
            this.$el.addClass('search-hover');
            this.togglePlaceholder(true);
            this._scroll();
            this._bindDropMask();
            if ((ref = $(".match-type-select.select2-container-active")) != null) {
                if ((ref1 = ref.data('select2')) != null) {
                    ref1.close();
                }
            }
            this.focused = true;
            return false;
        };

        QuickSearch.prototype._bindDropMask = function () {
            return $("#select2-drop-mask").on("mousedown touchstart click", (function (_this) {
                return function (e) {
                    return _this.searchBlur(e);
                };
            })(this));
        };

        QuickSearch.prototype._scroll = function () {
            return $(document).trigger("scroll");
        };

        return QuickSearch;

    })(RG.Views.Filters.OptionGroup);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.QuickSearchMenu = (function (superClass) {
        extend(QuickSearchMenu, superClass);

        function QuickSearchMenu() {
            return QuickSearchMenu.__super__.constructor.apply(this, arguments);
        }

        QuickSearchMenu.prototype.template = templates.find('filters/quick_search_menu');

        QuickSearchMenu.prototype.initialize = function (options) {
            this.optionGroup = options.optionGroup;
            this.filteredOptions = options.filteredOptions;
            return this.allResourceOptions = options.allResourceOptions;
        };

        QuickSearchMenu.prototype.render = function () {
            this.$el.html(this.template());
            this._bindEvents();
            return this;
        };

        QuickSearchMenu.prototype._bindEvents = function () {
            this.$el.on("click", 'i', (function (_this) {
                return function (e) {
                    return _this._toggleMenu(e);
                };
            })(this));
            this.$el.on("click", '.js-clear-resources', (function (_this) {
                return function () {
                    return _this._clearAllSelectedOptions();
                };
            })(this));
            this.$el.on("click", '.js-currently-filtered', (function (_this) {
                return function () {
                    return _this._setToCurrentlyFilteredResources();
                };
            })(this));
            this.$el.on("click", '.js-all-people', (function (_this) {
                return function () {
                    return _this._setToAllPeople();
                };
            })(this));
            return this.$el.on("click", '.js-all-resources', (function (_this) {
                return function () {
                    return _this._setToAllResources();
                };
            })(this));
        };

        QuickSearchMenu.prototype._toggleMenu = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.trigger('menuClicked');
            return this.$('.js-menu-options').toggle();
        };

        QuickSearchMenu.prototype.hide = function () {
            return this.$('.js-menu-options').hide();
        };

        QuickSearchMenu.prototype._clearAllSelectedOptions = function () {
            return this.trigger('change', []);
        };

        QuickSearchMenu.prototype._setToAllPeople = function () {
            var filters, ids;
            this.optionGroup.options.reset(this.allResourceOptions);
            ids = _.chain(this.optionGroup.options.models).select(function (option) {
                return option.get('type') === 'Person';
            }).collect(function (option) {
                return option.id;
            }).value();
            filters = [
                {
                    categoryName: 'Person',
                    options: [
                        {
                            matchType: 'any',
                            name: 'Name',
                            selectedOptions: ids
                        }
                    ]
                }
            ];
            return this.trigger('change', filters);
        };

        QuickSearchMenu.prototype._setToCurrentlyFilteredResources = function () {
            this.optionGroup.options.reset(this.filteredOptions);
            return this._triggerChange();
        };

        QuickSearchMenu.prototype._setToAllResources = function () {
            this.optionGroup.options.reset(this.allResourceOptions);
            return this._triggerChange();
        };

        QuickSearchMenu.prototype._triggerChange = function () {
            var filters, ids;
            ids = this.optionGroup.options.collect(function (option) {
                return option.id;
            });
            filters = [
                {
                    categoryName: 'Person',
                    options: [
                        {
                            matchType: 'any',
                            name: 'Name',
                            selectedOptions: ids
                        }
                    ]
                }
            ];
            this.trigger('change', filters);
            return this.optionGroup.options.reset(this.allResourceOptions);
        };

        return QuickSearchMenu;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.QuickSearchWithMenu = (function (superClass) {
        extend(QuickSearchWithMenu, superClass);

        function QuickSearchWithMenu() {
            this.searchFocused = bind(this.searchFocused, this);
            return QuickSearchWithMenu.__super__.constructor.apply(this, arguments);
        }

        QuickSearchWithMenu.prototype.resourceSelectorTemplate = templates.find('downtimes/resource_selector');

        QuickSearchWithMenu.prototype.initialize = function (options) {
            QuickSearchWithMenu.__super__.initialize.apply(this, arguments);
            return this.menu = options.menu;
        };

        QuickSearchWithMenu.prototype._fillValues = function () {
            this.$('.filter__options-control').append(this.menu.render().el);
            this.menu.on('change', (function (_this) {
                return function (filters, reRender) {
                    if (reRender == null) {
                        reRender = false;
                    }
                    _this.trigger('displaySpinner');
                    return Q.delay(10).then(function () {
                        var ref;
                        _this._renderOptions();
                        _this.setFilters(filters);
                        return (ref = _this.overlay) != null ? ref.remove() : void 0;
                    });
                };
            })(this));
            this.menu.on('menuClicked', (function (_this) {
                return function () {
                    return _this.$el.click();
                };
            })(this));
            return QuickSearchWithMenu.__super__._fillValues.apply(this, arguments);
        };

        QuickSearchWithMenu.prototype._renderOptions = function () {
            var element;
            element = this.getFilterOptionSelect();
            element.html(this._getSelectOptions());
            window.view = this;
            element.select2({
                placeholder: this._getPlaceholderText(),
                closeOnSelect: false
            });
            return this.$('.select2-input').on('keyup', (function (_this) {
                return function (e) {
                    var currentIds, option, topMatch;
                    if (e.keyCode === 13) {
                        topMatch = $($('div.select2-result-label')[1]).text();
                        option = _this.optionGroup.options.findWhere({
                            name: topMatch
                        });
                        currentIds = _this.getResourceIds();
                        currentIds.push(option.id);
                        element.val(currentIds).trigger('change');
                        return Q.delay(20).then(function () {
                            _this.$('.select2-input').focus();
                            return _this.$('.select2-choices').click();
                        });
                    }
                };
            })(this));
        };

        QuickSearchWithMenu.prototype.setDropMaskOffset = function () {
            var offset;
            offset = 60 + (20 * this.getFilterOptionSelect().val().length);
            return $('#select2-drop-mask').offset({
                top: "" + offset
            });
        };

        QuickSearchWithMenu.prototype.remove = function () {
            RG.clearStaleDropdowns();
            this.menu.remove();
            return QuickSearchWithMenu.__super__.remove.apply(this, arguments);
        };

        QuickSearchWithMenu.prototype.searchFocused = function (e) {
            return this.menu.hide();
        };

        QuickSearchWithMenu.prototype.searchBlur = function (e) { };

        QuickSearchWithMenu.prototype.addAllPill = function () { };

        QuickSearchWithMenu.prototype.bindAllPill = function () { };

        QuickSearchWithMenu.prototype.removeAllPill = function () { };

        QuickSearchWithMenu.prototype._bindDropMask = function () { };

        return QuickSearchWithMenu;

    })(RG.Views.Filters.QuickSearch);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.Booker = (function (superClass) {
        extend(Booker, superClass);

        function Booker() {
            return Booker.__super__.constructor.apply(this, arguments);
        }

        Booker.prototype.initialize = function (options) {
            var ref;
            this.bookers = options.bookers;
            this.booking = options.booking;
            this.currentUserId = options.currentUserId;
            return this.booker = options.booker || ((ref = this.booking) != null ? ref.get('booker') : void 0);
        };

        Booker.prototype.render = function () {
            var ref;
            if ((ref = this.selectBox) != null) {
                ref.remove();
            }
            this.selectBox = $("<select style='width: 288px'></select>").addClass("chzn-select");
            this._fillValues();
            this.$el.html(this.selectBox);
            this.setSelectedValue(this.getCurrentUserBooker().cid);
            return this;
        };

        Booker.prototype._fillValues = function () {
            var b, bookers, i, len, results;
            bookers = this.bookers.select((function (_this) {
                return function (b) {
                    var ref;
                    return !b.get('archived') || b.cid === ((ref = _this.booker) != null ? ref.cid : void 0);
                };
            })(this));
            results = [];
            for (i = 0, len = bookers.length; i < len; i++) {
                b = bookers[i];
                results.push(this.selectBox.append($("<option></option>").val(b.cid).text(b.get('name'))));
            }
            return results;
        };

        Booker.prototype.getBooker = function () {
            var val;
            val = this.selectBox.trigger("liszt:updated").val();
            return this.bookers.find(function (b) {
                return b.cid === val;
            });
        };

        Booker.prototype.getCurrentUserBooker = function () {
            return this.bookers.findWhere({
                id: this.currentUserId
            });
        };

        Booker.prototype.setSelectedValue = function (cid) {
            return this.selectBox.val(cid).trigger("liszt:updated");
        };

        return Booker;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.DateRange = (function (superClass) {
        extend(DateRange, superClass);

        function DateRange() {
            return DateRange.__super__.constructor.apply(this, arguments);
        }

        DateRange.prototype.dateFormat = "d M yy";

        DateRange.prototype.template = templates.find('selectors/date_range');

        DateRange.prototype.initialize = function (options) {
            this.dateRange = options.dateRange;
            this.resource = options.resource;
            this.customTemplate = options.customTemplate;
            return this.customValidations = options.customValidations || function (view) {
                return true;
            };
        };

        DateRange.prototype.getDateRange = function () {
            var dateRange;
            return dateRange = new RG.Utils.DateRange(this._parseDateString(this._getStartDateEl().val()) || this.dateRange.startDate, this._parseDateString(this._getEndDateEl().val()) || this.dateRange.endDate);
        };

        DateRange.prototype._bindEvents = function () {
            this.$el.on("change", "input#booking-start-date", (function (_this) {
                return function () {
                    return _this._setMinDate();
                };
            })(this));
            this.$el.on("change", "input#booking-end-date", (function (_this) {
                return function () {
                    return _this._setMaxDate();
                };
            })(this));
            this.$el.on("change", "input.js-date-range-input", (function (_this) {
                return function () {
                    return _this.triggerValidate();
                };
            })(this));
            return this.$el.on("change", "input.js-date-range-input", (function (_this) {
                return function () {
                    return _this.triggerChange();
                };
            })(this));
        };

        DateRange.prototype.render = function () {
            var widget;
            if (!this.customTemplate) {
                this.$el.html(this.template());
            }
            this._fillValues();
            this._getStartDateEl().datepicker({
                dateFormat: this.dateFormat,
                firstDay: 1
            });
            widget = this._getStartDateEl().datepicker("widget");
            widget.off();
            widget.on("mousedown mouseup click", function (e) {
                return e.stopPropagation();
            });
            widget.hasStopPropagation = true;
            this._getEndDateEl().datepicker({
                minDate: this.dateRange.startDate,
                dateFormat: this.dateFormat,
                firstDay: 1
            });
            this._bindEvents();
            return this;
        };

        DateRange.prototype.stopPropagation = function (e) {
            return e.stopPropagation();
        };

        DateRange.prototype.toggleError = function (error) {
            return this.$(".help-inline").toggle(error);
        };

        DateRange.prototype.triggerChange = function () {
            return this.trigger("change", this.getDateRange());
        };

        DateRange.prototype.triggerValidate = function () {
            this.validate(true);
            return true;
        };

        DateRange.prototype.validate = function (trigger) {
            return this.customValidations(this) && this._validate(trigger);
        };

        DateRange.prototype._validate = function (trigger) {
            var dateRange, e, error, errors;
            dateRange = null;
            error = false;
            try {
                dateRange = new RG.Utils.DateRange(this._parseDateString(this._getStartDateEl().val()) || this.dateRange.endDate, this._parseDateString(this._getEndDateEl().val()) || this.dateRange.endDate);
            } catch (error1) {
                e = error1;
                error = true;
            }
            if (this._isDateRangeValid(dateRange) && this._isResourceAvailable(dateRange)) {
                error = false;
            } else {
                error = false;
                errors = [];
                if (!this._isDateRangeValid(dateRange)) {
                    errors.push("Please select a start and end date.");
                } else if (!this._isResourceAvailable(dateRange)) {
                    // errors.push("Sorry, you can't start or end a booking on a non-working day. Please change your dates.");
                }
                this._setErrorText(errors.join("<br>"));
            }
            this.toggleError(error);
            if (trigger) {
                this.trigger('validate');
            }
            return !error;
        };

        DateRange.prototype._fillValues = function () {
            this._getStartDateEl().val(this._getDateString(this.dateRange.startDate));
            this._getEndDateEl().val(this._getDateString(this.dateRange.endDate));
            return this.validate();
        };

        DateRange.prototype._getDateString = function (date) {
            return $.datepicker.formatDate(this.dateFormat, date);
        };

        DateRange.prototype._getEndDateEl = function () {
            return this.$("#booking-end-date");
        };

        DateRange.prototype._getStartDateEl = function () {
            return this.$("#booking-start-date");
        };

        DateRange.prototype._isDateRangeValid = function (dateRange) {
            return dateRange && dateRange.startDate && dateRange.endDate;
        };

        DateRange.prototype._isResourceAvailable = function (dateRange) {
            return this.resource.availability.isAvailableStartAndEndDate(dateRange);
        };

        DateRange.prototype._parseDateString = function (dateString) {
            try {
                return $.datepicker.parseDate(this.dateFormat, dateString);
            } catch (error1) {
                return null;
            }
        };

        DateRange.prototype._setErrorText = function (error) {
            return this.$(".help-inline").text(error);
        };

        DateRange.prototype._setMinDate = function () {
            var selectedRange;
            selectedRange = this.getDateRange();
            this._getEndDateEl().datepicker("destroy");
            this._getEndDateEl().datepicker({
                dateFormat: this.dateFormat,
                minDate: selectedRange.startDate,
                firstDay: 1
            });
            if (selectedRange.getNumberOfDays() < 1) {
                return this._getEndDateEl().val(this._getDateString(selectedRange.startDate));
            }
        };

        DateRange.prototype._setMaxDate = function () {
            var selectedRange;
            selectedRange = this.getDateRange();
            if (selectedRange.getNumberOfDays() < 1) {
                return this._getStartDateEl().val(this._getDateString(selectedRange.endDate));
            }
        };

        return DateRange;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.DateTimeRange = (function (superClass) {
        extend(DateTimeRange, superClass);

        function DateTimeRange() {
            return DateTimeRange.__super__.constructor.apply(this, arguments);
        }

        DateTimeRange.prototype.template = templates.find('selectors/date_time_range');

        DateTimeRange.prototype.initialize = function (options) {
            this.timeRange = options.timeRange;
            this.dateRange = options.dateRange;
            this.resource = options.resource;
            return this.customValidations = options.customValidations || function (view) {
                return true;
            };
        };

        DateTimeRange.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        DateTimeRange.prototype.getValues = function () {
            return {
                dateRange: this.dateRangeSelector.getDateRange(),
                timeRange: this.timeRangeSelector.getTimeRange()
            };
        };

        DateTimeRange.prototype.validate = function () {
            var result;
            result = this.customValidations(this) && this.dateRangeSelector.validate() && this.timeRangeSelector.validate();
            this.trigger("validate");
            return result;
        };

        DateTimeRange.prototype._fillValues = function () {
            this._composeDateRangeSelector();
            this.dateRangeSelector.render();
            this._composeTimeRangeSelector();
            this._composeValidations();
            return this.timeRangeSelector.render();
        };

        DateTimeRange.prototype._composeDateRangeSelector = function () {
            this.dateRangeSelector = new RG.Views.Selectors.DateRange({
                customTemplate: true,
                dateRange: this.dateRange,
                resource: this.resource,
                el: this.el
            });
            this.dateRangeSelector._isResourceAvailable = function (dateRange) {
                return true;
            };
            return this.dateRangeSelector.on('change', (function (_this) {
                return function (dateRange) {
                    _this.dateRange = dateRange;
                    _this.trigger('change', dateRange, _this.timeRangeSelector.getTimeRange());
                    return _this.validate();
                };
            })(this));
        };

        DateTimeRange.prototype._composeTimeRangeSelector = function () {
            this.timeRangeSelector = new RG.Views.Selectors.TimeRange({
                customTemplate: true,
                startTime: this.timeRange.startTime,
                endTime: this.timeRange.endTime,
                typeName: this.resource.typeName(),
                el: this.el
            });
            this._overWriteTimeRangeValues();
            return this.timeRangeSelector.on('change', (function (_this) {
                return function (timeRange) {
                    _this.trigger('change', _this.dateRangeSelector.getDateRange(), timeRange);
                    return _this.validate();
                };
            })(this));
        };

        DateTimeRange.prototype._composeValidations = function () {
            var validate;
            validate = this.timeRangeSelector.validate.bind(this.timeRangeSelector);
            return this.timeRangeSelector.validate = (function (_this) {
                return function () {
                    if (_this.dateRangeSelector.getDateRange().getNumberOfDays() === 1) {
                        return validate(true);
                    } else {
                        return true;
                    }
                };
            })(this);
        };

        DateTimeRange.prototype._overWriteTimeRangeValues = function () {
            if (this.dateRange.getNumberOfDays() > 1) {
                return this.timeRangeSelector._fillValues = (function (_this) {
                    return function () {
                        var startTime;
                        startTime = _this.timeRangeSelector.$("#booking-start-time");
                        startTime.calendricalTime();
                        _this.timeRangeSelector.$("#booking-end-time").calendricalTime({
                            maxTime: {
                                hour: 24,
                                minute: 0
                            },
                            startDate: _this.dateRangeSelector.$('input#booking-start-date'),
                            endDate: _this.dateRangeSelector.$('input#booking-end-date')
                        });
                        _this.timeRangeSelector.$("#booking-start-time").val(_this.timeRangeSelector._minutesToTime(_this.timeRange.startTime));
                        return _this.timeRangeSelector.$("#booking-end-time").val(_this.timeRangeSelector._minutesToTime(_this.timeRange.endTime));
                    };
                })(this);
            }
        };

        return DateTimeRange;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.DowntimeTypeSelector = (function (superClass) {
        extend(DowntimeTypeSelector, superClass);

        function DowntimeTypeSelector() {
            return DowntimeTypeSelector.__super__.constructor.apply(this, arguments);
        }

        DowntimeTypeSelector.prototype.tagName = 'select';

        DowntimeTypeSelector.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.downtimeTypes = options.downtimeTypes;
            return this.selectedOption = options.selectedOption;
        };

        DowntimeTypeSelector.prototype.render = function () {
            var child;
            while (child = this.el.firstChild) {
                this.el.removeChild(child);
            }
            this._fillValues();
            this._bindEvents();
            return this;
        };

        DowntimeTypeSelector.prototype.getSelectedDowntimeType = function () {
            return this.downtimeTypes.findWhere({
                id: +this.$el.val()
            });
        };

        DowntimeTypeSelector.prototype._bindEvents = function () {
            return this.$el.on("change", (function (_this) {
                return function () {
                    return _this.trigger('change', _this.getSelectedDowntimeType());
                };
            })(this));
        };

        DowntimeTypeSelector.prototype._fillValues = function () {
            this.$el.css("width", "288px");
            return this._createDowntimeTypes();
        };

        DowntimeTypeSelector.prototype._createDowntimeTypes = function () {
            var downtimeType, i, len, ref, results;
            this.$el.append('<option selected="selected" value="">&nbsp;</option>');
            ref = this.downtimeTypes.models;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                downtimeType = ref[i];
                results.push(this._createOption(downtimeType));
            }
            return results;
        };

        DowntimeTypeSelector.prototype._createOption = function (downtimeType) {
            var option, ref;
            option = $(document.createElement('option')).val(downtimeType.get('id')).text(downtimeType.get('name'));
            if (downtimeType.cid === ((ref = this.selectedOption) != null ? ref.cid : void 0)) {
                option.attr('selected', 'selected');
            }
            return this.$el.append(option);
        };

        return DowntimeTypeSelector;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.TimeRange = (function (superClass) {
        extend(TimeRange, superClass);

        function TimeRange() {
            return TimeRange.__super__.constructor.apply(this, arguments);
        }

        TimeRange.prototype.className = 'specific-time';

        TimeRange.prototype.template = templates.find('selectors/time_range');

        TimeRange.prototype.togglable = true;

        TimeRange.prototype.initialize = function (options) {
            if (typeof options.startTime === 'undefined') {
                this.startTime = 540;
            } else {
                this.startTime = options.startTime;
            }
            this.endTime = options.endTime || 1020;
            if (options.togglable !== void 0) {
                this.togglable = options.togglable;
            }
            this.storageTypeName = options.typeName;
            return this.customTemplate = options.customTemplate;
        };

        TimeRange.prototype.remove = function () {
            return TimeRange.__super__.remove.apply(this, arguments);
        };

        TimeRange.prototype.closeSelector = function () {
            return this.$("#booking-start-time, #booking-end-time").blur();
        };

        TimeRange.prototype.getBookingDurationDTO = function () {
            return new RG.DTO.BookingDuration({
                duration: this.getEndTime() - this.getStartTime(),
                startTime: this.getStartTime()
            });
        };

        TimeRange.prototype.getEndTime = function () {
            var time;
            if (this.getEndTimeStr() === "Start of day") {
                return 0;
            }
            if (this.isEndOfDay()) {
                return 1440;
            }
            time = this._timeToMinutes(this.getEndTimeStr());
            return time || 1440;
        };

        TimeRange.prototype.isEndOfDay = function () {
            return this.getEndTimeStr() === "End of day";
        };

        TimeRange.prototype.getEndTimeStr = function () {
            return this.$("#booking-end-time").val();
        };

        TimeRange.prototype.getStartTime = function () {
            if (this.isStartOfDay()) {
                return 0;
            }
            return this._timeToMinutes(this.getStartTimeStr());
        };

        TimeRange.prototype.getTimeRange = function () {
            return new RG.Utils.TimeRange(this.getStartTime(), this.getEndTime());
        };

        TimeRange.prototype.isStartOfDay = function () {
            return this.getStartTimeStr() === "Start of day";
        };

        TimeRange.prototype.getStartTimeStr = function () {
            return this.$("#booking-start-time").val();
        };

        TimeRange.prototype._bindEvents = function () {
            return this.$el.on("change", "input.js-time-range-input", (function (_this) {
                return function () {
                    return _this.triggerValidate();
                };
            })(this));
        };

        TimeRange.prototype.render = function () {
            if (!this.customTemplate) {
                this.$el.html(this.template());
                this.$(".alt-toggle").toggle(this.togglable);
            }
            this._fillValues();
            this._bindEvents();
            this.validate();
            return this;
        };

        TimeRange.prototype.setEndTime = function (endTime) {
            this.endTime = endTime;
            return this._fillValues();
        };

        TimeRange.prototype.setStartTime = function (startTime) {
            this.startTime = startTime;
            return this._fillValues();
        };

        TimeRange.prototype.toggleError = function (error) {
            return this.$(".help-inline").toggle(error);
        };

        TimeRange.prototype.triggerValidate = function () {
            if (!isNaN(+this.getEndTime())) {
                window.rgStorage.set("TimeRange:EndTime:" + this.storageTypeName, +this.getEndTime());
            }
            if (!isNaN(+this.getStartTime())) {
                window.rgStorage.set("TimeRange:StartTime:" + this.storageTypeName, +this.getStartTime());
            }
            this.validate(true);
            this.trigger('change', this.getTimeRange());
            return true;
        };

        TimeRange.prototype.validate = function (trigger) {
            var error;
            error = false;
            if (this._validated()) {
                error = false;
            } else {
                error = true;
            }
            this.toggleError(error);
            if (trigger) {
                this.trigger('validate', !error);
            }
            return !error;
        };

        TimeRange.prototype._validated = function () {
            var valid;
            this.$el.find('.error').text('Please select a valid start and end time.');
            valid = this.getStartTime() >= 0 && this.getEndTime() <= 1440;
            valid = valid && (!isNaN(this._timeToMinutes(this.$("#booking-end-time").val())) || this.isEndOfDay());
            valid = valid && this.getEndTime() > this.getStartTime();
            if (!valid) {
                this.$el.find('.error').text('Start time must be before end time');
            }
            return valid && this._validateTimeStringRange(this.getStartTimeStr(), false) && this._validateTimeStringRange(this.getEndTimeStr(), true);
        };

        TimeRange.prototype._fillValues = function () {
            this._calendrical || (this._calendrical = this.$("#booking-start-time, #booking-end-time").calendricalTimeRange());
            this.$("#booking-start-time").val(this._minutesToTime(this.startTime));
            return this.$("#booking-end-time").val(this._minutesToTime(this.endTime));
        };

        TimeRange.prototype._minutesToTime = function (minutes) {
            var flag, hour, minuteStr;
            hour = Math.floor(minutes / 60);
            minutes = minutes % 60;
            flag = hour >= 12 && hour !== 24 ? "pm" : "am";
            minuteStr = minutes.toString();
            if (minuteStr.length === 1) {
                minuteStr = "0" + minuteStr;
            }
            if (hour === 0 && minutes === 0) {
                return 'Start of day';
            }
            if (hour === 24 && minutes === 0) {
                return 'End of day';
            }
            if (hour > 12) {
                hour = hour - 12;
            }
            if (hour === 0) {
                hour = 12;
            }
            return hour + ":" + minuteStr + flag;
        };

        TimeRange.prototype._timeToMinutes = function (time) {
            var flag, hours, hoursStr, minutes;
            hoursStr = time.substr(0, time.indexOf(":"));
            hours = parseInt(hoursStr, 10);
            minutes = parseInt(time.substr(hoursStr.length + 1, 2), 10);
            flag = time.substr(time.length - 2, 2);
            if (hours >= 12) {
                hours -= 12;
            }
            if (flag.toLowerCase() !== "am") {
                hours += 12;
            }
            return (hours * 60) + minutes;
        };

        TimeRange.prototype._validateTimeStringRange = function (time, end_parameter) {
            var flag, hours, hoursStr, minutes, total_minutes;
            hoursStr = time.substr(0, time.indexOf(":"));
            hours = parseInt(hoursStr, 10);
            minutes = parseInt(time.substr(hoursStr.length + 1, 2), 10);
            if (time === "Start of day") {
                minutes = 0;
                hours = 0;
            }
            if (time === "End of day") {
                minutes = 0;
                hours = 24;
            }
            if (time === "Start of day") {
                flag = "AM";
            } else if (time === "End of day") {
                flag = "PM";
            } else {
                flag = time.substr(time.length - 2, 2);
            }
            if (flag.toLowerCase() !== "am" && flag.toLowerCase() !== "pm") {
                return false;
            }
            if (minutes >= 60 || minutes < 0) {
                return false;
            }
            if (flag.toLowerCase() === "am" && !end_parameter && hours >= 13) {
                return false;
            }
            if (flag.toLowerCase() === "am" && end_parameter && hours >= 13) {
                return false;
            }
            if (hours >= 12) {
                hours -= 12;
            }
            if (flag.toLowerCase() !== "am") {
                hours += 12;
            }
            total_minutes = (hours * 60) + minutes;
            if (flag.toLowerCase() === "am" && end_parameter && total_minutes > 1440) {
                return false;
            }
            if (flag.toLowerCase() === "am" && !end_parameter) {
                if (total_minutes < 0 || total_minutes >= 720) {
                    return false;
                }
            }
            if (flag.toLowerCase() === "pm" && end_parameter) {
                if (total_minutes > 1440 || total_minutes < 720) {
                    return false;
                }
            }
            return true;
        };

        return TimeRange;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.TimeZoneSelector = (function (superClass) {
        extend(TimeZoneSelector, superClass);

        function TimeZoneSelector() {
            return TimeZoneSelector.__super__.constructor.apply(this, arguments);
        }

        TimeZoneSelector.prototype.initialize = function (options) {
            this.timeZones = options.timeZones;
            this.selectedOption = options.selectedOption;
            this.resourceLocalTime = options.resourceLocalTime;
            return this.currentUserTimeZone = options.currentUserTimeZone;
        };

        TimeZoneSelector.prototype.render = function () {
            this.$el.append();
            this._fillValues();
            this.setTimeZone();
            return this;
        };

        TimeZoneSelector.prototype._fillValues = function () {
            var defaultOptionGroup, defaultOptions, errorElement, optionGroup, select;
            errorElement = $(document.createElement('span')).addClass('help-inline error').text('Please select a timezone - selected resources are in different zones').hide();
            select = $(document.createElement('select'));
            defaultOptionGroup = $(document.createElement('optgroup'));
            defaultOptionGroup.append($(document.createElement('option')).text('Select an option').attr('selected', !this.selectedOption).val('none'));
            defaultOptionGroup.append($(document.createElement('option')).text("Resource's local time").attr('selected', this._isLocalTimeZone()).val("NullTimeZone"));
            defaultOptions = [_.unescape(this.selectedOption), _.unescape(this.currentUserTimeZone), _.unescape(this.resourceLocalTime)];
            optionGroup = $(document.createElement('optgroup')).attr('label', '--------------');
            this.timeZones.each((function (_this) {
                return function (timeZone) {
                    var option;
                    option = $(document.createElement("option"));
                    option.text(timeZone.toString()).val(timeZone.getName());
                    if (_.include(defaultOptions, timeZone.getName())) {
                        if (_this.selectedOption === timeZone.getName()) {
                            option.attr('selected', 'selected');
                        }
                        return defaultOptionGroup.append(option);
                    } else {
                        return optionGroup.append(option);
                    }
                };
            })(this));
            select.append(defaultOptionGroup);
            select.append(optionGroup);
            this.$el.append(select);
            this.$el.append(errorElement);
            return this.$el.on('change', 'select', (function (_this) {
                return function () {
                    return _this.validate();
                };
            })(this));
        };

        TimeZoneSelector.prototype.getTimeZone = function () {
            return this.$('select').val();
        };

        TimeZoneSelector.prototype.setTimeZone = function () {
            if (this.selectedOption) {
                return this.$('select').val(this.selectedOption);
            }
        };

        TimeZoneSelector.prototype.validate = function () {
            if (this.getTimeZone() === 'none') {
                this.$el.find('.error').show();
                return false;
            } else {
                this.$el.find('.error').hide();
                return true;
            }
        };

        TimeZoneSelector.prototype._isLocalTimeZone = function () {
            return this.selectedOption === (new RG.Models.NullTimeZone).getName();
        };

        return TimeZoneSelector;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.ColorControl = (function (superClass) {
        extend(ColorControl, superClass);

        function ColorControl() {
            return ColorControl.__super__.constructor.apply(this, arguments);
        }

        ColorControl.prototype.tagName = 'li';

        ColorControl.prototype.className = 'color-by dropdown is-header-dropdown has-chevron';

        ColorControl.prototype.template = templates.find('calendar/color_control');

        ColorControl.prototype.events = {
            'click #color-by-project': 'colorByProject',
            'click #color-by-client': 'colorByClient',
            'click #color-by-booker': 'colorByBooker',
            'click #color-by-trigger': 'clearAllSelections'
        };

        ColorControl.prototype.initialize = function (options) {
            this.colorSource = options.colorSource;
            return this.listenTo(this.colorSource, 'change:mode', this._setActiveLink);
        };

        ColorControl.prototype.clearAllSelections = function () {
            return RG.closeAllSelections();
        };

        ColorControl.prototype.colorByClient = function (e) {
            e.preventDefault();
            return this._colorBy('client');
        };

        ColorControl.prototype.colorByProject = function (e) {
            e.preventDefault();
            return this._colorBy('project');
        };

        ColorControl.prototype.colorByBooker = function (e) {
            e.preventDefault();
            return this._colorBy('booker');
        };

        ColorControl.prototype.render = function () {
            this.$el.html(this.template());
            this._setActiveLink();
            return this;
        };

        ColorControl.prototype._colorBy = function (option) {
            window.rgStorage.set('colorBookingsBy', option);
            return this.colorSource.colorBy(option);
        };

        ColorControl.prototype._setActiveLink = function () {
            return window.requestAnimationFrame((function (_this) {
                return function () {
                    var modeStr;
                    _this.$("li").removeClass('active');
                    _this.$("a#color-by-" + _this.colorSource.mode).closest('li').addClass('active');
                    modeStr = _this.colorSource.mode.charAt(0).toUpperCase() + _this.colorSource.mode.slice(1);
                    return _this.$("#active-coloring").text("Color by " + modeStr);
                };
            })(this));
        };

        return ColorControl;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.Controls = (function (superClass) {
        extend(Controls, superClass);

        function Controls() {
            this.searchChange = bind(this.searchChange, this);
            return Controls.__super__.constructor.apply(this, arguments);
        }

        Controls.prototype.template = templates.find('calendar/controls');

        Controls.prototype.tagName = 'header';

        Controls.prototype.events = {
            'click .filters a': 'toggleFilterBar',
            'click .js-toggle-availability': 'toggleAvailability',
            'click .js-zoom-toggle': 'toggleZoom',
            'click nav': 'closeAllDropdownsPopovers'
        };

        Controls.prototype.closeAllDropdownsPopovers = function (e) {
            $("#select2-drop-mask:visible").click();
            RG.closeSelectedOptions();
            return RG.Popovers.clear();
        };

        Controls.prototype.initialize = function (options) {
            this.dateControl = options.dateControl;
            this.colorControl = options.colorControl;
            this.filterBar = options.filterBar;
            this.searchGroup = options.searchGroup;
            this.searchGroup.on('change:filter', this.searchChange);
            this.filterBar.on('change:filter', (function (_this) {
                return function (ast) {
                    _this.searchGroup.off("change:filter");
                    _this.searchGroup.setFilters(_this.filterBar.getFilters());
                    _this.searchGroup.on('change:filter', _this.searchChange);
                    _this.emptySearchStyle();
                    return _this.searchGroup.searchBlur();
                };
            })(this));
            this.listenTo(this.filterBar, 'change:filter', this._setFilterActive);
            return this.zoomLevel = window.rgStorage.get('zoomLevel') || 'daily';
        };

        Controls.prototype.render = function () {
            this.$el.html(this.template());
            this._toggleAvailabilityButton();
            this._renderDateControl();
            this._renderColorControl();
            this._renderFilterBar();
            this._quickSearch();
            this._setZoomToolipTitles();
            this._initTooltips();
            return this;
        };

        Controls.prototype.toggleFilterBar = function (e) {
            return this.filterBar.resetFlyouts();
        };

        Controls.prototype.toggleAvailability = function (e) {
            var currentResource;
            e.preventDefault();
            currentResource = RG.getCurrentResource();
            this.availabilityToggle.toggle();
            this._toggleAvailabilityButton();
            this._setCurrentResource(currentResource);
            return false;
        };

        Controls.prototype._setCurrentResource = function (resource) {
            return setTimeout((function (_this) {
                return function () {
                    if (resource) {
                        return setTimeout(function () {
                            if (RG.Utils.unitsRendered()) {
                                return RG.setCurrentResource(resource);
                            } else {
                                return _this._setCurrentResource(resource);
                            }
                        }, 10);
                    }
                };
            })(this), 5);
        };

        Controls.prototype.setZoomDaily = function () {
            this.zoomLevel = 'daily';
            window.rgStorage.set("zoomLevel", this.zoomLevel);
            this.setZoom(function () {
                return $("#calendar").removeClass("detailed");
            });
            return false;
        };

        Controls.prototype.setZoomDetailed = function () {
            this.zoomLevel = 'detailed';
            window.rgStorage.set("zoomLevel", this.zoomLevel);
            this.setZoom(function () {
                return $("#calendar").addClass("detailed");
            });
            return false;
        };

        Controls.prototype.toggleZoom = function (e) {
            if (this.zoomLevel === "detailed") {
                this.setZoomDaily();
            } else {
                this.setZoomDetailed();
            }
            return this._setZoomToolipTitles();
        };

        Controls.prototype.setResourceCardSelectors = function () {
            return window.resources.collect(function (ri) {
                return {
                    card: $("aside .resource[data-resource-id=" + ri.cid + "]"),
                    line: $(".resource-line:not([style$='display: none;'])[data-resource-id=" + ri.cid + "]")
                };
            });
        };

        Controls.prototype.setZoom = function (callback) {
            var card_selectors, currentResource, leftRatio;
            leftRatio = this._getLeftRatio();
            currentResource = RG.getCurrentResource();
            RG.Popovers.popoverActive = false;
            RG.Popovers.clear();
            card_selectors = this.setResourceCardSelectors();
            callback();
            RG.resizeBookingWidths();
            card_selectors.forEach(function (selectors) {
                return selectors['card'].outerHeight(selectors['line'].outerHeight());
            });
            this._scrollLeftRatio(leftRatio);
            if ($(window).scrollLeft() + $(window).width() - $("#calendar > aside").width() > $("#resources").width()) {
                $(window).scrollLeft(0);
                $(window).scrollLeft($("#resources").width() - $(window).width() + $("#calendar > aside").width());
            }
            if (currentResource) {
                RG.setCurrentResource(currentResource);
            }
            return false;
        };

        Controls.prototype._toggleAvailabilityButton = function () {
            var toggleItem;
            toggleItem = this.$el.find('.js-toggle-availability');
            toggleItem.tooltip('destroy').tooltip({
                title: this.availabilityToggle.title
            });
            return toggleItem.toggleClass('active', this.availabilityToggle.shouldRenderUtilisation());
        };

        Controls.prototype._getLeftRatio = function () {
            return $(window).scrollLeft() / $("#resources .resource-line:visible").width();
        };

        Controls.prototype._getTopRatio = function () {
            return $(window).scrollTop() / $("#resources .resource-line:visible").height();
        };

        Controls.prototype._scrollLeftRatio = function (ratio) {
            return $(window).scrollLeft($("#resources .resource-line:visible").width() * ratio);
        };

        Controls.prototype._scrollTopRatio = function (ratio) {
            return $(window).scrollTop($("#resources .resource-line:visible").height() * ratio);
        };

        Controls.prototype._renderColorControl = function () {
            return this.$("#color-control").replaceWith(this.colorControl.render().el);
        };

        Controls.prototype._renderFilterBar = function () {
            return this.$("#filter-bar").replaceWith(this.filterBar.render().el);
        };

        Controls.prototype._setZoomToolipTitles = function () {
            var toggleItem;
            toggleItem = this.$(".zoom-toggle");
            if (this.zoomLevel === 'daily') {
                return toggleItem.tooltip('destroy').tooltip({
                    title: 'Zoom in'
                });
            } else if (this.zoomLevel === 'detailed') {
                return toggleItem.tooltip('destroy').tooltip({
                    title: 'Zoom out'
                });
            }
        };

        Controls.prototype._setFilterActive = function (tokens) {
            return this.$(".filters").toggleClass('active', tokens.length > 0);
        };

        Controls.prototype._quickSearch = function () {
            this.$('#quick-search').html(this.searchGroup.render().el);
            return this.emptySearchStyle();
        };

        Controls.prototype._initTooltips = function () {
            this.$el.find(".availability-toggle li").tooltip();
            return this.$el.find(".zoom-toggle").tooltip();
        };

        Controls.prototype._renderDateControl = function () {
            return this.$("nav").prepend(this.dateControl.render().el);
        };

        Controls.prototype.searchChange = function () {
            var categories, category, categoryFilter, filters, i, ids, j, len, len1, nameOption, nameOptions, options;
            filters = this.filterBar.getFilters();
            categories = _.collect(filters, function (c) {
                return c.categoryName;
            });
            for (i = 0, len = categories.length; i < len; i++) {
                category = categories[i];
                options = this.searchGroup.getSelectedOptions();
                categoryFilter = _.find(filters, function (filter) {
                    return filter['categoryName'] === category;
                });
                ids = [];
                if (options) {
                    ids = _.compact(_.map(options.selectedOptions, function (fo) {
                        if (fo.get('type') === category) {
                            return fo.id;
                        } else {
                            return null;
                        }
                    }));
                }
                if (categoryFilter) {
                    nameOptions = _.where(categoryFilter.options, {
                        name: 'Name',
                        id: void 0
                    });
                    for (j = 0, len1 = nameOptions.length; j < len1; j++) {
                        nameOption = nameOptions[j];
                        nameOption.selectedOptions = ids;
                    }
                }
            }
            this.filterBar.setFilters(filters);
            this.emptySearchStyle();
            return this.refocusQuickSearch();
        };

        Controls.prototype.emptySearchStyle = function () {
            if (this.searchGroup.getSelectedOptions() === null) {
                return this.$('#quick-search .select2-choices').addClass('no-choices');
            } else {
                return this.$('#quick-search .select2-choices').removeClass('no-choices');
            }
        };

        Controls.prototype.refocusQuickSearch = function () {
            this.searchGroup.searchFocused();
            return this.$('#quick-search .select2-choices').trigger('click');
        };

        return Controls;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.DateControl = (function (superClass) {
        extend(DateControl, superClass);

        function DateControl() {
            return DateControl.__super__.constructor.apply(this, arguments);
        }

        DateControl.prototype.tagName = "ul";

        DateControl.prototype.className = 'left-menu date-controls';

        DateControl.prototype.template = templates.find('calendar/date_control');

        DateControl.prototype.startYearPeriod = 2011;

        DateControl.prototype.endYearPeriod = function () {
            return new Date().getFullYear() + 7;
        };

        DateControl.prototype.events = {
            'click .js-current': 'goToCurrent',
            'click .js-previous': 'scrollLeft',
            'click .js-next': 'scrollRight',
            'click .months li': 'selectMonth',
            'click #jump-to-year-options li': 'selectYear',
            'click .year-scroller .js-scroll-year': 'scrollYear'
        };

        DateControl.prototype.initialize = function (options) {
            return this.initialDate = options.initialDate || new Date;
        };

        DateControl.prototype.goToCurrent = function (e) {
            e.preventDefault();
            return window.dateController.scrollToDate(RG.Utils.BookingDataParser.getDateFromStr(window.currentUserDate.date));
        };

        DateControl.prototype.scrollLeft = function (e) {
            e.preventDefault();
            $("html, body").animate({
                scrollLeft: $(window).scrollLeft() - RG.Utils.scrollSize()
            }, 500);
            if ($(window).scrollLeft() < 200) {
                RG.Variables.currentResource = RG.getCurrentResource();
                $(".large-controls .previous-timeperiods").addClass('loading');
                this.loadMoreBookings(this.scrollLeftCallback, 'left');
            }
        };

        DateControl.prototype.scrollLeftCallback = function () {
            var offset, referenceElement;
            referenceElement = $(document.elementFromPoint(295, 240)).closest(".resources--cal-unit");
            window.dateController.prepend(4);
            RG.updateLongBookings();
            $("#time-periods, #resources").css({
                width: window.ugc.getUnitCollection().length * RG.getUnitWidth()
            });
            $(".large-controls .previous-timeperiods").fadeOut().removeClass('loading');
            $(".booking-anchor.waitlist .waiting-list").removeClass("waiting-list");
            if (referenceElement && (offset = referenceElement.offset())) {
                $(window).scrollLeft(offset.left - 249 - referenceElement.width());
                $("html, body").animate({
                    scrollLeft: $(window).scrollLeft() - RG.Utils.scrollSize()
                });
            }
            if (RG.Variables.currentResource) {
                RG.setCurrentResource(RG.Variables.currentResource);
            }
            RG.Variables.currentResource = void 0;
        };

        DateControl.prototype.scrollRight = function (e) {
            e.preventDefault();
            if ((-1 * ($(window).scrollLeft() - $(document).width() + $(window).width())) < 200) {
                RG.Variables.currentResource = RG.getCurrentResource();
                $(".large-controls .next-timeperiods").addClass('loading');
                this.loadMoreBookings(this.scrollRightCallback, 'right');
            } else {
                $("html, body").animate({
                    scrollLeft: $(window).scrollLeft() + RG.Utils.scrollSize()
                }, 500);
            }
        };

        DateControl.prototype.scrollRightCallback = function () {
            var offset, referenceElement;
            referenceElement = $(document.elementFromPoint(251, 240)).closest(".resources--cal-unit");
            window.dateController.append(4);
            $("#time-periods, #resources").css({
                width: window.ugc.getUnitCollection().length * RG.getUnitWidth()
            });
            $(".large-controls .next-timeperiods").fadeOut().removeClass('loading');
            $(".booking-anchor.waitlist .waiting-list").removeClass("waiting-list");
            if (referenceElement && (offset = referenceElement.offset())) {
                $(window).scrollLeft(referenceElement.offset().left - 249);
                $("html, body").animate({
                    scrollLeft: $(window).scrollLeft() + RG.Utils.scrollSize()
                });
            }
            if (RG.Variables.currentResource) {
                RG.setCurrentResource(RG.Variables.currentResource);
            }
            RG.Variables.currentResource = void 0;
        };

        DateControl.prototype.loadMoreBookings = function (callback, direction) {
            var bookingPromise, data, date_end, date_start, downtimePromise, downtime_end, downtime_start;
            data = {
                calendar: 1
            };
            if (direction === 'left') {
                date_start = RG.Utils.firstVisibleDate();
                date_end = date_start.clone();
                date_start = date_start.subtract(56, 'days');
                data['start_date'] = encodeURIComponent(date_start.format('YYYY-MM-DD'));
                data['end_date'] = encodeURIComponent(date_end.format('YYYY-MM-DD'));
                downtime_start = date_start;
                downtime_end = RG.Utils.lastVisibleDate();
            } else {
                date_start = RG.Utils.lastVisibleDate().clone();
                date_end = date_start.clone().add(56, 'days');
                data['start_date'] = encodeURIComponent(date_start.format('YYYY-MM-DD'));
                data['end_date'] = encodeURIComponent(date_end.format('YYYY-MM-DD'));
                downtime_start = RG.Utils.firstVisibleDate();
                downtime_end = date_end;
            }
            bookingPromise = Q.Promise(function (resolve) {
                //return $.ajax("/v1/" + RG.Utils.BookingDataParser.host + "/bookings", {
                return $.ajax("http://localhost/EMRMAPI/schedule/resources/bootstrap",
                    {
                        data: data,
                        timeout: 30000,
                        success: function (response, status, xhr) {
                            response = [];
                            var endDate, startDate;
                            startDate = new Date(data['start_date']);
                            endDate = new Date(data['end_date']);
                            if (startDate < RG.Variables.dataDateRange.startDate) {
                                RG.Variables.dataDateRange.startDate = startDate;
                            }
                            if (endDate > RG.Variables.dataDateRange.endDate) {
                                RG.Variables.dataDateRange.endDate = endDate;
                            }
                            RG.Utils.BookingDataParser.processRawBookingData(response);
                            resolve();
                        }
                    });
            });
            downtimePromise = Q.Promise(function (resolve) {
                var dateRange;
                dateRange = new RG.Utils.DateRange(downtime_start, downtime_end);
                return RG.Utils.BookingDataParser.downtimesPoll((function () {
                    return false;
                }), dateRange).then(function () {
                    return resolve();
                });
            });
            Q.all([bookingPromise, downtimePromise]).then(Q.delay(500)).then(function () {
                return callback();
            });
        };

        DateControl.prototype.selectMonth = function (e) {
            var date, month, monthDrop, target, year, yearEl;
            target = this.$(e.target);
            if (target.closest('.months-dropdown').length > 0) {
                monthDrop = target.closest('.months-dropdown');
                yearEl = monthDrop.find(".year-scroller .current");
                year = parseInt(yearEl.text());
                month = parseInt(target.closest('li').data('month'));
            } else {
                year = parseInt(this.$("span#active-year").text(), 10);
                month = parseInt(target.closest('li').data('month'), 10);
            }
            date = new Date(year, month - 1, 1);
            return window.dateController.scrollToDate(date);
        };

        DateControl.prototype.selectYear = function (e) {
            var date;
            this.$("#jump-to-year-options li").removeClass("active");
            $(e.currentTarget).addClass("active");
            this.$("span#active-year").text($(e.currentTarget).text());
            date = RG.Utils.firstVisibleDate()._d;
            date = new Date(parseInt($(e.currentTarget).text(), 10), date.getMonth(), date.getDate() - 1);
            return window.dateController.scrollToDate(date);
        };

        DateControl.prototype.scrollYear = function (e) {
            var currentYearEl, target, year;
            e.preventDefault();
            e.stopPropagation();
            target = this.$(e.target);
            currentYearEl = this.$(".year-scroller .current");
            year = parseInt(currentYearEl.text());
            if (target.hasClass('next')) {
                year++;
            } else if (target.hasClass('previous')) {
                year--;
            }
            return currentYearEl.text(year);
        };

        DateControl.prototype.getYearRange = function () {
            var i, ref, ref1, results;
            return (function () {
                results = [];
                for (var i = ref = this.startYearPeriod, ref1 = this.endYearPeriod(); ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--) { results.push(i); }
                return results;
            }).apply(this).map(function (year) {
                return year;
            });
        };

        DateControl.prototype.render = function () {
            var yearRange;
            yearRange = this.getYearRange();
            this.$el.html(this.template({
                years: yearRange,
                activeYear: this.initialDate.getFullYear()
            }));
            this.$(".large-controls .next-timeperiods").click((function (_this) {
                return function (e) {
                    return _this.scrollRight(e);
                };
            })(this));
            this.$(".large-controls .previous-timeperiods").click((function (_this) {
                return function (e) {
                    return _this.scrollLeft(e);
                };
            })(this));
            return this;
        };

        return DateControl;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.FilterPanel = (function (superClass) {
        extend(FilterPanel, superClass);

        function FilterPanel() {
            return FilterPanel.__super__.constructor.apply(this, arguments);
        }

        FilterPanel.prototype.template = templates.find('calendar/filter_panel');

        FilterPanel.prototype.id = 'filter-bar';

        FilterPanel.prototype.className = 'dropdown-menu';

        FilterPanel.prototype.events = {
            "click .filter__save": "_collapsePopups",
            "click": "_cancelBubble"
        };

        FilterPanel.prototype.activateFilter = function (savedFilter) {
            return this.savedFilterView.activateFilter(savedFilter);
        };

        FilterPanel.prototype.clearSelection = function () {
            return this.filterCategoriesView.clearSelection();
        };

        FilterPanel.prototype.getFilters = function () {
            return this.filterCategoriesView.getFilters();
        };

        FilterPanel.prototype.getSelectedOptions = function () {
            return this.filterCategoriesView.getSelectedOptions();
        };

        FilterPanel.prototype.initialize = function (options) {
            this.filterCategories = options.filterCategories;
            return this.savedFilters = options.savedFilters;
        };

        FilterPanel.prototype.cleanup = function () {
            var ref, ref1;
            if ((ref = this.savedFilterView) != null) {
                ref.remove();
            }
            return (ref1 = this.filterCategoriesView) != null ? ref1.remove() : void 0;
        };

        FilterPanel.prototype.render = function () {
            this.cleanup();
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        FilterPanel.prototype.resetFlyouts = function () {
            return this.filterCategoriesView.resetFlyouts();
        };

        FilterPanel.prototype.setFilters = function (filters) {
            this.filterCategoriesView.off("change:filter");
            this.filterCategoriesView.setFilters(filters);
            this._setFilterCategoriesEvent();
            return this.triggerFilterChange();
        };

        FilterPanel.prototype.triggerFilterChange = function () {
            this.savedFilterView.watchFilterChanges(this.getSelectedOptions());
            return this.trigger("change:filter", this.getSelectedOptions());
        };

        FilterPanel.prototype._cancelBubble = function (e) {
            e.cancelBubble = true;
            return e.stopPropagation();
        };

        FilterPanel.prototype._collapsePopups = function () {
            return this.filterCategoriesView.resetFlyouts();
        };

        FilterPanel.prototype._fillValues = function () {
            var valueSource;
            this.filterCategoriesView = new RG.Views.Filters.Categories({
                collection: this.filterCategories
            });
            this._setFilterCategoriesEvent();
            this._getFilterCategoriesContainer().replaceWith(this.filterCategoriesView.render().el);
            valueSource = (function (_this) {
                return function () {
                    return _this.getFilters();
                };
            })(this);
            this.savedFilterView = new RG.Views.Filters.SavedFilterPanel({
                savedFilters: this.savedFilters,
                valueSource: valueSource
            });
            this.savedFilterView.on("activate:filter", (function (_this) {
                return function (savedFilter) {
                    _this.setFilters(savedFilter.getFilter());
                    return window.rgStorage.set('lastActiveFilterId', savedFilter.id);
                };
            })(this));
            this._getSaveFiltersContainer().replaceWith(this.savedFilterView.render().el);
            return this.savedFilterView.watchFilterChanges(this.getSelectedOptions());
        };

        FilterPanel.prototype._getFilterCategoriesContainer = function () {
            return this.$(".filter-categories");
        };

        FilterPanel.prototype._getSaveFiltersContainer = function () {
            return this.$(".filter__save");
        };

        FilterPanel.prototype._setFilterCategoriesEvent = function () {
            return this.filterCategoriesView.on("change:filter", (function (_this) {
                return function () {
                    _this.triggerFilterChange();
                    return window.rgStorage["delete"]('lastActiveFilterId');
                };
            })(this));
        };

        return FilterPanel;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.Header = (function (superClass) {
        extend(Header, superClass);

        function Header() {
            return Header.__super__.constructor.apply(this, arguments);
        }

        Header.prototype.tagName = 'header';

        Header.prototype.template = templates.find('calendar/header');

        Header.prototype.className = 'cal-unit-grouping-header';

        Header.prototype.assignRegions = function () {
            return this.timePeriods = this.$("#time-periods");
        };

        Header.prototype.render = function () {
            this.$el.html(this.template());
            this.assignRegions();
            return this;
        };

        Header.prototype.setTimePeriods = function (element) {
            return this.timePeriods.replaceWith(element);
        };

        return Header;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.Layout = (function (superClass) {
        extend(Layout, superClass);

        function Layout() {
            return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.id = 'calendar';

        Layout.prototype.template = templates.find('calendar/layout');

        Layout.prototype.initialize = function (options) {
            $(document).on("click", (function (_this) {
                return function (e) {
                    _this._closeFilterPanelAndPopovers(e);
                };
            })(this));
            this.dateController = options.dateController;
            this.initialDate = options.initialDate || new Date;
            this.periodGroupings = options.periodGroupings;
            this.resources = options.resources;
            this.savedFilters = options.savedFilters;
            this.filterSource = options.filterSource;
            this.colorSource = options.colorSource;
            this.currentUserId = options.currentUserId;
            this.clients = options.clients || new RG.Collections.Clients;
            this.deletedClients = options.deletedClients || new RG.Collections.Clients;
            this.projects = options.projects || new RG.Collections.Projects;
            this.deletedProjects = options.deletedProjects || new RG.Collections.Projects;
            this.bookers = options.bookers || new RG.Collections.Bookers;
            this.deletedBookers = options.deletedBookers || new RG.Collections.Bookers;
            this.downtimeTypes = options.downtimeTypes || new RG.Collections.DowntimeTypes;
            this.timeZones = options.timeZones;
            this.currentUserTimeZone = options.currentUserTimeZone;
            this.currentDate = options.currentDate;
            this.listenTo(this.periodGroupings, 'add', this._resize);
            this.listenTo(this.periodGroupings, 'remove', this._resize);
            this.listenTo(this.periodGroupings.getUnitCollection(), 'change', this._resize);
        };

        Layout.prototype.getInitialLoadLimit = function () {
            var browser, limit;
            limit = 40;
            browser = $('html').attr('class');
            try {
                if (browser.indexOf('ff') !== -1 || browser.indexOf('ie') !== -1 || browser.indexOf('safari') !== -1) {
                    if (browser.indexOf('ie') === 0) {
                        RG.Variables.slowBrowser = true;
                    }
                    limit = 30;
                }
            } catch (error) {
                limit = 30;
            }
            return limit;
        };

        Layout.prototype.render = function () {
            var paginator, periodGroupsView, resourceLinesView;
            this.$el.html(this.template());
            paginator = new RG.Utils.ResourcePaginator(this.resources, this.getInitialLoadLimit());
            window.resourcePaginator = paginator;
            this.pagedResources = paginator.getPaginatedCollection();
            this.resourceFilter = new RG.Utils.ResourceFilter(this.filterSource.resourceTypes);
            this._cardsView = new RG.Views.Resource.Cards({
                collection: this.pagedResources
            });
            this._controlsView = this._createControlsView();
            this._headerView = new RG.Views.Calendar.Header().render();
            periodGroupsView = new RG.Views.Calendar.UnitGroupings({
                collection: this.periodGroupings,
                currentDate: this.currentDate
            });
            this._headerView.setTimePeriods(periodGroupsView.render().el);
            resourceLinesView = new RG.Views.Resource.Lines({
                dateController: this.dateController,
                collection: this.pagedResources,
                timeUnits: this.periodGroupings.getUnitCollection(),
                currentDate: this.currentDate,
                colorSource: this.colorSource,
                bookingFormDialogFactory: this._createBookingFormDialogFactory(),
                downtimeFormDialogFactory: this._createDowntimeFormDialogFactory()
            });
            this._controlsView.availabilityToggle = resourceLinesView.availabilityToggle;
            this.$("header").replaceWith(this._controlsView.render().el);
            this.$("aside").replaceWith(this._cardsView.render().el);
            this.$("section").append(this._headerView.el);
            this.$("section").append(resourceLinesView.render().el);
            this.resources.setVisibleResources(this.resourceFilter.filterBy(this.resources, []));
            this._moveLargeControls();
            this._attachEvents();
            this._attachRightClickDrag();
            this._resize();
            return this;
        };

        Layout.prototype._adjustHeaderAndCards = function () {
            this._cardsView.$el.css({
                top: -window.pageYOffset + this._headerView.$el.position().top
            });
            this._headerView.$el.scrollLeft(window.pageXOffset);
        };

        Layout.prototype._attachEvents = function () {
            $(window).scroll((function (_this) {
                return function () {
                    return _this._adjustHeaderAndCards();
                };
            })(this));
        };

        Layout.prototype._attachRightClickDrag = function () {
            var interaction;
            interaction = new RG.Interactions.RightClickDragToScroll(window);
            interaction.attach();
        };

        Layout.prototype._closeFilterPanelAndPopovers = function (e) {
            var $target;
            $target = $(e.target);
            if (!$target.closest("#" + RG.Views.Resource.Lines.prototype.id).length) {
                RG.Popovers.replace();
            }
        };

        Layout.prototype._createControlsView = function () {
            var colorControl, dateControl, quickSearch, view;
            window.categories = this.filterSource.getCategories();
            this.filterBar = new RG.Views.Calendar.FilterPanel({
                filterCategories: window.categories,
                savedFilters: this.savedFilters
            });
            this.filterBar.on('change:filter', (function (_this) {
                return function (ast, reRender) {
                    if (reRender == null) {
                        reRender = true;
                    }
                    window.rgStorage.set('lastFiltersAst', JSON.stringify(_this.filterBar.getFilters()));
                    if (reRender) {
                        _this.resources.setVisibleResources(_this.resourceFilter.filterBy(_this.resources, ast));
                    }
                    RG.resizeCards();
                };
            })(this));
            window.resources.on('change:booked', (function (_this) {
                return function () {
                    return RG.backburner.deferOnce('render', _this, _this._triggerFilterChange);
                };
            })(this));
            dateControl = new RG.Views.Calendar.DateControl({
                initialDate: this.initialDate
            });
            colorControl = new RG.Views.Calendar.ColorControl({
                colorSource: this.colorSource
            });
            quickSearch = new RG.Views.Factories.NameSearch(this.resources).create({
                cssClass: 'quick-search-group'
            });
            view = new RG.Views.Calendar.Controls({
                dateControl: dateControl,
                colorControl: colorControl,
                filterBar: this.filterBar,
                searchGroup: quickSearch
            });
            return view;
        };

        Layout.prototype._triggerFilterChange = function () {
            return RG.renderer.enqueue(new RG.Renderer.GlobalLock(), (function (_this) {
                return function () {
                    return _this.filterBar.trigger("change:filter", _this.filterBar.getSelectedOptions(), false);
                };
            })(this));
        };

        Layout.prototype._createBookingFormDialogFactory = function () {
            return new RG.Views.Dialogs.BookingFormFactory({
                clients: this.clients,
                deletedClients: this.deletedClients,
                projects: this.projects,
                deletedProjects: this.deletedProjects,
                resources: this.resources,
                bookers: this.bookers,
                deletedBookers: this.deletedBookers,
                downtimeTypes: this.downtimeTypes,
                currentUserId: this.currentUserId,
                timeZones: this.timeZones,
                currentUserTimeZone: this.currentUserTimeZone
            });
        };

        Layout.prototype._createDowntimeFormDialogFactory = function () {
            return new RG.Views.Dialogs.DowntimeFormFactory({
                resources: this.resources,
                bookers: this.bookers,
                deletedBookers: this.deletedBookers,
                downtimeTypes: this.downtimeTypes,
                currentUserId: this.currentUserId,
                timeZones: this.timeZones,
                currentUserTimeZone: this.currentUserTimeZone
            });
        };

        Layout.prototype._moveLargeControls = function () {
            var $controls;
            $controls = this.$(".large-controls").detach();
            this.$el.prepend($controls);
        };

        Layout.prototype._resize = function () {
            this.$("#time-periods, #resources").css({
                width: this.periodGroupings.getUnitCollection().models.length * RG.getUnitWidth()
            });
        };

        Layout.prototype.setInitialFilters = function () {
            var ex, keys, lastUsedFilter;
            try {
                if (window.rgStorage.get('lastActiveFilterId')) {
                    lastUsedFilter = this.savedFilters.findWhere({
                        id: parseInt(window.rgStorage.get('lastActiveFilterId'), 10)
                    });
                    this.filterBar.activateFilter(lastUsedFilter);
                } else if (window.rgStorage.get('lastFiltersAst')) {
                    this.filterBar.setFilters(JSON.parse(window.rgStorage.get('lastFiltersAst')));
                }
            } catch (error) {
                ex = error;
                keys = ['lastFilters', 'lastFilterString', 'lastActiveFilterId', 'lastFiltersAst', 'filterBarWasCollapsed'];
                keys.forEach((function (_this) {
                    return function (k) {
                        return window.rgStorage["delete"](k);
                    };
                })(this));
            }
        };

        Layout.prototype.setInitialResource = function () {
            Q.delay(100).then((function (_this) {
                return function () {
                    var lastResourceId, resource, selector;
                    lastResourceId = window.rgStorage.get('lastResourceId');
                    if (lastResourceId) {
                        resource = window.resources.findWhere({
                            id: parseInt(lastResourceId, 10)
                        });
                        selector = $(".resource[data-resource-id=" + resource.cid + "]");
                        if (selector.length) {
                            Q.delay(100).then(function () {
                                window.rgStorage["delete"]('lastResourceId');
                                RG.setCurrentResource(resource);
                            });
                        } else {
                            _this.setInitialResource();
                            return;
                        }
                    }
                };
            })(this));
        };

        return Layout;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.SaveFilterForm = (function (superClass) {
        extend(SaveFilterForm, superClass);

        function SaveFilterForm() {
            return SaveFilterForm.__super__.constructor.apply(this, arguments);
        }

        SaveFilterForm.prototype.template = templates.find('filters/save_filter_form');

        SaveFilterForm.prototype.className = "filter__save-form";

        SaveFilterForm.prototype.events = {
            "click .btn.save": "saveFilter",
            "keyup input": "_validate",
            "keydown input": "_submitSaveOnEnter"
        };

        SaveFilterForm.prototype.initialize = function (options) {
            return this.valueSource = options.valueSource;
        };

        SaveFilterForm.prototype.focusInput = function () {
            return this.$("input[name=name]").focus();
        };

        SaveFilterForm.prototype.render = function () {
            this.$el.html(this.template());
            this._validate();
            return this;
        };

        SaveFilterForm.prototype.resetForm = function () {
            this._enableForm();
            return this.$("input").val("").focus();
        };

        SaveFilterForm.prototype.saveFilter = function () {
            var existingFilter, filter, mustOverwite, xhr;
            if (this.$(".btn.save").hasClass("disabled")) {
                return;
            }
            existingFilter = window.savedFilters.find((function (_this) {
                return function (sf) {
                    var ref;
                    return ((ref = sf.get('name')) != null ? ref.toLowerCase() : void 0) === _this._getName().toLowerCase();
                };
            })(this));
            filter = existingFilter || new RG.Models.SavedFilter;
            xhr = null;
            if (existingFilter) {
                mustOverwite = confirm("That name already exists. Do you want to replace the existing filter?");
                if (mustOverwite) {
                    filter.set({
                        name: this._getName(),
                        filter_json: JSON.stringify(this._getCurrentFilters())
                    });
                    xhr = filter.save();
                } else {
                    return;
                }
            } else {
                filter.set({
                    name: this._getName(),
                    filter_json: JSON.stringify(this._getCurrentFilters())
                });
                xhr = filter.save();
            }
            xhr.success((function (_this) {
                return function (data, status, xhr) {
                    _this.resetForm();
                    return _this.trigger("save:filter", filter);
                };
            })(this));
            xhr.error((function (_this) {
                return function (data) {
                    var errors;
                    errors = JSON.parse(data.responseText);
                    alert(errors['name']);
                    return _this._enableForm();
                };
            })(this));
            return this._disableForm();
        };

        SaveFilterForm.prototype._disableForm = function () {
            return this.$(".btn.save").addClass("disabled");
        };

        SaveFilterForm.prototype._enableForm = function () {
            return this.$(".btn").removeClass("disabled");
        };

        SaveFilterForm.prototype._getName = function () {
            return this.$("input[name=name]").val();
        };

        SaveFilterForm.prototype._getCurrentFilters = function () {
            return this.valueSource();
        };

        SaveFilterForm.prototype._submitSaveOnEnter = function (e) {
            if (e.keyCode === 13) {
                return this.saveFilter();
            }
        };

        SaveFilterForm.prototype._validate = function () {
            if (this._getName().length === 0) {
                return this._disableForm();
            } else {
                return this._enableForm();
            }
        };

        return SaveFilterForm;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.SavedFilterPanel = (function (superClass) {
        extend(SavedFilterPanel, superClass);

        function SavedFilterPanel() {
            return SavedFilterPanel.__super__.constructor.apply(this, arguments);
        }

        SavedFilterPanel.prototype.template = templates.find('filters/saved_filter_panel');

        SavedFilterPanel.prototype.className = "filter__save";

        SavedFilterPanel.prototype.events = {
            "click .filter__save-link": "toggleSaveForm",
            "click .btn.cancel": "_cancelSaveForm"
        };

        SavedFilterPanel.prototype.initialize = function (options) {
            this.savedFilters = options.savedFilters;
            this.valueSource = options.valueSource;
            return this.listenTo(this.savedFilters, "add remove", this._setSavedFilterVisibility);
        };

        SavedFilterPanel.prototype.activateFilter = function (savedFilter) {
            return this.savedFilterListView.activateFilter(savedFilter);
        };

        SavedFilterPanel.prototype.isSaveFormOpen = function () {
            return this._getSaveFilterFormContainer().css("display") === "block";
        };

        SavedFilterPanel.prototype.render = function () {
            this.$el.html(this.template());
            this.saveFilterFormView = new RG.Views.Filters.SaveFilterForm({
                valueSource: this.valueSource
            });
            this.saveFilterFormView.on("save:filter", (function (_this) {
                return function (savedFilter) {
                    _this.savedFilters.add(savedFilter);
                    _this.savedFilterListView.activateFilter(savedFilter);
                    return _this.toggleSaveForm();
                };
            })(this));
            this._getSaveFilterFormContainer().replaceWith(this.saveFilterFormView.render().el);
            this.savedFilterListView = new RG.Views.Filters.SavedFilters({
                collection: this.savedFilters
            });
            this.savedFilterListView.on("activate:filter", (function (_this) {
                return function (savedFilter) {
                    return _this.trigger("activate:filter", savedFilter);
                };
            })(this));
            this._getSaveFilterListContainer().replaceWith(this.savedFilterListView.render().el);
            this._setSavedFilterVisibility();
            this.$('.filter__info-tooltip').tooltip();
            this.$(".filter__save-link").tooltip();
            return this;
        };

        SavedFilterPanel.prototype.toggleSaveForm = function () {
            if (!this.$(".filter__save-link").hasClass("is-disabled")) {
                this._getSaveFilterFormContainer().slideToggle('fast');
                return this.saveFilterFormView.focusInput();
            }
        };

        SavedFilterPanel.prototype.watchFilterChanges = function (selectedOptions) {
            var $saveFilterLink;
            this.savedFilterListView.removeActiveState();
            $saveFilterLink = this.$(".filter__save-link");
            if (selectedOptions.length === 0) {
                $saveFilterLink.addClass("is-disabled").tooltip();
                if (this.isSaveFormOpen()) {
                    return this.toggleSaveForm();
                }
            } else {
                return $saveFilterLink.removeClass("is-disabled").tooltip('destroy');
            }
        };

        SavedFilterPanel.prototype._cancelSaveForm = function () {
            this._getSaveFilterFormContainer().slideToggle(false);
            return this.saveFilterFormView.resetForm();
        };

        SavedFilterPanel.prototype._getSaveFilterFormContainer = function () {
            return this.$(".filter__save-form");
        };

        SavedFilterPanel.prototype._getSaveFilterListContainer = function () {
            return this.$(".filter__saved-filter-list");
        };

        SavedFilterPanel.prototype._setSavedFilterVisibility = function () {
            var visible;
            visible = this.savedFilters.length > 0;
            this.$(".filter__saved-filter-list").toggle(visible);
            return this.$("h3").toggle(visible);
        };

        return SavedFilterPanel;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.Unit = (function (superClass) {
        extend(Unit, superClass);

        function Unit() {
            return Unit.__super__.constructor.apply(this, arguments);
        }

        Unit.prototype.className = 'cal-unit';

        Unit.prototype.template = templates.find('calendar/unit');

        Unit.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        Unit.prototype._fillValues = function () {
            this.$("span.name").text(this.model.getName());
            this.$("span.date").text(this.model.getFormattedDate());
            this.$el.attr('data-date', RG.Utils.DateFormatter.getISODate(this.model.date));
            this._setCurrent();
        };

        Unit.prototype._setCurrent = function () {
            this.$el.toggleClass("current", this.model.isCurrent());
        };

        return Unit;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.UnitGrouping = (function (superClass) {
        extend(UnitGrouping, superClass);

        function UnitGrouping() {
            return UnitGrouping.__super__.constructor.apply(this, arguments);
        }

        UnitGrouping.prototype.template = templates.find('calendar/unit_grouping');

        UnitGrouping.prototype.className = 'unit-group';

        UnitGrouping.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        UnitGrouping.prototype._fillValues = function () {
            var units, unitsView;
            units = this.model.getUnits();
            unitsView = new RG.Views.Calendar.Units({
                collection: units
            });
            this.$('.units').replaceWith(unitsView.render().el);
            this.$('.date-period').text(this.model.toString());
            this._fillWeek(units);
        };

        UnitGrouping.prototype._fillWeek = function (units) {
            var unit;
            unit = units.first();
            return this.$('.week-period').text("W " + (unit.getWeek()));
        };

        return UnitGrouping;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.UnitGroupings = (function (superClass) {
        extend(UnitGroupings, superClass);

        function UnitGroupings() {
            return UnitGroupings.__super__.constructor.apply(this, arguments);
        }

        UnitGroupings.prototype.id = 'time-periods';

        UnitGroupings.prototype.itemView = RG.Views.Calendar.UnitGrouping;

        UnitGroupings.prototype.initialize = function (options) {
            UnitGroupings.__super__.initialize.apply(this, arguments);
            this.currentDate = options.currentDate;
            return this.listenTo(this.currentDate, 'change', (function (_this) {
                return function () {
                    return _this.render();
                };
            })(this));
        };

        UnitGroupings.prototype.addItem = function (model) {
            var target, view;
            view = this.createItemView({
                model: model
            });
            this.collectionViews[model.cid] = view;
            target = this.collectionTarget ? this.$(this.collectionTarget) : this.$el;
            if (this.collection.models[0] === model) {
                return target.prepend(view.render().el);
            } else {
                return target.append(view.render().el);
            }
        };

        return UnitGroupings;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Calendar.Units = (function (superClass) {
        extend(Units, superClass);

        function Units() {
            return Units.__super__.constructor.apply(this, arguments);
        }

        Units.prototype.className = 'units';

        Units.prototype.itemView = RG.Views.Calendar.Unit;

        return Units;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var slice = [].slice;

    RG.Views.Calendar.UtilisationBarFactory = {
        create: function () {
            var className, i, len, ratio, ratios, span, unit, width;
            width = arguments[0], className = arguments[1], ratios = 3 <= arguments.length ? slice.call(arguments, 2) : [];
            unit = document.createElement("div");
            unit.style.width = (width * 100) + "%";
            unit.className = className || "unit";
            for (i = 0, len = ratios.length; i < len; i++) {
                ratio = ratios[i];
                span = document.createElement(ratio.element || "span");
                span.style.width = (ratio.width * 100) + "%";
                span.style.backgroundColor = ratio.color || "#333";
                if (ratio.title) {
                    span.setAttribute("title", ratio.title);
                }
                span.className = ratio.className;
                unit.appendChild(span);
            }
            return unit;
        }
    };

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.TimeBlock = (function (superClass) {
        extend(TimeBlock, superClass);

        function TimeBlock() {
            return TimeBlock.__super__.constructor.apply(this, arguments);
        }

        TimeBlock.prototype.tagName = 'span';

        TimeBlock.prototype.className = 'availability-info__timeblock js-timeblock';

        TimeBlock.prototype.render = function () {
            this.$el.html(this.model.toString());
            return this;
        };

        return TimeBlock;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.TimeBlocks = (function (superClass) {
        extend(TimeBlocks, superClass);

        function TimeBlocks() {
            return TimeBlocks.__super__.constructor.apply(this, arguments);
        }

        TimeBlocks.prototype.itemView = RG.Views.CustomAvailability.TimeBlock;

        TimeBlocks.prototype.className = "js-time-blocks availability-info__time";

        TimeBlocks.prototype.initialize = function (options) {
            TimeBlocks.__super__.initialize.apply(this, arguments);
            return this.variesFromDefault = options.varies;
        };

        TimeBlocks.prototype.render = function () {
            TimeBlocks.__super__.render.apply(this, arguments);
            this._renderIcon();
            return this;
        };

        TimeBlocks.prototype.addItem = function (model) {
            var e, element, elements, i, len, ref, split;
            if (model.get('startTime') === model.get('endTime')) {
                return;
            }
            TimeBlocks.__super__.addItem.apply(this, arguments);
            this.$(".text--small").remove();
            elements = this.$el.find('.js-timeblock');
            ref = elements.slice(1, +(elements.length - 1) + 1 || 9e9);
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                split = $(document.createElement("span"));
                split.addClass("text--small availability-info__time-break").text('Break');
                e = split[0];
                this.el.insertBefore(e, element);
            }
        };

        TimeBlocks.prototype._removeViewByModelCid = function () {
            var e, element, elements, i, len, ref, split;
            TimeBlocks.__super__._removeViewByModelCid.apply(this, arguments);
            this.$(".text--small").remove();
            elements = this.$el.find('.js-timeblock');
            ref = elements.slice(1, +(elements.length - 1) + 1 || 9e9);
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                split = $(document.createElement("span"));
                split.addClass("text--small").text('Break');
                e = split[0];
                this.el.insertBefore(e, element);
            }
        };

        TimeBlocks.prototype._renderIcon = function () {
            var element;
            if (this.variesFromDefault) {
                element = $(document.createElement('span'));
                element.attr({
                    'data-toggle': "tooltip",
                    'data-html': "true",
                    'data-placement': "left",
                    'data-original-title': 'The availability here differs from the <b>Normal Availability</b> assigned to this resource. You can reset it back to <b>Normal Availability</b> if you choose.'
                });
                element.addClass('filter__info-tooltip').tooltip();
                return this.$el.append(element);
            }
        };

        return TimeBlocks;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.AddTimeBlock = (function (superClass) {
        extend(AddTimeBlock, superClass);

        function AddTimeBlock() {
            return AddTimeBlock.__super__.constructor.apply(this, arguments);
        }

        AddTimeBlock.prototype.template = templates.find('availability/add_timeblock');

        AddTimeBlock.prototype.initialize = function (options) {
            this.newTimeBlockStartTime = options.newTimeBlockStartTime || 540;
            return this.newTimeBlockEndTime = _.min([this.newTimeBlockStartTime + 60, 1440]);
        };

        AddTimeBlock.prototype.render = function () {
            this.$el.html(this.template());
            this.$(".js-add-button").on("click", (function (_this) {
                return function (e) {
                    return _this.addTimeBlock(e);
                };
            })(this));
            this.$(".js-cancel-button").on("click", (function (_this) {
                return function (e) {
                    return _this.triggerClose(e);
                };
            })(this));
            this.timeRangeSelector = new RG.Views.Selectors.TimeRange({
                startTime: this.newTimeBlockStartTime,
                endTime: this.newTimeBlockEndTime,
                storageTypeName: 'AddTimeBlock',
                togglable: false
            });
            this.$el.on("click", "input.js-time-range-input", function (e) {
                return e.stopPropagation();
            });
            this.timeRangeSelector.on("validate", (function (_this) {
                return function (valid) {
                    if (valid) {
                        return _this.$(".js-add-button").attr('disabled', null);
                    } else {
                        return _this.$(".js-add-button").attr('disabled', 'disabled');
                    }
                };
            })(this));
            this.$(".js-time-range").append(this.timeRangeSelector.render().el);
            this.timeRangeSelector.triggerValidate();
            return this;
        };

        AddTimeBlock.prototype._getAvailablePeriod = function () {
            return new RG.Models.CustomAvailablePeriod({
                startTime: this.timeRangeSelector.getStartTime(),
                endTime: this.timeRangeSelector.getEndTime()
            });
        };

        AddTimeBlock.prototype._originalPeriod = function () {
            return new RG.Models.CustomAvailablePeriod({
                startTime: this.newTimeBlockStartTime,
                endTime: this.newTimeBlockEndTime
            });
        };

        AddTimeBlock.prototype.addTimeBlock = function (e) {
            this.trigger('remove', this._originalPeriod());
            this.trigger("add", this._getAvailablePeriod());
            return this.triggerClose();
        };

        AddTimeBlock.prototype.closeSelector = function () {
            return this.timeRangeSelector.closeSelector();
        };

        AddTimeBlock.prototype.remove = function () {
            var ref;
            this.$(".js-add-button").off();
            this.$(".js-cancel-button").off();
            if ((ref = this.timeRangeSelector) != null) {
                ref.remove();
            }
            return AddTimeBlock.__super__.remove.apply(this, arguments);
        };

        AddTimeBlock.prototype.triggerClose = function (e) {
            return this.trigger("close");
        };

        return AddTimeBlock;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty,
        slice = [].slice;

    RG.Views.CustomAvailability.AvailabilityBreakdown = (function (superClass) {
        extend(AvailabilityBreakdown, superClass);

        function AvailabilityBreakdown() {
            return AvailabilityBreakdown.__super__.constructor.apply(this, arguments);
        }

        AvailabilityBreakdown.prototype.initialize = function (options) {
            this.bookedMinutes = options.bookedMinutes;
            this.availableMinutes = options.availableMinutes;
            return this.overtimeMinutes = options.overtimeMinutes;
        };

        AvailabilityBreakdown.prototype.render = function () {
            if (this.availableMinutes > 0) {
                this.$el.append(this._renderAvailabilityBar());
                this.$el.append(this._renderAvailabilityHours());
            }
            return this;
        };

        AvailabilityBreakdown.prototype._renderAvailabilityBar = function () {
            var bookedOvertimeMinutes, options, ref, title, unbookedAvailableMinutes, usedNormalMinutes;
            bookedOvertimeMinutes = this.overtimeMinutes > 0 && this.availableMinutes - this.bookedMinutes < this.overtimeMinutes ? Math.abs(this.availableMinutes - this.bookedMinutes - this.overtimeMinutes) : 0;
            usedNormalMinutes = this.bookedMinutes - bookedOvertimeMinutes;
            title = (RG.Utils.TimeFormatter.formatMinutes(usedNormalMinutes)) + " booked";
            options = [
                {
                    width: usedNormalMinutes / this.availableMinutes,
                    color: "#9F9F9F",
                    className: "progress-bar__bar",
                    title: title
                }
            ];
            if (this.overtimeMinutes) {
                if (this.availableMinutes - this.overtimeMinutes < this.bookedMinutes) {
                    title = (RG.Utils.TimeFormatter.formatMinutes(bookedOvertimeMinutes)) + " overtime booked";
                    options.push({
                        width: bookedOvertimeMinutes / this.availableMinutes,
                        color: '#B47972',
                        className: "progress-bar__bar",
                        title: title
                    });
                    if (this.bookedMinutes < this.availableMinutes) {
                        title = (RG.Utils.TimeFormatter.formatMinutes(this.availableMinutes - this.bookedMinutes)) + " overtime unused";
                        options.push({
                            width: (this.availableMinutes - this.bookedMinutes) / this.availableMinutes,
                            color: '#F7BCB5',
                            className: "progress-bar__bar",
                            title: title
                        });
                    }
                } else {
                    unbookedAvailableMinutes = this.availableMinutes - this.overtimeMinutes - this.bookedMinutes;
                    title = (RG.Utils.TimeFormatter.formatMinutes(unbookedAvailableMinutes)) + " free";
                    options.push({
                        width: unbookedAvailableMinutes / this.availableMinutes,
                        color: '#FFF',
                        className: "progress-bar__bar",
                        title: title
                    });
                    if (this.bookedMinutes < this.availableMinutes) {
                        title = (RG.Utils.TimeFormatter.formatMinutes(this.overtimeMinutes)) + " overtime unused";
                        options.push({
                            width: this.overtimeMinutes / this.availableMinutes,
                            color: '#F7BCB5',
                            className: "progress-bar__bar",
                            title: title
                        });
                    }
                }
            } else {
                unbookedAvailableMinutes = this._getFreeMinutes();
                title = (RG.Utils.TimeFormatter.formatMinutes(unbookedAvailableMinutes)) + " free";
                options.push({
                    width: unbookedAvailableMinutes / this.availableMinutes,
                    color: '#FFF',
                    className: "progress-bar__bar",
                    title: title
                });
            }
            return (ref = RG.Views.Calendar.UtilisationBarFactory).create.apply(ref, [1, "progress-bar"].concat(slice.call(options)));
        };

        AvailabilityBreakdown.prototype._renderAvailabilityHours = function () {
            var el;
            el = $("<div></div>").addClass("availability-info__hours");
            el.append($("<span></span>").addClass("pull--left").text((RG.Utils.TimeFormatter.formatMinutes(this.bookedMinutes)) + " booked"));
            el.append($("<span></span>").addClass("pull--right").text((RG.Utils.TimeFormatter.formatMinutes(this._getFreeMinutes())) + " free"));
            return el;
        };

        AvailabilityBreakdown.prototype._getFreeMinutes = function () {
            return Math.max(this.availableMinutes - this.bookedMinutes, 0);
        };

        return AvailabilityBreakdown;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DateRange = (function (superClass) {
        extend(DateRange, superClass);

        function DateRange() {
            return DateRange.__super__.constructor.apply(this, arguments);
        }

        DateRange.prototype.template = templates.find('availability/date_range');

        DateRange.prototype.className = "js-date-range-component";

        DateRange.prototype.initialize = function (options) {
            this.weekDay = options.weekDay;
            return DateRange.__super__.initialize.apply(this, arguments);
        };

        DateRange.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        DateRange.prototype._fillValues = function () {
            this.$(".js-day-name").text(new RG.Utils.DayName(this.weekDay).toString());
            return this._setDateText();
        };

        DateRange.prototype._setDateText = function () {
            var date;
            if (this._hasMultipleDays()) {
                this.$(".js-date-range").text(this.model);
                return this._setMultipleDays();
            } else {
                date = _.find(this.model.getDates(), (function (_this) {
                    return function (date) {
                        return date.getDay() === _this.weekDay;
                    };
                })(this));
                this.$(".js-date-range").text(new RG.Utils.DateRange(date, date).toString());
                return this._setSingleDay();
            }
        };

        DateRange.prototype._hasMultipleDays = function () {
            return _.select(this.model.getDates(), (function (_this) {
                return function (date) {
                    return date.getDay() === _this.weekDay;
                };
            })(this)).length > 1;
        };

        DateRange.prototype._setMultipleDays = function () {
            this.$(".js-multiple-days-every").text("Every ");
            return this.$(".js-multiple-days-from").text("from ");
        };

        DateRange.prototype._setSingleDay = function () {
            this.$(".js-multiple-days-every").text("");
            return this.$(".js-multiple-days-from").text("");
        };

        return DateRange;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.Day = (function (superClass) {
        extend(Day, superClass);

        function Day() {
            return Day.__super__.constructor.apply(this, arguments);
        }

        Day.prototype.template = templates.find('availability/day');

        Day.prototype.tagName = 'li';

        Day.prototype.className = 'custom-availability-day';

        Day.prototype.initialize = function (options) {
            this.dateRange = options.dateRange;
            this.date = this.collection.day.date;
            if (this.collection.dayOverlap) {
                return this.hours = 'varies';
            } else {
                return this.hours = this.collection.getMinutesAvailableForDate(this.date) / 60;
            }
        };

        Day.prototype.render = function () {
            var timeBlocksView;
            this.$el.html(this.template({
                day: this.collection.day,
                hours: this.hours,
                cid: this.cid,
                overtime: 5
            }));
            timeBlocksView = new RG.Views.CustomAvailability.TimeBlocks({
                collection: this.collection
            });
            this.$el.find(".js-day-details").replaceWith(timeBlocksView.el);
            this.removeBody();
            return this;
        };

        Day.prototype.renderBody = function () {
            var body, i, len, model, ref;
            this.$el.addClass('active');
            ref = this.collection.models;
            for (i = 0, len = ref.length; i < len; i++) {
                model = ref[i];
                this.addItem(model);
            }
            body = this.$el.find('.js-custom-availability-day-body');
            this.$el.find('.js-availability-overview').show();
            this.$el.find('.js-custom-availability-helper-text').show();
            if (this.collection.dayOverlap) {
                return this.$el.find('.js-availability-varies-text').show();
            }
        };

        Day.prototype.removeBody = function () {
            this.$el.removeClass('active');
            this.$el.find('.js-day-details').html('');
            this.$el.find('.js-availability-overview').hide();
            this.$el.find('.js-custom-availability-helper-text').hide();
            return this.$el.find('.js-availability-varies-text').hide();
        };

        return Day;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayDetail = (function (superClass) {
        extend(DayDetail, superClass);

        function DayDetail() {
            return DayDetail.__super__.constructor.apply(this, arguments);
        }

        DayDetail.prototype.template = templates.find('availability/day_detail');

        DayDetail.prototype.className = "availability-info";

        DayDetail.prototype.initialize = function (options) {
            this.timeOffText = options.timeOffText;
            return this.listenTo(this.model.getFirstAvailablePeriods(), "remove reset", this.render);
        };

        DayDetail.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        DayDetail.prototype.remove = function () {
            var ref, ref1, ref2, ref3;
            this.model.getFirstAvailablePeriods().off("remove reset", this.render);
            if ((ref = this.breakdown) != null) {
                ref.remove();
            }
            if ((ref1 = this.dateRangeView) != null) {
                ref1.remove();
            }
            if ((ref2 = this.timeBlocks) != null) {
                ref2.remove();
            }
            if ((ref3 = this.totalAvailabilityView) != null) {
                ref3.remove();
            }
            return DayDetail.__super__.remove.apply(this, arguments);
        };

        DayDetail.prototype._fillValues = function () {
            this._renderDateRange();
            this._renderTimeBlocks();
            this._renderAvailabilityText();
            return this._renderBreakdownBar();
        };

        DayDetail.prototype._renderDateRange = function () {
            var dateRange, dayName;
            dateRange = this.model.getDateRange();
            if (dateRange.getNumberOfDays() > 1) {
                dayName = new RG.Utils.DayName(this.model.get('weekDay'));
                this.dateRangeView = new RG.Views.CustomAvailability.DateRange({
                    weekDay: this.model.get('weekDay'),
                    model: dateRange
                });
                return this.$(".js-date-range-component").replaceWith(this.dateRangeView.render().el);
            }
        };

        DayDetail.prototype._renderTimeBlocks = function () {
            var collection;
            if (this.model.availabilityConsistent()) {
                collection = this.model.getFirstAvailablePeriods();
                this.timeBlocks = new RG.Views.CustomAvailability.TimeBlocks({
                    collection: collection,
                    varies: this.model.variesFromNormalAvailability()
                });
                return this.$(".js-time-blocks").replaceWith(this.timeBlocks.render().el);
            } else {
                return this.$(".js-time-blocks").remove();
            }
        };

        DayDetail.prototype._renderAvailabilityText = function () {
            if (this.model.availabilityAndDowntimeConsistent()) {
                this.totalAvailabilityView = new RG.Views.CustomAvailability.TotalAvailabilityText({
                    availabilityConsistent: this.model.totalAvailabilityAndDowntimeConsistent(),
                    availableMinutes: this.model.getCurrentMinutesAvailable(),
                    overtimeMinutes: this._getOvertimeMinutes(),
                    downtimes: this.model.getFirstDowntimes(),
                    timeOffText: this.timeOffText
                });
                return this.$(".js-availability-text").replaceWith(this.totalAvailabilityView.render().el);
            }
        };

        DayDetail.prototype._renderBreakdownBar = function () {
            if (this.model.totalAvailabilityAndBookingsConsistent()) {
                this.breakdown = new RG.Views.CustomAvailability.AvailabilityBreakdown({
                    availableMinutes: this.model.getTotalMinutesAvailable(),
                    bookedMinutes: _.reduce(this._getFirstDurations(), (function (acc, d) {
                        return acc + d.getMinutes();
                    }), 0),
                    overtimeMinutes: this._getOvertimeMinutes()
                });
                return this.$el.append(this.breakdown.render().el);
            } else {
                return this.$el.append($(document.createElement("em")).text("Availability and booked/free time vary over this time period.").addClass('availability-info__info'));
            }
        };

        DayDetail.prototype._getFirstDurations = function () {
            var k, ref, v;
            ref = this.model.get('durations');
            for (k in ref) {
                v = ref[k];
                return _.filter(v, function (d) {
                    return d.isConfirmed();
                });
            }
        };

        DayDetail.prototype._getOvertimeMinutes = function () {
            if (this.model.overtimesConsistent()) {
                return this.model.overtime();
            }
            return null;
        };

        DayDetail.prototype._getDowntimeMinutes = function () {
            return this.model.downtime();
        };

        DayDetail.prototype._setVarianceText = function (text) {
            return this.$(".js-variance-text").text(text);
        };

        return DayDetail;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayDetailForm = (function (superClass) {
        extend(DayDetailForm, superClass);

        function DayDetailForm() {
            return DayDetailForm.__super__.constructor.apply(this, arguments);
        }

        DayDetailForm.prototype.className = "js-day-detail availability-info";

        DayDetailForm.prototype.events = {
            "click .js-text--edit-overtime": "popupOvertime"
        };

        DayDetailForm.prototype.initialize = function () {
            this.model.on('availabilityReset', this._rebindAps, this);
            return DayDetailForm.__super__.initialize.apply(this, arguments);
        };

        DayDetailForm.prototype._bindAps = function () {
            return this.model.getFirstAvailablePeriods().on("remove reset", this.render, this);
        };

        DayDetailForm.prototype._rebindAps = function () {
            this.model.getFirstAvailablePeriods().off("remove reset", this.render);
            return this._bindAps();
        };

        DayDetailForm.prototype.remove = function () {
            var ref;
            this.model.off('availabilityReset', this._rebindAps, this);
            this.closePopovers();
            if ((ref = this.timeBlock) != null) {
                ref.remove();
            }
            this._removeOvertimePopover();
            return DayDetailForm.__super__.remove.apply(this, arguments);
        };

        DayDetailForm.prototype._renderBreakdownBar = function () { };

        DayDetailForm.prototype._renderTimeBlocks = function () {
            var collection, dayName;
            if (this.model.availabilityConsistent()) {
                collection = this.model.getFirstAvailablePeriods();
                this.timeBlocks = new RG.Views.CustomAvailability.RemovableTimeBlocks({
                    collection: collection
                });
                this.timeBlocks.on("updatePosition", (function (_this) {
                    return function () {
                        return _this.trigger("updatePosition");
                    };
                })(this));
                this.$(".js-time-blocks").replaceWith(this.timeBlocks.render().el);
            } else {
                this.timeBlock = new RG.Views.CustomAvailability.RemovableTimeBlock({
                    model: new RG.Models.VaryingAvailablePeriod
                });
                this.timeBlock.on("remove", this.clearVaryingAvailability, this);
                dayName = new RG.Utils.DayName(this.model.get('weekDay'));
                this.$(".js-time-blocks").append($(document.createElement("p")).text("Availability varies within this date range. To change that, you can specify times below " + "to apply to every " + dayName.fullName() + " within the date range. If you make no changes, it " + "will remain varied on " + dayName.fullName() + "s."));
                this.$(".js-time-blocks").append(this.timeBlock.render().el);
            }
            return this._bindEvents();
        };

        DayDetailForm.prototype._bindEvents = function () {
            return this.on("openDropdown", (function (_this) {
                return function () {
                    var ref;
                    return (ref = _this.timeBlocks) != null ? ref.trigger("openDropdown") : void 0;
                };
            })(this));
        };

        DayDetailForm.prototype._renderAvailabilityText = function () {
            var availableMinutes, overtimeMinutes, ref;
            if ((ref = this.totalAvailabilityView) != null) {
                ref.remove();
            }
            overtimeMinutes = this._getOvertimeMinutes();
            availableMinutes = this.model.getCurrentMinutesAvailable();
            if (overtimeMinutes > availableMinutes) {
                overtimeMinutes = 0;
            }
            this.totalAvailabilityView = new RG.Views.CustomAvailability.TotalAvailabilityText({
                availabilityConsistent: this.model.totalAvailabilityConsistent(),
                availableMinutes: availableMinutes,
                overtimeConsistent: this.model.overtimesConsistent(),
                overtimeMinutes: overtimeMinutes,
                downtimes: this.model.getFirstDowntimes(),
                timeOffText: this.timeOffText,
                alwaysShowOvertime: true,
                className: 'availability-info__edit',
                overtimeClassName: 'text--edit-overtime js-text--edit-overtime'
            });
            return this.$el.append(this.totalAvailabilityView.render().el);
        };

        DayDetailForm.prototype.closePopovers = function () {
            var ref, ref1, ref2, ref3, ref4, ref5, ref6;
            if ((ref = this.overTimePopover) != null) {
                ref.remove();
            }
            if ((ref1 = this.timeBlocks) != null) {
                if ((ref2 = ref1.addTimeBlockView) != null) {
                    ref2.remove();
                }
            }
            if ((ref3 = this.timeBlocks) != null) {
                if ((ref4 = ref3.editTimeBlockView) != null) {
                    ref4.remove();
                }
            }
            if ((ref5 = this.timeBlocks) != null) {
                ref5.addTimeBlockView = null;
            }
            return (ref6 = this.timeBlocks) != null ? ref6.editTimeBlockView = null : void 0;
        };

        DayDetailForm.prototype.popupOvertime = function (e) {
            e.stopPropagation();
            this.trigger('editing:overtime');
            $(".dropdown").removeClass("open");
            this._removeOvertimePopover();
            this.overTimePopover = new RG.Views.Dialogs.EditOvertimePopover({
                availabilityConsistent: this.model.totalAvailabilityConsistent(),
                availableMinutes: this.model.getCurrentMinutesAvailable(),
                overtimeMinutes: this._getOvertimeMinutes(),
                attachTo: this.$(".js-availability-text-container")
            });
            this.overTimePopover.on("editing:overtime:done", (function (_this) {
                return function () {
                    return _this.trigger('editing:overtime:done');
                };
            })(this));
            this.overTimePopover.on('change', (function (_this) {
                return function (value) {
                    if (+value > 0 && _this.model.getFirstOvertimes().models.length === 0) {
                        _this.model.getFirstOvertimes().add(new RG.Models.Overtime({
                            resourceInstanceId: _this.model.collection.resourceId,
                            duration: value
                        }));
                    } else {
                        _this.model.setOvertime(value);
                    }
                    _this.overTimePopover = null;
                    return _this._renderAvailabilityText();
                };
            })(this));
            return this.overTimePopover.popup();
        };

        DayDetailForm.prototype._removeOvertimePopover = function () {
            var ref, ref1, ref2;
            if ((ref = this.overTimePopover) != null) {
                ref.off('change');
            }
            if ((ref1 = this.overTimePopover) != null) {
                ref1.off('editing:overtime:done');
            }
            if ((ref2 = this.overTimePopover) != null) {
                ref2.remove();
            }
            return this.trigger("overtime:popover:removed");
        };

        DayDetailForm.prototype.clearVaryingAvailability = function () {
            this.model.clearVaryingAvailability();
            this.trigger('availabilityCleared', this.model);
            return this.model.getFirstAvailablePeriods().trigger('reset');
        };

        return DayDetailForm;

    })(RG.Views.CustomAvailability.DayDetail);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayRange = (function (superClass) {
        extend(DayRange, superClass);

        function DayRange() {
            return DayRange.__super__.constructor.apply(this, arguments);
        }

        DayRange.prototype.className = 'availability-tabs';

        DayRange.prototype.events = {
            "click .js-edit-availability": "triggerEdit"
        };

        DayRange.prototype.initialize = function (options) {
            this.selectedDay = options.selectedDay || this.collection.models[0];
            return this.resource = options.resource;
        };

        DayRange.prototype.remove = function () {
            var ref, ref1;
            if ((ref = this.dayDetailView) != null) {
                ref.remove();
            }
            if ((ref1 = this.tabsView) != null) {
                ref1.remove();
            }
            return DayRange.__super__.remove.apply(this, arguments);
        };

        DayRange.prototype.render = function () {
            this.$el.empty();
            this._renderTabs();
            if (RG.Utils.Permissions.canManageResource(this.resource)) {
                this.$el.append('<a class="availability-tabs__edit js-edit-availability">Edit</a>');
            }
            this._renderDetail(this.selectedDay);
            return this;
        };

        DayRange.prototype.triggerEdit = function () {
            return this.trigger("edit");
        };

        DayRange.prototype._getTabs = function () {
            return this.collection;
        };

        DayRange.prototype._buildDayDetailView = function (model) {
            return this.dayDetailView = new RG.Views.CustomAvailability.DayDetail({
                model: model,
                timeOffText: this.resource.getDowntimeText()
            });
        };

        DayRange.prototype._renderDetail = function (model) {
            var ref, ref1;
            if ((ref = this.dayDetailView) != null) {
                ref.remove();
            }
            this._buildDayDetailView(model);
            this.$el.append(this.dayDetailView.render().el);
            this.selectedDay = model;
            this.trigger("change", model);
            return (ref1 = this.tabsView) != null ? ref1.setTab(model) : void 0;
        };

        DayRange.prototype._renderTabs = function () {
            if (this.collection.length > 1) {
                this.tabsView = new RG.Views.CustomAvailability.DayTabs({
                    collection: this._getTabs()
                });
                this.tabsView.on("change", (function (_this) {
                    return function (model) {
                        return _this._renderDetail(model);
                    };
                })(this));
                return this.$el.append(this.tabsView.render().el);
            }
        };

        return DayRange;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayRangeForm = (function (superClass) {
        extend(DayRangeForm, superClass);

        function DayRangeForm() {
            return DayRangeForm.__super__.constructor.apply(this, arguments);
        }

        DayRangeForm.prototype.render = function () {
            this.$el.empty();
            this._renderTabs();
            this._renderDetail(this.selectedDay);
            this._bindEvents();
            return this;
        };

        DayRangeForm.prototype.closePopovers = function () {
            return this.dayDetailView.closePopovers();
        };

        DayRangeForm.prototype._bindEvents = function () {
            return this.on("openDropdown", (function (_this) {
                return function () {
                    var ref;
                    return (ref = _this.dayDetailView) != null ? ref.trigger("openDropdown") : void 0;
                };
            })(this));
        };

        DayRangeForm.prototype._buildDayDetailView = function (model) {
            this.dayDetailView = new RG.Views.CustomAvailability.DayDetailForm({
                model: model,
                timeOffText: this.resource.getDowntimeText()
            });
            this.dayDetailView.on('availabilityCleared', ((function (_this) {
                return function (model) {
                    return _this.trigger('change', model);
                };
            })(this)), this);
            this.dayDetailView.on("updatePosition", (function (_this) {
                return function () {
                    return _this.trigger("updatePosition");
                };
            })(this));
            this._bindOvertime();
            return this.dayDetailView;
        };

        DayRangeForm.prototype._rebindEditingOvertime = function () {
            this.dayDetailView.off('editing:overtime');
            this.dayDetailView.off('editing:overtime:done');
            return this._bindOvertime();
        };

        DayRangeForm.prototype._bindOvertime = function () {
            this.dayDetailView.on('editing:overtime', (function (_this) {
                return function () {
                    return _this.trigger('editing:overtime');
                };
            })(this));
            this.dayDetailView.on('editing:overtime:done', (function (_this) {
                return function () {
                    return _this.trigger('editing:overtime:done');
                };
            })(this));
            return this.dayDetailView.on('overtime:popover:removed', this._rebindEditingOvertime, this);
        };

        return DayRangeForm;

    })(RG.Views.CustomAvailability.DayRange);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayTab = (function (superClass) {
        extend(DayTab, superClass);

        function DayTab() {
            return DayTab.__super__.constructor.apply(this, arguments);
        }

        DayTab.prototype.tagName = 'li';

        DayTab.prototype.className = 'availability-tabs__title tab-title';

        DayTab.prototype.events = {
            'click': 'triggerChange'
        };

        DayTab.prototype.initialize = function () {
            this._bindAps();
            return this.model.on('availabilityReset', this.rebindAps, this);
        };

        DayTab.prototype.remove = function () {
            this.model.off('availabilityReset', this.rebindAps, this);
            this.aps.off("add remove reset", this.render, this);
            return DayTab.__super__.remove.apply(this, arguments);
        };

        DayTab.prototype.rebindAps = function () {
            this.aps.off('add remove reset', this.render, this);
            return this._bindAps();
        };

        DayTab.prototype._bindAps = function () {
            this.aps = this.model.getFirstAvailablePeriods();
            return this.aps.on("add remove reset", this.render, this);
        };

        DayTab.prototype.render = function () {
            var dayName;
            dayName = new RG.Utils.DayName(this.model.get('weekDay'));
            this.$el.html("<a>" + dayName + " <span>" + (this._getTimeString()) + "</span></a>");
            return this;
        };

        DayTab.prototype.activate = function () {
            return this.$el.addClass('active');
        };

        DayTab.prototype.deactivate = function () {
            return this.$el.removeClass('active');
        };

        DayTab.prototype.triggerChange = function () {
            return this.trigger("change", this.model);
        };

        DayTab.prototype._getTimeString = function () {
            var minutes;
            minutes = this.model.getAvailabilityWithoutDowntime();
            if (this.model.availabilityConsistent()) {
                return RG.Utils.TimeFormatter.formatMinutes(minutes);
            } else {
                return "Varied";
            }
        };

        return DayTab;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.DayTabs = (function (superClass) {
        extend(DayTabs, superClass);

        function DayTabs() {
            return DayTabs.__super__.constructor.apply(this, arguments);
        }

        DayTabs.prototype.tagName = 'ul';

        DayTabs.prototype.className = 'tabs';

        DayTabs.prototype.itemView = RG.Views.CustomAvailability.DayTab;

        DayTabs.prototype.render = function () {
            var defaultModel, ref;
            DayTabs.__super__.render.apply(this, arguments);
            defaultModel = ((ref = this.currentTab) != null ? ref.model : void 0) || this.collection.models[0];
            if (defaultModel) {
                this.setTab(defaultModel);
            }
            return this;
        };

        DayTabs.prototype.remove = function () {
            var ref;
            if ((ref = this.currentTab) != null) {
                ref.remove();
            }
            this.currentTab = null;
            return DayTabs.__super__.remove.apply(this, arguments);
        };

        DayTabs.prototype.setTab = function (model) {
            var ref, ref1;
            if ((ref = this.currentTab) != null) {
                ref.deactivate();
            }
            this.currentTab = this.collectionViews[model.cid];
            return (ref1 = this.currentTab) != null ? ref1.activate() : void 0;
        };

        DayTabs.prototype._insertView = function (view) {
            DayTabs.__super__._insertView.apply(this, arguments);
            return view.on("change", (function (_this) {
                return function (model) {
                    _this.trigger("change", model);
                    return _this.setTab(view.model);
                };
            })(this));
        };

        DayTabs.prototype._removeView = function (view) {
            DayTabs.__super__._removeView.apply(this, arguments);
            return view.off("change");
        };

        return DayTabs;

    })(RG.Support.SortedCollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.EditTimeBlock = (function (superClass) {
        extend(EditTimeBlock, superClass);

        function EditTimeBlock() {
            return EditTimeBlock.__super__.constructor.apply(this, arguments);
        }

        EditTimeBlock.prototype.template = templates.find('availability/add_timeblock');

        EditTimeBlock.prototype.initialize = function (options) {
            this.newTimeBlockStartTime = options.newTimeBlockStartTime;
            return this.newTimeBlockEndTime = options.newTimeBlockEndTime;
        };

        EditTimeBlock.prototype.render = function () {
            EditTimeBlock.__super__.render.apply(this, arguments);
            this.$('.js-add-button').text('Update');
            this.$(".js-cancel-button").on("click", (function (_this) {
                return function (e) {
                    e.stopPropagation();
                    return _this.triggerClose(e);
                };
            })(this));
            this.$('h3').text('Edit Time Block');
            return this;
        };

        return EditTimeBlock;

    })(RG.Views.CustomAvailability.AddTimeBlock);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.RemovableTimeBlock = (function (superClass) {
        extend(RemovableTimeBlock, superClass);

        function RemovableTimeBlock() {
            return RemovableTimeBlock.__super__.constructor.apply(this, arguments);
        }

        RemovableTimeBlock.prototype.tagName = 'span';

        RemovableTimeBlock.prototype.className = 'availability-info__timeblock-edit js-timeblock';

        RemovableTimeBlock.prototype.events = {
            "click .js-close": "removeTimeBlock",
            "click": 'editTimeBlock'
        };

        RemovableTimeBlock.prototype.remove = function () {
            this.off();
            this.$el.off();
            return RemovableTimeBlock.__super__.remove.apply(this, arguments);
        };

        RemovableTimeBlock.prototype.render = function () {
            if (this.model.isEditable()) {
                this.$el.append($(document.createElement('a')).text(this.model.toString()).addClass('js-edit time-link'));
            } else {
                this.$el.html(this.model.toString());
            }
            this.$el.append('<span type="button" class="close js-close" aria-hidden="true">Ã—</span>');
            this.$el.on("click", (function (_this) {
                return function (e) {
                    return _this.editTimeBlock(e);
                };
            })(this));
            return this;
        };

        RemovableTimeBlock.prototype.editTimeBlock = function (e) {
            this.trigger('edit', this);
            return e.stopPropagation();
        };

        RemovableTimeBlock.prototype.removeTimeBlock = function (e) {
            this.trigger("remove", this.model);
            return e.stopPropagation();
        };

        return RemovableTimeBlock;

    })(RG.Views.CustomAvailability.TimeBlock);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.RemovableTimeBlocks = (function (superClass) {
        extend(RemovableTimeBlocks, superClass);

        function RemovableTimeBlocks() {
            return RemovableTimeBlocks.__super__.constructor.apply(this, arguments);
        }

        RemovableTimeBlocks.prototype.itemView = RG.Views.CustomAvailability.RemovableTimeBlock;

        RemovableTimeBlocks.prototype.className = 'availability-info__time';

        RemovableTimeBlocks.prototype.events = {
            "click .js-add-timeblock": "addTimeBlock"
        };

        RemovableTimeBlocks.prototype.remove = function () {
            var ref, ref1;
            this.off();
            this.$el.off();
            if ((ref = this.addTimeBlockView) != null) {
                ref.remove();
            }
            if ((ref1 = this.editTimeBlockView) != null) {
                ref1.remove();
            }
            return RemovableTimeBlocks.__super__.remove.apply(this, arguments);
        };

        RemovableTimeBlocks.prototype.render = function () {
            var addTimeblock, firstAvailablePeriod;
            RemovableTimeBlocks.__super__.render.apply(this, arguments);
            firstAvailablePeriod = this.collection.models[0];
            if (!firstAvailablePeriod || !firstAvailablePeriod.isAllDay()) {
                addTimeblock = $(document.createElement("div")).addClass("availability-info__timeblock-add js-add-timeblock").append("<a class='time-link'>Add time block</a>");
                this.$el.append(addTimeblock);
            }
            this._bindEvents();
            this._addLastTimeBlockClass();
            return this;
        };

        RemovableTimeBlocks.prototype._bindEvents = function () {
            return this.on("openDropdown", (function (_this) {
                return function () {
                    var ref, ref1;
                    if ((ref = _this.addTimeBlockView) != null) {
                        ref.remove();
                    }
                    return (ref1 = _this.editTimeBlockView) != null ? ref1.remove() : void 0;
                };
            })(this));
        };

        RemovableTimeBlocks.prototype._insertView = function (view, model) {
            RemovableTimeBlocks.__super__._insertView.apply(this, arguments);
            view.on("remove", (function (_this) {
                return function (model) {
                    return _this.collection.remove(model);
                };
            })(this));
            view.on("edit", (function (_this) {
                return function (view) {
                    return _this.editTimeBlock(view);
                };
            })(this));
            return view;
        };

        RemovableTimeBlocks.prototype._removeView = function (view) {
            this.trigger("updatePosition");
            view.off("remove");
            return RemovableTimeBlocks.__super__._removeView.apply(this, arguments);
        };

        RemovableTimeBlocks.prototype.editTimeBlock = function (view) {
            var newTimeBlockStartTime, ref, ref1, ref2;
            $(".dropdown").removeClass("open");
            if ((ref = this.addTimeBlockView) != null) {
                ref.remove();
            }
            if ((ref1 = this.editTimeBlockView) != null) {
                ref1.remove();
            }
            newTimeBlockStartTime = (ref2 = this.collection.last()) != null ? ref2.attributes.endTime : void 0;
            this.editTimeBlockView = new RG.Views.Dialogs.EditTimeBlockDropdown({
                attachTo: view.$el,
                newTimeBlockStartTime: view.model.get('startTime'),
                newTimeBlockEndTime: view.model.get('endTime')
            });
            this.editTimeBlockView.popup();
            this.editTimeBlockView.on("update", (function (_this) {
                return function (availablePeriod) {
                    return _this._update(availablePeriod);
                };
            })(this));
            return this.editTimeBlockView.on("remove", (function (_this) {
                return function (availablePeriod) {
                    return _this._remove(availablePeriod);
                };
            })(this));
        };

        RemovableTimeBlocks.prototype.addTimeBlock = function (e) {
            var newTimeBlockStartTime, ref, ref1, ref2;
            $(".dropdown").removeClass("open");
            if ((ref = this.addTimeBlockView) != null) {
                ref.remove();
            }
            if ((ref1 = this.editTimeBlockView) != null) {
                ref1.remove();
            }
            newTimeBlockStartTime = (ref2 = this.collection.last()) != null ? ref2.attributes.endTime : void 0;
            this.addTimeBlockView = new RG.Views.Dialogs.AddTimeBlockPopover({
                attachTo: this.$(".js-add-timeblock"),
                newTimeBlockStartTime: newTimeBlockStartTime
            });
            this.addTimeBlockView.popup();
            this.addTimeBlockView.on("add", (function (_this) {
                return function (availablePeriod) {
                    return _this._update(availablePeriod);
                };
            })(this));
            return e.stopPropagation();
        };

        RemovableTimeBlocks.prototype._convertToCustomAvailablePeriods = function () {
            var customAvailablePeriods;
            customAvailablePeriods = this.collection.map(function (ap) {
                return new RG.Models.CustomAvailablePeriod({
                    startTime: ap.get('startTime'),
                    endTime: ap.get('endTime'),
                    pending: true
                });
            });
            return this.collection.reset(customAvailablePeriods, {
                silent: true
            });
        };

        RemovableTimeBlocks.prototype._mergeOverlaps = function () {
            var customAvailablePeriods, timeRanges, tr;
            if (!this.collection.length) {
                return;
            }
            timeRanges = this.collection.map(function (ap) {
                return new RG.Utils.TimeRange(ap.get('startTime'), ap.get('endTime'));
            });
            tr = timeRanges.shift();
            timeRanges = tr.merge.apply(tr, timeRanges);
            customAvailablePeriods = _.map(timeRanges, function (tr) {
                return new RG.Models.CustomAvailablePeriod({
                    startTime: tr.startTime,
                    endTime: tr.endTime
                });
            });
            return this.collection.reset(customAvailablePeriods);
        };

        RemovableTimeBlocks.prototype._update = function (availablePeriod) {
            this._convertToCustomAvailablePeriods();
            this.collection.add(availablePeriod);
            this._mergeOverlaps();
            this._addLastTimeBlockClass();
            this.trigger("updatePosition");
            this.addTimeBlockView = null;
            return this.editTimeBlockView = null;
        };

        RemovableTimeBlocks.prototype._addLastTimeBlockClass = function () {
            return this.$('.js-timeblock:last').addClass('last-timeblock');
        };

        RemovableTimeBlocks.prototype._remove = function (availablePeriod) {
            var period;
            period = this.collection.findWhere({
                startTime: availablePeriod.get('startTime'),
                endTime: availablePeriod.get('endTime')
            });
            return this.collection.remove(period, {
                silent: true
            });
        };

        return RemovableTimeBlocks;

    })(RG.Views.CustomAvailability.TimeBlocks);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.TimeBlocksMenu = (function (superClass) {
        extend(TimeBlocksMenu, superClass);

        function TimeBlocksMenu() {
            return TimeBlocksMenu.__super__.constructor.apply(this, arguments);
        }

        TimeBlocksMenu.prototype.className = 'js-timeblocks-menu';

        TimeBlocksMenu.prototype.render = function () {
            return this;
        };

        return TimeBlocksMenu;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.CustomAvailability.TotalAvailabilityText = (function (superClass) {
        extend(TotalAvailabilityText, superClass);

        function TotalAvailabilityText() {
            return TotalAvailabilityText.__super__.constructor.apply(this, arguments);
        }

        TotalAvailabilityText.prototype.alwaysShowOvertime = false;

        TotalAvailabilityText.prototype.overtimeClassName = 'text--warning';

        TotalAvailabilityText.prototype.initialize = function (options) {
            this.timeOffText = options.timeOffText;
            this.availabilityConsistent = options.availabilityConsistent;
            this.availableMinutes = options.availableMinutes;
            this.overtimeConsistent = options.overtimeConsistent;
            this.overtimeMinutes = options.overtimeMinutes;
            if (options.alwaysShowOvertime !== void 0) {
                this.alwaysShowOvertime = options.alwaysShowOvertime;
            }
            if (options.overtimeClassName) {
                this.overtimeClassName = options.overtimeClassName;
            }
            return this.downtimes = options.downtimes;
        };

        TotalAvailabilityText.prototype.render = function () {
            var child;
            while ((child = this.el.firstChild)) {
                this.el.removeChild(child);
            }
            this.availabilityEl = $(document.createElement("p")).addClass('js-availability-text-container');
            this.overtimeEl = $(document.createElement('em')).addClass('text--small');
            this._renderDeductions();
            this._renderAvailabilityBreakdown();
            this._renderInconsistentAvailability();
            this.availabilityEl.append(this.overtimeEl);
            this._renderNoLink();
            this.$el.append(this.availabilityEl);
            return this;
        };

        TotalAvailabilityText.prototype._renderDeductions = function () {
            var downtime, downtimeLessSpan, i, len, ref, results, timeRange;
            if (this.downtimes.length > 0) {
                ref = this.downtimes;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                    timeRange = ref[i];
                    downtime = $(document.createElement("p")).addClass('js-availability-deduction');
                    downtimeLessSpan = $(document.createElement("span")).addClass('downtime-less').text('Less');
                    downtime.text(" " + this.timeOffText + " - " + (timeRange.toString()));
                    downtime.prepend(downtimeLessSpan);
                    results.push(this.$el.append(downtime));
                }
                return results;
            }
        };

        TotalAvailabilityText.prototype._renderAvailabilityBreakdown = function () {
            var overtime, time;
            if (this.availabilityConsistent) {
                this.availabilityEl.text("Total availability - ");
                time = $(document.createElement("strong")).text(RG.Utils.TimeFormatter.formatMinutes(this.availableMinutes));
                this.availabilityEl.append(time);
                if (this.overtimeMinutes > 0 || (this.alwaysShowOvertime && this.overtimeMinutes === 0)) {
                    overtime = $(document.createElement("strong")).addClass(this.overtimeClassName).text((RG.Utils.TimeFormatter.formatMinutes(this.overtimeMinutes)) + " overtime");
                    this.overtimeEl.append(" (including ");
                    this.overtimeEl.append(overtime);
                    return this.overtimeEl.append(")");
                } else if (this.overtimeMinutes === null) {
                    return this.overtimeEl.append($(document.createElement("span")).addClass(this.overtimeClassName).text(" (overtime varies)"));
                }
            }
        };

        TotalAvailabilityText.prototype._renderInconsistentAvailability = function () {
            var overtime;
            if (!this.availabilityConsistent) {
                this.availabilityEl.text("Availability varies");
                overtime = $(document.createElement("strong")).addClass(this.overtimeClassName);
                this._renderOvertime(overtime);
                this.overtimeEl.append(" (including ");
                this.overtimeEl.append(overtime);
                return this.overtimeEl.append(")");
            }
        };

        TotalAvailabilityText.prototype._renderOvertime = function (overtime) {
            if (this.overtimeConsistent) {
                return overtime.text((RG.Utils.TimeFormatter.formatMinutes(this.overtimeMinutes)) + " overtime");
            }
            return overtime.text("varied overtime");
        };

        TotalAvailabilityText.prototype._renderNoLink = function () {
            var e, jsClasses;
            if (!(this.availableMinutes > 0)) {
                e = $(this.availabilityEl).find("." + (this.overtimeClassName.split(' ')[0]));
                jsClasses = _.select(this.overtimeClassName.split(' '), function (klassName) {
                    return klassName.match(/js-/);
                }).join(' ');
                e.removeClass(jsClasses);
                return e.addClass('no-link');
            }
        };

        return TotalAvailabilityText;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.Dialog = (function (superClass) {
        extend(Dialog, superClass);

        function Dialog() {
            return Dialog.__super__.constructor.apply(this, arguments);
        }

        Dialog.prototype.template = templates.find('dialogs/dialog');

        Dialog.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.headerView = options.header;
            this.bodyView = options.body;
            return this.footerView = options.footer;
        };

        Dialog.prototype.closeOpenOptions = function () {
            return this.$(".btn-group.open").toggleClass("open");
        };

        Dialog.prototype.render = function () {
            var i, len, ref, ref1, ref2, ref3, subView;
            this.$el.html(this.template());
            this.$("header").replaceWith((ref = this.headerView) != null ? ref.render().el : void 0);
            this.$("main").replaceWith((ref1 = this.bodyView) != null ? ref1.render().el : void 0);
            this.$("footer").replaceWith((ref2 = this.footerView) != null ? ref2.render().el : void 0);
            ref3 = [this.headerView, this.bodyView, this.footerView];
            for (i = 0, len = ref3.length; i < len; i++) {
                subView = ref3[i];
                if (subView != null) {
                    subView.on("all", (function (_this) {
                        return function () {
                            return _this.trigger.apply(_this, arguments);
                        };
                    })(this));
                }
            }
            this.$el.on('click', (function (_this) {
                return function () {
                    return _this.closeOpenOptions();
                };
            })(this));
            return this;
        };

        Dialog.prototype.remove = function () {
            var ref, ref1, ref2, ref3;
            if ((ref = this.footerView) != null) {
                ref.remove();
            }
            if ((ref1 = this.headerView) != null) {
                ref1.remove();
            }
            if ((ref2 = this.headerView) != null) {
                ref2.off();
            }
            if ((ref3 = this.bodyView) != null) {
                ref3.off();
            }
            return Dialog.__super__.remove.apply(this, arguments);
        };

        return Dialog;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.NewBooking = (function (superClass) {
        extend(NewBooking, superClass);

        function NewBooking() {
            this._selectedResourceChanged = bind(this._selectedResourceChanged, this);
            return NewBooking.__super__.constructor.apply(this, arguments);
        }

        NewBooking.prototype.template = templates.find('dialogs/new_booking');

        NewBooking.prototype.initialize = function (options) {
            this.currentUserId = options.currentUserId;
            this.dateRange = options.dateRange;
            this.originalDate = this.dateRange.startDate;
            this.projects = options.projects;
            this.deletedProjects = options.deletedProjects;
            this.clients = options.clients;
            this.deletedClients = options.deletedClients;
            this.resources = options.resources;
            this.resource = options.resource;
            this.bookers = options.bookers;
            this.selectingDuration = options.selectDuration;
            this.billableChecked = false;
            this.backpackErrorsFields = [
                {
                    mountpoint: '.booking-details-error',
                    label: 'details'
                }, {
                    mountpoint: '.booking-project-id-error',
                    label: 'project_id'
                }, {
                    mountpoint: '.booking-client-id-error',
                    label: 'client_id'
                }
            ];
            if (typeof this.selectingDuration === "undefined") {
                return this.setSelectingDuration(true);
            }
        };

        NewBooking.prototype.clearInteraction = function () {
            return this.undelegateEvents();
        };

        NewBooking.prototype.render = function () {
            this._clearOldViews();
            this.$el.html(this.template());
            this._composeViews();
            this._setDurationTypeVisibility();
            this.validate();
            this.$(".chzn-select").chosen().on('liszt:showing_dropdown', (function (_this) {
                return function (e) {
                    return _this.shrinkDropdown(e);
                };
            })(this));
            this.$("#booking-start-date, #booking-end-date").datepicker({
                dateFormat: 'd M yy',
                firstDay: 1
            });
            this._bindEvents();
            return this;
        };

        NewBooking.prototype.cancel = function () {
            return this.trigger("close");
        };

        NewBooking.prototype.close = function () {
            return this._clearOldViews();
        };

        NewBooking.prototype.clearClientOrProject = function () {
            return this.clientProjectSelector.setSelectedValue(null);
        };

        NewBooking.prototype.getBookingDurationDTO = function () {
            var selector;
            selector = this.selectingDuration ? this.durationSelector : this.timeRangeSelector;
            return selector.getBookingDurationDTO();
        };

        NewBooking.prototype.saveBooking = function () {
            var selectedResource;
            if (this.$("#add-booking").attr("disabled") === "disabled") {
                return;
            }
            selectedResource = this.resourceSelector.getSelectedResource();
            this._saveBookingToApi(selectedResource, this.bookerSelector.getBooker(), this.dateRangeSelector.getDateRange(), this.clientProjectSelector.getSelectedOption(true), this.billableChecked, this.$("#booking-details").val(), this.getBookingDurationDTO());
            return false;
        };

        NewBooking.prototype._saveBookingToApi = function (resource, booker, dateRange, targetClientOrProject, billable, details, bookingDuration) {
            var command, overlay;
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-booking-downtime-new')[0]);
            command = new RG.Commands.CreateBookingCommand({
                resource: resource,
                booker: booker,
                dateRange: dateRange,
                target: targetClientOrProject,
                billable: billable,
                details: details,
                bookingDuration: bookingDuration,
                errorCallback: (function (_this) {
                    return function (e, xhr) {
                        overlay.close();
                        _this.$('.booking-save-error').show();
                        return Raven.captureException(e, {
                            extra: {
                                resource_id: resource.id,
                                booker_id: booker.id,
                                start_date: RG.Utils.DateFormatter.getISODate(dateRange.startDate),
                                end_date: RG.Utils.DateFormatter.getISODate(dateRange.endDate),
                                billable: billable,
                                duration: bookingDuration.duration,
                                start_time: bookingDuration.startTime,
                                target: targetClientOrProject && targetClientOrProject.constructor.name + ": " + targetClientOrProject.id,
                                xhr: {
                                    responseText: xhr.responseText,
                                    responseStatus: xhr.status
                                }
                            }
                        });
                    };
                })(this),
                successCallback: (function (_this) {
                    return function (data) {
                        RG.renderer.unlockAll();
                        RG.backburner.run(function () {
                            RG.Utils.BookingMerger.merge(resource.bookings, [data]);
                            overlay.close();
                            _this.trigger('close');
                            return resource.bookings.predictWaitingList();
                        });
                        return window.update();
                    };
                })(this)
            });
            command.removedDatesCallback = (function (_this) {
                return function (removedDates, bookingId) {
                    var placer, popover, ref, removedDatesDialog;
                    removedDatesDialog = new RG.Views.Dialogs.RemovedAvailabilityDates({
                        resource: resource,
                        removedAvailabilityDates: removedDates
                    });
                    placer = new RG.Utils.DatePopoverPlacer(resource, _this.originalDate, {
                        offsetTop: ((ref = $(".booking[data-booking-id=" + bookingId + "]").offset()) != null ? ref.top : void 0) + 40
                    });
                    popover = new RG.Views.Dialogs.BookingClashPopover({
                        removeAttachTo: true,
                        attachTo: placer.createAnchor({
                            className: 'booking-clash-popover-anchor'
                        }),
                        body: removedDatesDialog,
                        className: 'edit-booking-dropdown'
                    });
                    return RG.Popovers.replace({
                        popoverView: popover,
                        removeCallback: function () { }
                    });
                };
            })(this);
            command.waitingCallback = (function (_this) {
                return function (waitingDates) {
                    _this.waitingConfirmation = new RG.Views.Dialogs.WaitingListConfirmation({
                        resource: resource,
                        waitingDates: waitingDates,
                        duration: command.bookingDuration.duration,
                        startTime: command.bookingDuration.startTime,
                        startDate: command.dateRange.startDate,
                        endDate: command.dateRange.endDate,
                        origin: _this,
                        callback: function () {
                            RG.Utils.BookingDataParser.expirePolls();
                            command.forceWaiting = true;
                            return command.execute();
                        }
                    });
                    overlay.close();
                    _this.waitingConfirmation.on('addWaiting', (function () {
                        return _this.trigger('close');
                    }), _this);
                    return _this.trigger("changeOverlay", _this.waitingConfirmation, {
                        className: 'overlay booking-waiting'
                    });
                };
            })(this);
            RG.Utils.BookingDataParser.expirePolls();
            command.execute();
            false;
            return command.archivedCallback = (function (_this) {
                return function (data) {
                    new RG.Utils.ErrorHandler(_this.el, _this.backpackErrorsFields, data).handleErrors();
                    return overlay.close();
                };
            })(this);
        };

        NewBooking.prototype.toggleDurationTypes = function () {
            this.selectingDuration = !this.selectingDuration;
            this._setDurationTypeVisibility();
            return this.validate();
        };

        NewBooking.prototype.setSelectingDuration = function (val) {
            this.selectingDuration = val;
            return this._setDurationTypeVisibility();
        };

        NewBooking.prototype.validate = function () {
            var currentSelector, valid;
            currentSelector = this.selectingDuration ? this.durationSelector : this.timeRangeSelector;
            valid = currentSelector.validate() && this.dateRangeSelector.validate();
            if (valid) {
                this.$("#add-booking").attr("disabled", null);
            } else {
                this.$("#add-booking").attr("disabled", "disabled");
            }
            this.trigger('updatePosition');
            return valid;
        };

        NewBooking.prototype._setDurationTypeVisibility = function () {
            if (!this.resource.isHuman()) {
                this.selectingDuration = false;
                this.$(".booking-time .alt-toggle").hide();
            }
            this.$(".hours-per-day").toggle(this.selectingDuration);
            this.$(".specific-time").toggle(!this.selectingDuration);
            if (this.selectingDuration) {
                return this.$(".booking-time-field").text("Hours per day");
            } else {
                return this.$(".booking-time-field").text("Time per day");
            }
        };

        NewBooking.prototype._stopPropagation = function (e) {
            e.stopPropagation();
            return false;
        };

        NewBooking.prototype._composeViews = function () {
            var ref, ref1, ref2;
            this.resourceSelector = new RG.Views.Selectors.Resource({
                resources: this.resources,
                selected: this.resource
            });
            this.$("dd.resource-instance-value").html(this.resourceSelector.render().el);
            this.resourceSelector.on('change', this._selectedResourceChanged);
            this.dateRangeSelector = new RG.Views.Selectors.DateRange({
                dateRange: this.dateRange,
                resource: this.resource
            });
            this.$("dd.booking-date").html(this.dateRangeSelector.render().el);
            this.durationSelector = new RG.Views.Selectors.Duration({
                duration: ((ref = this._dto) != null ? ref.duration : void 0) || window.rgStorage.get("Duration:" + (this.resource.typeName())),
                typeName: this.resource.typeName()
            });
            this.$("dd.booking-time").html(this.durationSelector.render().el);
            this.timeRangeSelector = new RG.Views.Selectors.TimeRange({
                startTime: ((ref1 = this._dto) != null ? ref1.startTime : void 0) || window.rgStorage.get("TimeRange:StartTime:" + (this.resource.typeName())),
                endTime: ((ref2 = this._dto) != null ? ref2.endTime : void 0) || window.rgStorage.get("TimeRange:EndTime:" + (this.resource.typeName())),
                typeName: this.resource.typeName()
            });
            this.$("dd.booking-time").append(this.timeRangeSelector.render().el);
            if (this.resource.shouldDisplayTimeZone()) {
                this.$("dd.booking-time").append($('<div class="timezone"></div>').text(this.resource.getTimeZone().toString()));
            }
            this.clientProjectSelector = new RG.Views.Selectors.ClientProject({
                clients: this.clients,
                projects: this.projects,
                selectedValue: this.initialClientOrProject,
                container: this,
                responseWithPermissions: window.responseWithPermissions,
                colorPicker: new RG.Views.Selectors.ColorPicker
            });
            this._sortProjectsAndClientsAlphabetically();
            this.$(".project-client").html(this.clientProjectSelector.render().el);
            this._createSwitchComponent(this.billableChecked);
            this.bookerSelector = new RG.Views.Selectors.Booker({
                currentUserId: this.currentUserId,
                bookers: this.bookers,
                booking: this.booking
            });
            return this.$("dd.booker").html(this.bookerSelector.render().el);
        };

        NewBooking.prototype._bindEvents = function () {
            if (this._eventsBound) {
                return;
            }
            this._eventsBound = true;
            this.$el.on("click", "#add-booking", (function (_this) {
                return function () {
                    return _this.saveBooking();
                };
            })(this));
            this.$el.on("click", "#cancel.btn", (function (_this) {
                return function () {
                    return _this.cancel();
                };
            })(this));
            this.$el.on("click", ".booking-time .alt-toggle a", (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return _this.toggleDurationTypes();
                };
            })(this));
            this.dateRangeSelector.on('change', (function (_this) {
                return function (dateRange) {
                    _this.dateRange = dateRange;
                    return _this.trigger('change', dateRange);
                };
            })(this));
            this.dateRangeSelector.on('validate', this.validate, this);
            this.durationSelector.on('validate', this.validate, this);
            this.timeRangeSelector.on('validate', this.validate, this);
            this.clientProjectSelector.on('changeOverlay', (function (_this) {
                return function (view, options) {
                    return _this.trigger("changeOverlay", view, options);
                };
            })(this));
            this.clientProjectSelector.on('cancelled', (function (_this) {
                return function () {
                    return _this.clearClientOrProject();
                };
            })(this));
            return this.clientProjectSelector.on('change', this._setBillableFromProject.bind(this));
        };

        NewBooking.prototype._clearOldViews = function () {
            var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
            if ((ref = this.waitingConfirmation) != null) {
                ref.remove();
            }
            if ((ref1 = this.resourceSelector) != null) {
                ref1.off();
            }
            if ((ref2 = this.dateRangeSelector) != null) {
                ref2.off();
            }
            if ((ref3 = this.timeRangeSelector) != null) {
                ref3.off();
            }
            if ((ref4 = this.durationSelector) != null) {
                ref4.off();
            }
            if ((ref5 = this.resourceSelector) != null) {
                ref5.remove();
            }
            if ((ref6 = this.dateRangeSelector) != null) {
                ref6.remove();
            }
            if ((ref7 = this.durationSelector) != null) {
                ref7.remove();
            }
            if ((ref8 = this.timeRangeSelector) != null) {
                ref8.remove();
            }
            if ((ref9 = this.clientProjectSelector) != null) {
                ref9.remove();
            }
            if ((ref10 = this.bookerSelector) != null) {
                ref10.remove();
            }
            return this.$('.booking-save-error').hide();
        };

        NewBooking.prototype._sortProjectsAndClientsAlphabetically = function () {
            this.clientProjectSelector.clients.sort();
            return this.clientProjectSelector.projects.sort();
        };

        NewBooking.prototype._selectedResourceChanged = function (resource) {
            var dto, endTime, startTime;
            this.resource = resource;
            if (resource && !resource.isHuman()) {
                dto = this.getBookingDurationDTO();
                startTime = dto.startTime || 540;
                endTime = startTime + dto.duration;
                this._dto = {
                    startTime: startTime,
                    endTime: endTime,
                    duration: dto.duration
                };
            }
            this.render();
            return delete this._dto;
        };

        NewBooking.prototype._createSwitchComponent = function (isChecked) {
            var selected;
            selected = isChecked ? 'Billable' : 'Non-billable';
            return window.RGComponents.createSwitch(this.$(".booking-billable-control")[0], {
                name: 'booking-billable',
                id: 'booking-billable',
                mode: 'a-b',
                labelLeft: 'Billable',
                labelRight: 'Non-billable',
                left: 'Billable',
                right: 'Non-billable',
                selected: isChecked ? 'Billable' : 'Non-billable',
                onChange: (function (_this) {
                    return function (checked) {
                        return _this.billableChecked = checked === 'Billable' ? true : false;
                    };
                })(this)
            });
        };

        NewBooking.prototype._setBillableFromProject = function (option) {
            if (!option || option.constructor !== RG.Models.Project) {
                this.billableChecked = false;
            }
            if (option) {
                if (option.constructor === RG.Models.Client) {
                    this.billableChecked = true;
                } else {
                    this.billableChecked = option.isBillableByDefault();
                }
            }
            return this._createSwitchComponent(this.billableChecked);
        };

        return NewBooking;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.AddTimeBlockPopover = (function (superClass) {
        extend(AddTimeBlockPopover, superClass);

        function AddTimeBlockPopover() {
            return AddTimeBlockPopover.__super__.constructor.apply(this, arguments);
        }

        AddTimeBlockPopover.prototype.cssClass = 'add-timeblock-dropdown';

        AddTimeBlockPopover.prototype.events = {
            "click .js-cancel-button": "close",
            "click": "closeSelector"
        };

        AddTimeBlockPopover.prototype.initialize = function (options) {
            this.newTimeBlockStartTime = options.newTimeBlockStartTime;
            return AddTimeBlockPopover.__super__.initialize.apply(this, arguments);
        };

        AddTimeBlockPopover.prototype.close = function () {
            return this.trigger("close");
        };

        AddTimeBlockPopover.prototype.remove = function () {
            this.attachTo = null;
            return AddTimeBlockPopover.__super__.remove.apply(this, arguments);
        };

        AddTimeBlockPopover.prototype.setBodyView = function () {
            AddTimeBlockPopover.__super__.setBodyView.apply(this, arguments);
            return this.bodyView.on("add", (function (_this) {
                return function (ap) {
                    return _this.trigger("add", ap);
                };
            })(this));
        };

        AddTimeBlockPopover.prototype.closeSelector = function (e) {
            this.bodyView.closeSelector();
            if (e) {
                return e.stopPropagation();
            }
        };

        AddTimeBlockPopover.prototype.popup = function () {
            $(".js-text--edit-overtime").on("click", (function (_this) {
                return function () {
                    return _this.remove();
                };
            })(this));
            this.setBodyView(new RG.Views.CustomAvailability.AddTimeBlock({
                newTimeBlockStartTime: this.newTimeBlockStartTime
            }));
            return AddTimeBlockPopover.__super__.popup.apply(this, arguments);
        };

        return AddTimeBlockPopover;

    })(RG.Views.Dialogs.Popover);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.AllowanceBreakdown = (function (superClass) {
        extend(AllowanceBreakdown, superClass);

        function AllowanceBreakdown() {
            return AllowanceBreakdown.__super__.constructor.apply(this, arguments);
        }

        AllowanceBreakdown.prototype.template = templates.find('dialogs/allowance_breakdown');

        AllowanceBreakdown.prototype.tagName = 'span';

        AllowanceBreakdown.prototype.initialize = function (options) {
            return this.model = options.model;
        };

        AllowanceBreakdown.prototype.render = function () {
            this.$el.html(this.template({
                model: this.model
            }));
            this._fillValues();
            return this;
        };

        AllowanceBreakdown.prototype._fillValues = function () {
            this._renderResourceContext();
            this._renderNumberOfDays();
            this._renderNonWorkingDays();
            return this._renderHolidays();
        };

        AllowanceBreakdown.prototype._renderResourceContext = function () {
            var element;
            if (this.model.get('resourceName')) {
                element = $(document.createElement('span')).addClass('downtime-multiple-resource-explanation').text(" (based on " + (this.model.get('resourceName')) + "'s availability)");
                return this.$('.automated-calculation-heading').append(element);
            }
        };

        AllowanceBreakdown.prototype._renderNumberOfDays = function () {
            return this.$el.append($(document.createElement('p')).text("Days in timeframe: " + this.model.get('numberOfDaysBreakdown').length));
        };

        AllowanceBreakdown.prototype._renderHolidays = function () {
            var days, holiday, holidays, results;
            holidays = this.model.getHolidays();
            if (holidays.length !== 0) {
                results = [];
                for (holiday in holidays) {
                    days = holidays[holiday];
                    results.push(this.$el.append($(document.createElement('p')).text("less " + days + " " + holiday + " " + (this._pluralize(days)) + ".")));
                }
                return results;
            }
        };

        AllowanceBreakdown.prototype._renderNonWorkingDays = function () {
            var nonWorkingDays;
            nonWorkingDays = this.model.numberOfNonWorkingDays();
            if (nonWorkingDays.length !== 0) {
                return this.$el.append($(document.createElement('p')).text("less " + nonWorkingDays + " non working-" + (this._pluralize(nonWorkingDays)) + "."));
            }
        };

        AllowanceBreakdown.prototype._pluralize = function (amount) {
            if (amount > 1) {
                return "days";
            } else {
                return "day";
            }
        };

        return AllowanceBreakdown;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.BookingClashPopover = (function (superClass) {
        extend(BookingClashPopover, superClass);

        function BookingClashPopover() {
            return BookingClashPopover.__super__.constructor.apply(this, arguments);
        }

        BookingClashPopover.prototype.popup = function () {
            var result;
            result = BookingClashPopover.__super__.popup.apply(this, arguments);
            RG.Popovers.locked = true;
            setTimeout(((function (_this) {
                return function () {
                    return _this._scrollIntoHorizontalView();
                };
            })(this)), 100);
            setTimeout(((function (_this) {
                return function () {
                    return _this._scrollIntoVerticalView();
                };
            })(this)), 120);
            return result;
        };

        return BookingClashPopover;

    })(RG.Views.Dialogs.Popover);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.BookingDetailsBody = (function (superClass) {
        extend(BookingDetailsBody, superClass);

        function BookingDetailsBody() {
            return BookingDetailsBody.__super__.constructor.apply(this, arguments);
        }

        BookingDetailsBody.prototype.template = templates.find('dialogs/booking_details_body');

        BookingDetailsBody.prototype.tagName = 'main';

        BookingDetailsBody.prototype.initialize = function (options) {
            this.booking = options.booking;
            return this.actions = options.actions;
        };

        BookingDetailsBody.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        BookingDetailsBody.prototype.remove = function () {
            var ref;
            if ((ref = this.actions) != null) {
                ref.remove();
            }
            return BookingDetailsBody.__super__.remove.apply(this, arguments);
        };

        BookingDetailsBody.prototype.off = function () {
            var ref;
            if ((ref = this.actions) != null) {
                ref.off();
            }
            return BookingDetailsBody.__super__.off.apply(this, arguments);
        };

        BookingDetailsBody.prototype._fillValues = function () {
            var billableText, ref, ref1;
            this._renderActions();
            this._renderResources();
            this._renderBookingTargets();
            this.$(".js-booker-img").attr("src", (ref = this.booking.get('booker')) != null ? ref.get('imageUrl') : void 0);
            this.$(".js-booker-name").text((ref1 = this.booking.get('booker')) != null ? ref1.get('name') : void 0);
            this.$("#confirmed-hours").text((RG.Utils.TimeFormatter.formatMinutes(this.booking.getConfirmedMinutes())) + " confirmed");
            this.$("#billable").text(this._billableText());
            if (this.booking.get('notes') && this.booking.get('notes').length > 0) {
                this.$("#details-field").show();
                this.$("#details").show();
                this.$("#details").html(window.segmentAutolinker(this.booking.get('notes')));
            } else {
                this.$("#details-field").hide();
                this.$("#details").hide();
            }
            if (this.booking.getWaitingMinutes() > 0) {
                this.$("#waiting-list-hours").text("+ " + (RG.Utils.TimeFormatter.formatMinutes(this.booking.getWaitingMinutes())) + " on waiting list");
                this.$("#waiting-list-hours").show();
            } else {
                this.$("#waiting-list-hours").text("");
                this.$("#waiting-list-hours").hide();
            }
            if (this.booking.get('refreshable')) {
                this.$(".availability-changed").show();
            }
            billableText = this.booking.get('billable') ? "Yes" : "No";
            return this.el.querySelector("#billable").textContent = billableText;
        };

        BookingDetailsBody.prototype._renderActions = function () {
            var ref, ref1;
            this.$(".js-actions-container").append((ref = this.actions) != null ? ref.render().el : void 0);
            return (ref1 = this.actions) != null ? ref1.on("all", (function (_this) {
                return function () {
                    return _this.trigger.apply(_this, arguments);
                };
            })(this)) : void 0;
        };

        BookingDetailsBody.prototype._renderResources = function () {
            var resourceAvatar, resourceNameElement;
            if (this.booking.collection.resource.hasAvatar()) {
                resourceAvatar = new RG.Views.Resource.Avatar({
                    resource: this.booking.collection.resource
                });
                this.$("#booking-resources").append(resourceAvatar.render().el);
            }
            resourceNameElement = $(document.createElement("span")).addClass("resource-name");
            return this.$("#booking-resources").append(resourceNameElement.text(this.booking.collection.resource.get('name')));
        };

        BookingDetailsBody.prototype._toggleBookingTargets = function (labelSelector, nameSelector, title) {
            if (title) {
                this.$(labelSelector).show();
                return this.$(nameSelector).html(title).show();
            } else {
                this.$(labelSelector).hide();
                return this.$(nameSelector).text("").hide();
            }
        };

        BookingDetailsBody.prototype._renderBookingTargets = function () {
            var clientName, projectName;
            projectName = this.booking.getProjectNameWithProjectCode();
            clientName = this.booking.getClientName();
            this._toggleBookingTargets('#project-label', "#project-name", projectName);
            return this._toggleBookingTargets('#client-label', "#client-name", clientName);
        };

        BookingDetailsBody.prototype._billableText = function () {
            if (this.booking.get('billable')) {
                return "Yes";
            } else {
                return "No";
            }
        };

        return BookingDetailsBody;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    RG.Views.Dialogs.BookingDetailsFactory = (function () {
        function BookingDetailsFactory(options) {
            this.bookingFormFactory = options.bookingFormFactory;
        }

        BookingDetailsFactory.prototype.create = function (options) {
            var actions, body, bodyView, footer, header;
            header = new RG.Views.Dialogs.BookingDetailsHeader({
                booking: options.booking
            });
            if (RG.Utils.Permissions.canManage(options.booking)) {
                if (options.booking.isSeries() && options.duration) {
                    actions = new RG.Views.Dialogs.BookingSeriesDetailsActions({
                        duration: options.duration,
                        booking: options.booking,
                        bookingFormFactory: this.bookingFormFactory
                    });
                } else {
                    actions = new RG.Views.Dialogs.SingleBookingDetailsActions({
                        duration: options.duration,
                        booking: options.booking,
                        bookingFormFactory: this.bookingFormFactory
                    });
                }
            }
            body = new RG.Views.Dialogs.BookingDetailsBody({
                booking: options.booking
            });
            footer = new RG.Views.Dialogs.TagWrapper({
                view: actions,
                tagName: 'footer'
            });
            bodyView = new RG.Views.Dialogs.Dialog({
                header: header,
                body: body,
                footer: footer,
                className: 'booking-details-dialog'
            });
            return new RG.Views.Dialogs.Popover({
                removeAttachTo: options.removeAttachTo,
                attachTo: options.attachTo,
                body: bodyView,
                className: 'edit-booking-dropdown js-edit-booking-popover'
            });
        };

        return BookingDetailsFactory;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.BookingDetailsHeader = (function (superClass) {
        extend(BookingDetailsHeader, superClass);

        function BookingDetailsHeader() {
            return BookingDetailsHeader.__super__.constructor.apply(this, arguments);
        }

        BookingDetailsHeader.prototype.template = templates.find('dialogs/booking_details_header');

        BookingDetailsHeader.prototype.tagName = 'header';

        BookingDetailsHeader.prototype.initialize = function (options) {
            return this.booking = options.booking;
        };

        BookingDetailsHeader.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        BookingDetailsHeader.prototype._fillValues = function () {
            var ref, ref1;
            this.$("#booking-duration").text(this.booking.getDurationCaption() + " ");
            if (this.booking.isSeries()) {
                this.$("#booking-duration").append($("<span></span>").text(this.booking.getDurationLongRepeatCaption()));
            }
            this.$("#booking-date").text(this.booking.getSavedDateRange().toString() + " ");
            if (((ref = this.booking) != null ? (ref1 = ref.collection) != null ? ref1.resource : void 0 : void 0) && this.booking.collection.resource.getTimeZone().get('name') !== window.currentUserTimeZone) {
                return this.$("#booking-date").append($("<span></span>").text(this.booking.collection.resource.getTimeZone()));
            }
        };

        return BookingDetailsHeader;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    RG.Views.Dialogs.BookingPopoverFactory = (function () {
        function BookingPopoverFactory(options) {
            this.booking = options.booking;
            this.duration = options.duration;
            this.bookingAnchor = options.bookingAnchor;
            this.popoverType = options.popoverType;
            if (typeof options.removeAttachTo === 'undefined') {
                this.removeAttachTo = true;
            }
            this.bookingFormFactory = options.bookingFormFactory;
        }

        BookingPopoverFactory.prototype.popover = function () {
            var popover, view;
            if (this.popoverType === 'details') {
                return this._getDetailsDialogFactory().create({
                    removeAttachTo: this.removeAttachTo,
                    booking: this.booking,
                    attachTo: this.bookingAnchor,
                    duration: this.duration,
                    editSeries: function () {
                        return this.bookingFormFactory.createEdit({
                            booking: this.booking
                        });
                    }
                });
            } else if (this.popoverType === 'edit') {
                view = this.bookingFormFactory.createEdit({
                    booking: this.booking
                });
                return popover = new RG.Views.Dialogs.Popover({
                    attachTo: this.bookingAnchor,
                    body: view,
                    removeAttachTo: this.removeAttachTo,
                    className: 'edit-booking-dropdown'
                });
            }
        };

        BookingPopoverFactory.prototype._getDetailsDialogFactory = function () {
            return new RG.Views.Dialogs.BookingDetailsFactory({
                bookingFormFactory: this.bookingFormFactory
            });
        };

        return BookingPopoverFactory;

    })();

}).call(this);
;
(function () {
    RG.Views.Dialogs.BookingFormFactory = (function () {
        function BookingFormFactory(options) {
            this.currentUserId = options.currentUserId;
            this.resources = options.resources;
            this.projects = options.projects;
            this.deletedProjects = options.deletedProjects;
            this.clients = options.clients;
            this.deletedClients = options.deletedClients;
            this.bookers = options.bookers;
            this.downtimeTypes = options.downtimeTypes;
            this.deletedBookers = options.deletedBookers;
            this.timeZones = options.timeZones;
            this.currentUserTimeZone = options.currentUserTimeZone;
        }

        BookingFormFactory.prototype.create = function (options) {
            return new RG.Views.Dialogs.NewBookingDowntimePopover({
                currentUserId: this.currentUserId,
                resources: this.resources,
                projects: this.projects,
                deletedProjects: this.deletedProjects,
                clients: this.clients,
                deletedClients: this.deletedClients,
                bookers: this.bookers,
                downtimeTypes: this.downtimeTypes,
                deletedBookers: this.deletedBookers,
                dateRange: options.dateRange,
                resource: options.resource,
                attachTo: options.attachTo,
                removeCallback: options.removeCallback,
                changeCallback: options.changeCallback,
                timeZones: this.timeZones,
                currentUserTimeZone: this.currentUserTimeZone
            });
        };

        BookingFormFactory.prototype.createEdit = function (options) {
            return new RG.Views.Dialogs.EditBooking({
                currentUserId: this.currentUserId,
                resources: this.resources,
                projects: this.projects,
                deletedProjects: this.deletedProjects,
                clients: this.clients,
                deletedClients: this.deletedClients,
                bookers: this.bookers,
                deletedBookers: this.deletedBookers,
                booking: options.booking,
                callback: options.callback
            });
        };

        return BookingFormFactory;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.BookingSeriesDetailsActions = (function (superClass) {
        extend(BookingSeriesDetailsActions, superClass);

        function BookingSeriesDetailsActions() {
            return BookingSeriesDetailsActions.__super__.constructor.apply(this, arguments);
        }

        BookingSeriesDetailsActions.prototype.tagName = 'ul';

        BookingSeriesDetailsActions.prototype.className = 'booking-actions';

        BookingSeriesDetailsActions.prototype.template = templates.find('dialogs/booking_series_details_actions');

        BookingSeriesDetailsActions.prototype.initialize = function (options) {
            this.duration = options.duration;
            this.booking = options.booking;
            return this.bookingFormFactory = options.bookingFormFactory;
        };

        BookingSeriesDetailsActions.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this.$('.dropdown-toggle').dropdown();
            this.$('.dropdown-toggle').on('click', (function (_this) {
                return function () {
                    return _this.$('.downtime-btn-group').toggleClass('dropup', _this._menuOpensUpwards());
                };
            })(this));
            this._bindEvents();
            return this;
        };

        BookingSeriesDetailsActions.prototype._bindEvents = function () {
            this.$el.on("click", "#delete-single-booking", (function (_this) {
                return function () {
                    return _this.deleteDuration();
                };
            })(this));
            this.$el.on("click", "#delete-series", (function (_this) {
                return function () {
                    return _this.deleteBooking();
                };
            })(this));
            this.$el.on("click", "#edit-series", (function (_this) {
                return function () {
                    return _this.editBooking();
                };
            })(this));
            this.$el.on("click", "#edit-single-booking", (function (_this) {
                return function () {
                    return _this.editDuration();
                };
            })(this));
            return this.$el.on("click", "#split-series", (function (_this) {
                return function () {
                    return _this.splitBooking();
                };
            })(this));
        };

        BookingSeriesDetailsActions.prototype.deleteDuration = function () {
            var collection, response;
            if (!this.onEdgeDay()) {
                response = confirm("This will break this booking series into two blocks.");
                if (!response) {
                    return false;
                }
            }
            RG.Popovers.clear();
            collection = this.booking.collection;
            RG.Utils.BookingService.deleteSingleDate(this.booking, this.duration.get('date'), (function (_this) {
                return function () {
                    _this.remove();
                    return collection.predictWaitingList();
                };
            })(this));
            return true;
        };

        BookingSeriesDetailsActions.prototype.onEdgeDay = function () {
            var durations;
            durations = this.booking.durations.models;
            return this.duration === durations[0] || this.duration === durations[durations.length - 1];
        };

        BookingSeriesDetailsActions.prototype.deleteBooking = function () {
            RG.Popovers.clear();
            RG.Utils.BookingService.deleteBooking(this.booking, (function (_this) {
                return function () {
                    return _this.remove();
                };
            })(this));
            return true;
        };

        BookingSeriesDetailsActions.prototype.editBooking = function () {
            var view;
            view = this.bookingFormFactory.createEdit({
                booking: this.booking
            });
            this.trigger("changeView", view);
            return true;
        };

        BookingSeriesDetailsActions.prototype.editDuration = function () {
            var booking, response;
            booking = this.booking.cloneWithDurations(this.duration);
            response = confirm("This will break this booking series into multiple blocks.");
            if (!response) {
                return;
            }
            this.trigger('hide');
            RG.Utils.BookingService.isolate(booking.realBooking, booking.get('startDate'), (function (_this) {
                return function (isolatedBooking) {
                    var view;
                    view = _this.bookingFormFactory.createEdit({
                        booking: isolatedBooking
                    });
                    _this.trigger('show');
                    return _this.trigger("changeView", view);
                };
            })(this));
            return true;
        };

        BookingSeriesDetailsActions.prototype.splitBooking = function () {
            var view;
            if (!this._canSplit()) {
                return false;
            }
            view = new RG.Views.Dialogs.SplitBooking({
                booking: this.booking,
                splitDate: this.duration.get('date')
            });
            this.trigger('changeView', view, {
                className: 'split-booking-popover',
                render: true
            });
            return false;
        };

        BookingSeriesDetailsActions.prototype._fillValues = function () {
            var date, title;
            date = this.duration.get('date');
            this.$("#edit-single-booking").text("Edit " + (RG.Utils.DateFormatter.getShortDate(date)) + " only");
            this.$("#delete-single-booking").text("Delete " + (RG.Utils.DateFormatter.getShortDate(date)) + " only");
            if (!this._canSplit()) {
                title = "You can't split a booking on the start date. Please select another date.";
                return this.$("#split-series").attr({
                    disabled: 'disabled',
                    title: title
                }).addClass('is-disabled');
            }
        };

        BookingSeriesDetailsActions.prototype._menuOpensUpwards = function () {
            return this.$el.offset().top - $(window).height() - $(window).scrollTop() > -130;
        };

        BookingSeriesDetailsActions.prototype._canSplit = function () {
            return !(this.duration.get('date') === this.booking.getDateRange().startDate);
        };

        return BookingSeriesDetailsActions;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.CopyAvailabilityPopover = (function (superClass) {
        extend(CopyAvailabilityPopover, superClass);

        function CopyAvailabilityPopover() {
            return CopyAvailabilityPopover.__super__.constructor.apply(this, arguments);
        }

        CopyAvailabilityPopover.prototype.cssClass = "js-copy-availability-dropdown";

        CopyAvailabilityPopover.prototype.className = "copy-availability-dropdown-container";

        CopyAvailabilityPopover.prototype.initialize = function (options) {
            this.dailyAggregation = options.dailyAggregation;
            this.currentDay = options.currentDay;
            this.$el.on('click', '.js-cancel', (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.$el.closest(".dropdown").removeClass("open");
                    return _this.remove();
                };
            })(this));
            return this.$el.on('click', '.js-copy', (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.bodyView.copyAvailability();
                    _this.$el.closest(".dropdown").removeClass("open");
                    return _this.remove();
                };
            })(this));
        };

        CopyAvailabilityPopover.prototype.render = function () {
            CopyAvailabilityPopover.__super__.render.apply(this, arguments);
            this.$el.find('button.close').remove();
            this.$(".shadow-arrow").remove();
            this.$el.prepend($(document.createElement('span')).addClass('shadow-arrow'));
            this.$el.find('.f-dropdown').removeClass('f-dropdown');
            return this;
        };

        CopyAvailabilityPopover.prototype.setPosition = function () {
            this.$(".shadow-arrow").css({
                top: ""
            });
            this.$el.css({
                top: "",
                left: ""
            });
            this.$(".f-dropdown").removeClass("cdrop-left").removeClass("cdrop-right");
            this.$(".f-dropdown .dropdown-content").css({
                "max-height": $(window).height()
            });
            this.$(".f-dropdown .dropdown-content main").css({
                "max-height": $(window).height() - this.$(".f-dropdown .dropdown-content header, .f-dropdown .dropdown-content .tabs").height() - 70
            });
            this._setOpenDirection();
            this.width = this.dailyAggregation.length * 47;
            this.width = _.max([this.width, 200]);
            this.$(".shadow-arrow").css({
                top: 26,
                left: this.width - 13
            });
            this.$el.css({
                position: 'absolute',
                top: 22,
                width: this.width
            });
        };

        CopyAvailabilityPopover.prototype._setOpenDirection = function () {
            this._setOpenRight();
        };

        CopyAvailabilityPopover.prototype._setOpenRight = function () {
            this.$(".f-dropdown").addClass("cdrop-right");
            this.$el.css({
                left: this.width * 2
            });
        };

        CopyAvailabilityPopover.prototype.popup = function () {
            this.setBodyView(new RG.Views.CustomAvailability.CopyAvailability({
                dailyAggregation: this.dailyAggregation,
                currentDay: this.currentDay
            }));
            this.bodyView.$el.width(this.width);
            return CopyAvailabilityPopover.__super__.popup.apply(this, arguments);
        };

        return CopyAvailabilityPopover;

    })(RG.Views.Dialogs.Popover);

    RG.Views.CustomAvailability.CopyAvailability = (function (superClass) {
        extend(CopyAvailability, superClass);

        function CopyAvailability() {
            return CopyAvailability.__super__.constructor.apply(this, arguments);
        }

        CopyAvailability.prototype.template = templates.find('availability/copy_availability');

        CopyAvailability.prototype.className = 'copy-availability';

        CopyAvailability.prototype.initialize = function (options) {
            this.dailyAggregation = options.dailyAggregation;
            return this.currentDay = options.currentDay;
        };

        CopyAvailability.prototype.remove = function () {
            this._cleanup();
            return CopyAvailability.__super__.remove.apply(this, arguments);
        };

        CopyAvailability.prototype._cleanup = function () {
            var ref;
            return (ref = this.dayssSelector) != null ? ref.remove() : void 0;
        };

        CopyAvailability.prototype.render = function () {
            var days;
            this._cleanup();
            this.$el.html(this.template());
            days = this.dailyAggregation.map(function (a) {
                return a.get('weekDay');
            });
            days = _.reject(days, (function (_this) {
                return function (d) {
                    return d === _this.currentDay.get('weekDay');
                };
            })(this));
            this.daysSelector = new RG.Views.CustomAvailability.DaysSelector({
                days: days,
                selectedDays: [1, 2, 3, 4, 5]
            });
            this.daysSelector.on("change", (function (_this) {
                return function () {
                    return _this.validate();
                };
            })(this));
            this.$(".js-day-selection").replaceWith(this.daysSelector.render().el);
            return this;
        };

        CopyAvailability.prototype.validate = function () {
            return this.$(".js-copy").attr('disabled', this.daysSelector.getSelectedDays().length === 0 ? 'disabled' : null);
        };

        CopyAvailability.prototype.copyAvailability = function () {
            var day, days, i, len, models, selection;
            selection = this.daysSelector.getSelectedDays();
            days = this.dailyAggregation.select(function (d) {
                return selection.indexOf(d.get('weekDay')) !== -1;
            });
            models = this.currentDay.getFirstAvailablePeriods().models;
            for (i = 0, len = days.length; i < len; i++) {
                day = days[i];
                day.clearVaryingAvailability();
                day.getFirstAvailablePeriods().reset(models);
            }
        };

        return CopyAvailability;

    })(RG.Views.BaseView);

    RG.Views.CustomAvailability.DaysSelector = (function (superClass) {
        extend(DaysSelector, superClass);

        function DaysSelector() {
            return DaysSelector.__super__.constructor.apply(this, arguments);
        }

        DaysSelector.prototype.tagName = 'ul';

        DaysSelector.prototype.initialize = function (options) {
            this.days = options.days;
            return this.selectedDays = options.selectedDays;
        };

        DaysSelector.prototype.remove = function () {
            this.off();
            this.$el.off();
            this._cleanup();
            return DaysSelector.__super__.remove.apply(this, arguments);
        };

        DaysSelector.prototype._cleanup = function () {
            var i, len, ref, results, view;
            if (this.selectors && this.selectors.length) {
                ref = this.selectors;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                    view = ref[i];
                    results.push(view.remove());
                }
                return results;
            }
        };

        DaysSelector.prototype.render = function () {
            var day, dayName, i, len, ref;
            this._cleanup();
            this.selectors = [];
            ref = this.days;
            for (i = 0, len = ref.length; i < len; i++) {
                day = ref[i];
                dayName = new RG.Utils.DayName(day);
                day = new RG.Views.CustomAvailability.DaySelector({
                    dayName: dayName,
                    isSelected: this.selectedDays.indexOf(day) !== -1
                });
                day.on("change", (function (_this) {
                    return function () {
                        return _this.trigger("change");
                    };
                })(this));
                this.$el.append(day.render().el);
                this.selectors.push(day);
            }
            return this;
        };

        DaysSelector.prototype.getSelectedDays = function () {
            return _.chain(this.selectors).select(function (s) {
                return s.isChecked();
            }).map(function (s) {
                return s.dayName.dayNumber;
            }).value();
        };

        return DaysSelector;

    })(RG.Views.BaseView);

    RG.Views.CustomAvailability.DaySelector = (function (superClass) {
        extend(DaySelector, superClass);

        function DaySelector() {
            return DaySelector.__super__.constructor.apply(this, arguments);
        }

        DaySelector.prototype.tagName = 'li';

        DaySelector.prototype.events = {
            "click input": "_stopPropagation",
            "click": "toggle"
        };

        DaySelector.prototype.initialize = function (options) {
            this.dayName = options.dayName;
            return this.isSelected = options.isSelected;
        };

        DaySelector.prototype.remove = function () {
            this.off();
            this.$el.off();
            return DaySelector.__super__.remove.apply(this, arguments);
        };

        DaySelector.prototype.render = function () {
            this.$el.append('<input type="checkbox">');
            this.$el.append("<span>" + this.dayName + "</span>");
            this.$("input").prop("checked", this.isSelected);
            return this;
        };

        DaySelector.prototype.toggle = function (e) {
            if (e != null) {
                e.stopPropagation();
            }
            this.$("input").prop("checked", !this.isChecked());
            return this.trigger("change");
        };

        DaySelector.prototype._stopPropagation = function (e) {
            e.stopPropagation();
            return this.trigger("change");
        };

        DaySelector.prototype.isChecked = function () {
            return this.$("input").prop("checked");
        };

        return DaySelector;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.CustomAvailability = (function (superClass) {
        extend(CustomAvailability, superClass);

        function CustomAvailability() {
            return CustomAvailability.__super__.constructor.apply(this, arguments);
        }

        CustomAvailability.prototype.template = templates.find('dialogs/custom_availability');

        CustomAvailability.prototype.className = 'js-custom-availability';

        CustomAvailability.prototype.initialize = function (options) {
            this.resource = options.resource;
            this.dateRange = options.dateRange;
            this.line = options.line;
            return this.dailyAggregation = options.dailyAggregation;
        };

        CustomAvailability.prototype.render = function () {
            this.$el.html(this.template({
                dateRange: this.dateRange,
                resource: this.resource
            }));
            if (!this.resource.shouldDisplayTimeZone()) {
                this.$('.js-timezone').hide();
            }
            this._renderDays();
            this._renderAvatar();
            return this;
        };

        CustomAvailability.prototype.remove = function () {
            if (this.days) {
                this.days.remove();
            }
            return CustomAvailability.__super__.remove.apply(this, arguments);
        };

        CustomAvailability.prototype.getSelectedDay = function () {
            return this._selectedDay;
        };

        CustomAvailability.prototype._renderAvatar = function () {
            var avatar;
            if (this.resource.hasAvatar()) {
                avatar = new RG.Views.Resource.Avatar({
                    resource: this.resource
                });
                return this.$(".js-resource-avatar").replaceWith(avatar.render().el);
            }
        };

        CustomAvailability.prototype._renderDays = function () {
            this.days = new RG.Views.CustomAvailability.DayRange({
                collection: this.dailyAggregation,
                resource: this.resource
            });
            this.days.on("edit", (function (_this) {
                return function () {
                    return _this.trigger("edit");
                };
            })(this));
            this.days.on("change", (function (_this) {
                return function (model) {
                    return _this._selectedDay = model;
                };
            })(this));
            return this.$el.find('.availability-tabs').replaceWith(this.days.render().el);
        };

        return CustomAvailability;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.CustomAvailabilityForm = (function (superClass) {
        extend(CustomAvailabilityForm, superClass);

        function CustomAvailabilityForm() {
            return CustomAvailabilityForm.__super__.constructor.apply(this, arguments);
        }

        CustomAvailabilityForm.prototype.template = templates.find('dialogs/custom_availability_form');

        CustomAvailabilityForm.prototype.menuTemplate = templates.find('availability/popover_menu');

        CustomAvailabilityForm.prototype.className = 'js-custom-availability';

        CustomAvailabilityForm.prototype.events = {
            "click .dropdown-toggle": "togglePopover",
            "click .js-update": "updateAvailability",
            "click .js-cancel": "close",
            "click": "_closePopover",
            "click .js-reset-availability": "resetAvailability",
            "click .js-copy-availability": "copyAvailability"
        };

        CustomAvailabilityForm.prototype.initialize = function (options) {
            this.dateRange = options.dateRange;
            this.selectedDay = options.selectedDay;
            this.dailyAggregation = options.dailyAggregation;
            this.resource = options.resource;
            return this.popover = options.popover;
        };

        CustomAvailabilityForm.prototype.remove = function () {
            this._cleanup();
            return CustomAvailabilityForm.__super__.remove.apply(this, arguments);
        };

        CustomAvailabilityForm.prototype._cleanup = function () {
            var ref, ref1, ref2, ref3;
            this.off();
            this.$el.off();
            if ((ref = this.days) != null) {
                ref.remove();
            }
            if ((ref1 = this.dateRangeSelector) != null) {
                ref1.remove();
            }
            if ((ref2 = this.optionView) != null) {
                ref2.remove();
            }
            if ((ref3 = this.copyAvailabilityPopup) != null) {
                ref3.remove();
            }
            return this.days = null;
        };

        CustomAvailabilityForm.prototype._renderDays = function () {
            this.days = new RG.Views.CustomAvailability.DayRangeForm({
                collection: this.dailyAggregation,
                selectedDay: this.selectedDay,
                resource: this.resource
            });
            this.days.on("edit", (function (_this) {
                return function () {
                    return _this.trigger("edit");
                };
            })(this));
            this.days.on("change", (function (_this) {
                return function (model) {
                    _this.selectedDay = model;
                    return _this.toggleCopyAvailability();
                };
            })(this));
            this.days.on("updatePosition", (function (_this) {
                return function () {
                    return _this.trigger("updatePosition");
                };
            })(this));
            this.days.render();
            this._renderAvailabilityMenu();
            return this.days.$el;
        };

        CustomAvailabilityForm.prototype._renderDateRangeSelector = function () {
            this.dateRangeSelector = new RG.Views.Selectors.DateRange({
                dateRange: new RG.Utils.DateRange(new Date(this.dateRange.startDate), new Date(this.dateRange.endDate)),
                customValidations: new RG.Validators.CustomAvailabilityLengthValidator().validate,
                tagName: 'span'
            });
            this.dateRangeSelector._isResourceAvailable = function () {
                return true;
            };
            this.dateRangeSelector.on("change", (function (_this) {
                return function (dateRange) {
                    if (_this.dateRangeSelector.customValidations(_this.dateRangeSelector) && dateRange.getNumberOfDays() > 0) {
                        _this.dateRange = dateRange;
                        return _this.trigger("change:dateRange", dateRange);
                    }
                };
            })(this));
            this.$(".js-daterange").append(this.dateRangeSelector.render().el);
            this.dateRangeSelector.toggleError(false);
            return this.dateRangeSelector.validate();
        };

        CustomAvailabilityForm.prototype._renderAvailabilityMenu = function () {
            return $(this.menuTemplate()).insertBefore(this.days.$(".js-day-detail"));
        };

        CustomAvailabilityForm.prototype.toggleCopyAvailability = function () {
            if (this.dailyAggregation.length === 1 || !this.selectedDay.availabilityConsistent()) {
                return this.$(".js-copy-availability").hide();
            } else {
                return this.$(".js-copy-availability").show();
            }
        };

        CustomAvailabilityForm.prototype.render = function () {
            var daysEl;
            this.$el.html(this.template());
            this.$(".filter__availability-form").tooltip();
            this._renderDateRangeSelector();
            daysEl = this._renderDays();
            this.$el.append(daysEl);
            this.$el.append(this._renderFooter());
            this.toggleCopyAvailability();
            return this;
        };

        CustomAvailabilityForm.prototype.copyAvailability = function (e) {
            var ref;
            if (e != null) {
                e.stopPropagation();
            }
            if ((ref = this.copyAvailabilityPopup) != null) {
                ref.remove();
            }
            this.copyAvailabilityPopup = new RG.Views.Dialogs.CopyAvailabilityPopover({
                attachTo: this.$(".js-copy-availability"),
                dailyAggregation: this.dailyAggregation,
                currentDay: this.selectedDay
            });
            this.copyAvailabilityPopup.popup();
            return this.$(".js-copy-availability").append(this.copyAvailabilityPopup.$el);
        };

        CustomAvailabilityForm.prototype.resetAvailability = function () {
            this.selectedDay.resetAvailability();
            this.days.render();
            this._renderAvailabilityMenu();
            return this.toggleCopyAvailability();
        };

        CustomAvailabilityForm.prototype.togglePopover = function (e) {
            var ref;
            if ((ref = this.days) != null) {
                ref.trigger("openDropdown");
            }
            $(e.target).closest(".dropdown").toggleClass("open");
            return e.stopPropagation();
        };

        CustomAvailabilityForm.prototype.updateAvailability = function (e) {
            var changedAvailabilityDays, changedDays, changedOvertimeDays, overtimeCommand, resetAvailabilityDays, resetPromise, updateAvailabilityPromise;
            e.preventDefault();
            if (!this.dateRangeSelector.validate()) {
                return;
            }
            changedAvailabilityDays = this.dailyAggregation.select(function (d) {
                return d.hasAvailabilityChanged() && d.variesFromNormalAvailability();
            });
            resetAvailabilityDays = this.dailyAggregation.select(function (d) {
                return d.hasAvailabilityChanged() && !d.variesFromNormalAvailability();
            });
            changedOvertimeDays = this.dailyAggregation.select(function (d) {
                return d.hasOvertimeChanged();
            });
            changedDays = this.dailyAggregation.select(function (d) {
                return d.hasAvailabilityChanged() || d.hasOvertimeChanged();
            });
            resetPromise = this._resetServerAvailability(resetAvailabilityDays);
            updateAvailabilityPromise = Q.promise((function (_this) {
                return function (resolve) {
                    var command;
                    if (changedAvailabilityDays.length === 0) {
                        return Q.delay(0).then(resolve);
                    }
                    command = new RG.Commands.UpdateAvailabilityCommand({
                        account: _this.resource.account,
                        dateRange: _this.dateRange,
                        resource: _this.resource,
                        changedDays: changedAvailabilityDays,
                        successCallback: function () {
                            return resolve();
                        }
                    });
                    return command.willTouchBookings({
                        success: function (bookingsCount) {
                            _this.optionView = new RG.Views.Dialogs.BookingClashManagement({
                                command: command,
                                clashBookingsCount: bookingsCount
                            });
                            return _this.trigger('changeOverlay', _this.optionView, {
                                className: 'overlay availability-waiting'
                            });
                        },
                        fail: function () {
                            _this.trigger('updating');
                            return window.setTimeout(function () {
                                return command.execute();
                            }, 50);
                        }
                    });
                };
            })(this));
            overtimeCommand = new RG.Commands.UpdateOvertimeCommand({
                dateRange: this.dateRange,
                resource: this.resource,
                changedDays: changedOvertimeDays,
                successCallback: (function (_this) {
                    return function () {
                        return window.update().then(function () {
                            return setTimeout(function () {
                                return _this.resource.availability.trigger('maxAvailabilityChanged');
                            }, 750);
                        });
                    };
                })(this)
            });
            return updateAvailabilityPromise.then(resetPromise).then((function (_this) {
                return function () {
                    _this.close();
                    return overtimeCommand.execute();
                };
            })(this));
        };

        CustomAvailabilityForm.prototype._resetServerAvailability = function (aggregations) {
            var command, dates;
            dates = _.flatten(aggregations.map(function (a) {
                return a.getDates();
            }));
            if (dates.length === 0) {
                return Q.delay(0);
            }
            command = new RG.Commands.ResetToNormalAvailabilityCommand({
                resourceInstanceId: this.resource.id,
                dates: dates
            });
            return command.execute.bind(command);
        };

        CustomAvailabilityForm.prototype.close = function (e) {
            if (e != null) {
                e.stopPropagation();
            }
            return this.trigger("close");
        };

        CustomAvailabilityForm.prototype._closePopover = function (e) {
            var ref, ref1;
            if (!$(e.target).hasClass('hasDatepicker')) {
                this.dateRangeSelector.$('input').trigger('blur');
            }
            if ((ref = this.days) != null) {
                ref.closePopovers();
            }
            if ((ref1 = this.copyAvailabilityPopup) != null) {
                ref1.remove();
            }
            return this.$(".dropdown").removeClass("open");
        };

        CustomAvailabilityForm.prototype._disableControls = function () {
            this.$el.find('.js-update, .js-cancel').attr('disabled', 'disabled');
            this.$el.find('.js-daterange input').attr('disabled', 'disabled');
            this.$el.find('.js-reset-availability').hide();
            this.$el.find('.js-add-timeblock').hide();
            this.$el.find('.js-timeblock span').hide();
            this.$el.find('.js-edit-timeblock').hide();
            return this.$el.find('.availability-tabs__menu').hide();
        };

        CustomAvailabilityForm.prototype._enableControls = function () {
            this.$el.find('.js-update, .js-cancel').attr('disabled', null);
            this.$el.find('.js-daterange input').attr('disabled', null);
            this.$el.find('.js-reset-availability').show();
            this.$el.find('.js-add-timeblock').show();
            this.$el.find('.js-timeblock span').show();
            this.$el.find('.js-edit-timeblock').show();
            return this.$el.find('.availability-tabs__menu').show();
        };

        CustomAvailabilityForm.prototype._renderFooter = function () {
            var footer;
            footer = $(document.createElement("footer"));
            footer.append($(document.createElement("button")).addClass("btn btn-guru js-update").text("Update"));
            footer.append("\n");
            footer.append($(document.createElement("button")).addClass("btn js-cancel").text("Cancel"));
            return footer;
        };

        return CustomAvailabilityForm;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.CustomAvailabilityPopover = (function (superClass) {
        extend(CustomAvailabilityPopover, superClass);

        function CustomAvailabilityPopover() {
            return CustomAvailabilityPopover.__super__.constructor.apply(this, arguments);
        }

        CustomAvailabilityPopover.prototype.className = 'availability js-availability-dropdown-parent';

        CustomAvailabilityPopover.prototype.cssClass = 'custom-availability-dropdown';

        CustomAvailabilityPopover.prototype.onboardTemplate = templates.find('availability/onboard');

        CustomAvailabilityPopover.prototype.initialize = function (options) {
            CustomAvailabilityPopover.__super__.initialize.apply(this, arguments);
            this.line = options.line;
            this.dateRange = options.dateRange;
            this.resource = options.resource;
            return this.changeCallback = options.changeCallback;
        };

        CustomAvailabilityPopover.prototype._closeOpenPopovers = function (e) {
            CustomAvailabilityPopover.__super__._closeOpenPopovers.apply(this, arguments);
            if (!$(e.target).hasClass('hasDatepicker')) {
                return this.$('input').trigger('blur');
            }
        };

        CustomAvailabilityPopover.prototype.popup = function () {
            var aggregation, view;
            aggregation = this._getDailyAggregation();
            view = new RG.Views.Dialogs.CustomAvailability({
                line: this.line,
                dateRange: this.dateRange,
                resource: this.resource,
                dailyAggregation: aggregation
            });
            this.setBodyView(view);
            CustomAvailabilityPopover.__super__.popup.apply(this, arguments);
            view.on("edit", (function (_this) {
                return function () {
                    _this.setBodyView(_this._createFormView(view.getSelectedDay()));
                    return _this.setPosition();
                };
            })(this));
            return this._displayOnboardingOverlay();
        };

        CustomAvailabilityPopover.prototype.remove = function () {
            var ref, ref1;
            if ((ref = this.editView) != null) {
                ref.remove();
            }
            if ((ref1 = this.overlay) != null) {
                ref1.remove();
            }
            return CustomAvailabilityPopover.__super__.remove.apply(this, arguments);
        };

        CustomAvailabilityPopover.prototype._createFormView = function (selectedDay) {
            var aggregation, day, i, len, newSelectedDay, ref, ref1, ref2, ref3;
            aggregation = this._getDailyAggregation();
            ref = aggregation.models;
            for (i = 0, len = ref.length; i < len; i++) {
                day = ref[i];
                day.getFirstAvailablePeriods().on("reset", (function (_this) {
                    return function () {
                        return _this._resetPosition();
                    };
                })(this));
            }
            newSelectedDay = aggregation.findWhere({
                weekDay: selectedDay.get('weekDay')
            });
            if ((ref1 = this.editView) != null) {
                ref1.remove();
            }
            $('#ui-datepicker-div').remove();
            this.editView = new RG.Views.Dialogs.CustomAvailabilityForm({
                dateRange: this.dateRange,
                selectedDay: newSelectedDay,
                dailyAggregation: aggregation,
                resource: this.resource,
                popover: this
            });
            this.editView.on("change:dateRange", (function (_this) {
                return function (dateRange) {
                    _this.trigger('changeOverlay', _this._spinnerView(dateRange), {
                        className: 'overlay availability-waiting'
                    });
                    return window.setTimeout(function () {
                        return window.requestAnimationFrame(function () {
                            return _this.setPosition();
                        });
                    }, 10);
                };
            })(this));
            this.editView.on('updating', (function (_this) {
                return function () {
                    return _this.trigger('changeOverlay', _this._spinnerView(), {
                        className: 'overlay availability-waiting'
                    });
                };
            })(this));
            if ((ref2 = this.spinner) != null) {
                ref2.stop();
            }
            if ((ref3 = this.overlay) != null) {
                ref3.remove();
            }
            return this.editView.render();
        };

        CustomAvailabilityPopover.prototype._getDailyAggregation = function () {
            var aggregation, collection, date, i, len, name, ref, today;
            aggregation = {};
            ref = this.dateRange.getDates();
            for (i = 0, len = ref.length; i < len; i++) {
                date = ref[i];
                today = aggregation[name = date.getDay()] != null ? aggregation[name] : aggregation[name] = new RG.Models.DayAvailabilityAggregation({
                    weekDay: date.getDay(),
                    dateRange: this.dateRange
                });
                today.get('availablePeriods')[date.getISODate()] = this.resource.availability.getPeriodsForDate(date);
                today.get('overtimes')[date.getISODate()] = this.resource.availability.getOvertimesForDate(date);
                today.get('durations')[date.getISODate()] = this.resource.bookings.getDurationsForDate(date);
                today.get('downtimes')[date.getISODate()] = this.resource.downtimes.mergedTimeRangesForDate(date);
                today.get('originalAvailablePeriods')[date.getISODate()] = this.resource.availability.getOriginalPeriodsForDate(date);
            }
            collection = new RG.Collections.DayAvailabilityAggregations(_.values(aggregation));
            collection.resourceId = this.resource.id;
            return collection;
        };

        CustomAvailabilityPopover.prototype._spinnerView = function (dateRange) {
            $('#ui-datepicker-div').hide();
            this.overlay = new RG.Views.Dialogs.Overlay({
                attachTo: this.el,
                className: "overlay",
                template: function () {
                    return '';
                }
            });
            this.overlay.render();
            this.spinner = new Spinner(this.spinnerOptions).spin(this.overlay.el);
            if (dateRange) {
                return window.setTimeout((function (_this) {
                    return function () {
                        return window.requestAnimationFrame(function () {
                            _this.dateRange = dateRange;
                            if (typeof _this.changeCallback === "function") {
                                _this.changeCallback(dateRange);
                            }
                            _this.setBodyView(_this._createFormView(_this.editView.selectedDay));
                            return $('#ui-datepicker-div').hide();
                        });
                    };
                })(this), 8);
            }
        };

        CustomAvailabilityPopover.prototype._displayOnboardingOverlay = function () {
            var selectedDay;
            if (!window.onboardingNotice.dismissed_custom_availability) {
                selectedDay = this.bodyView.getSelectedDay();
                this.$el.addClass('onboarding-notice-open');
                this.overlay = new RG.Views.Dialogs.Overlay({
                    attachTo: this.el,
                    template: this.onboardTemplate,
                    className: "overlay",
                    removeCallback: (function (_this) {
                        return function () {
                            var command;
                            _this.$el.removeClass('onboarding-notice-open');
                            window.onboardingNotice.dismissed_custom_availability = true;
                            command = new RG.Commands.UpdateNoticeCommand({
                                dismissedField: 'dismissed_custom_availability'
                            });
                            return command.execute();
                        };
                    })(this)
                });
                return this.overlay.render();
            }
        };

        return CustomAvailabilityPopover;

    })(RG.Views.Dialogs.Popover);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.DowntimeDetailsActions = (function (superClass) {
        extend(DowntimeDetailsActions, superClass);

        function DowntimeDetailsActions() {
            return DowntimeDetailsActions.__super__.constructor.apply(this, arguments);
        }

        DowntimeDetailsActions.prototype.tagName = 'ul';

        DowntimeDetailsActions.prototype.className = 'booking-actions';

        DowntimeDetailsActions.prototype.template = templates.find('dialogs/downtime_details_actions');

        DowntimeDetailsActions.prototype.deleteTemplate = templates.find('dialogs/downtime_details_actions_delete_single');

        DowntimeDetailsActions.prototype.deleteMenuTemplate = templates.find('dialogs/downtime_details_actions_delete_series');

        DowntimeDetailsActions.prototype.initialize = function (options) {
            this.account = options.account;
            this.resources = options.resources;
            this.duration = options.duration;
            this.downtime = options.downtime;
            return this.downtimeFormFactory = options.downtimeFormFactory;
        };

        DowntimeDetailsActions.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this._bindEvents();
            return this;
        };

        DowntimeDetailsActions.prototype._bindEvents = function () {
            this.$el.on("click", "#delete-duration", (function (_this) {
                return function (e) {
                    return _this.deleteDuration(e);
                };
            })(this));
            this.$el.on("click", "#delete-downtime", (function (_this) {
                return function (e) {
                    return _this.deleteDowntime(e);
                };
            })(this));
            this.$el.on("click", "#edit-downtime", (function (_this) {
                return function (e) {
                    return _this.editDowntime(e);
                };
            })(this));
            return this.$el.on("click", "#split-downtime", (function (_this) {
                return function (e) {
                    return _this.splitDowntime(e);
                };
            })(this));
        };

        DowntimeDetailsActions.prototype._onEdgeDay = function () {
            return RG.Utils.DateComparator.equalsYMD(this.duration.get('date'), this.downtime.get('to')) || RG.Utils.DateComparator.equalsYMD(this.duration.get('date'), this.downtime.get('from'));
        };

        DowntimeDetailsActions.prototype.deleteDuration = function (e) {
            var overlay, response;
            if (e != null) {
                e.preventDefault();
            }
            if (!this._onEdgeDay()) {
                response = confirm("This will break this series of events into two blocks.");
                if (!response) {
                    return false;
                }
            }
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-downtime-popover')[0]);
            return Q.delay(10).then((function (_this) {
                return function () {
                    RG.Utils.DowntimeService.deleteSingleDate(_this.downtime, _this.duration.get('date'), function () {
                        RG.Popovers.clear();
                        RG.Popovers.popoverActive = false;
                        return _this.remove();
                    });
                    return true;
                };
            })(this));
        };

        DowntimeDetailsActions.prototype.deleteDowntime = function (e) {
            var overlay;
            if (e != null) {
                e.preventDefault();
            }
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-downtime-popover')[0]);
            return Q.delay(10).then((function (_this) {
                return function () {
                    var downtime;
                    downtime = _this.account.downtimes.findWhere({
                        id: _this.downtime.id
                    });
                    _this.account.downtimes.remove(downtime.id);
                    RG.Popovers.clear();
                    RG.Popovers.popoverActive = false;
                    _this.remove();
                    RG.Utils.DowntimeService.deleteDowntime(downtime.id);
                    return true;
                };
            })(this));
        };

        DowntimeDetailsActions.prototype.editDowntime = function (e) {
            var view;
            if (e != null) {
                e.preventDefault();
            }
            view = this.downtimeFormFactory.createEdit({
                downtime: this.downtime
            });
            this.trigger("changeView", view);
            return true;
        };

        DowntimeDetailsActions.prototype.splitDowntime = function (e) {
            var view;
            if (e != null) {
                e.preventDefault();
            }
            if (!this._canSplit()) {
                return false;
            }
            view = new RG.Views.Dialogs.SplitDowntime({
                account: this.account,
                resources: this.resources,
                downtime: this.downtime,
                splitDate: this.duration.get('date')
            });
            this.trigger('changeView', view, {
                className: 'split-booking-popover',
                render: true
            });
            return false;
        };

        DowntimeDetailsActions.prototype._fillValues = function () {
            var date;
            if (this.downtime.isSeries() && !this.downtime.isVacation() && this.duration) {
                this.$('.js-delete-button').html(this.deleteMenuTemplate());
                this.$('.dropdown-toggle').dropdown();
                this.$('.dropdown-toggle').on('click', (function (_this) {
                    return function () {
                        return _this.$('.downtime-btn-group').toggleClass('dropup', _this._menuOpensUpwards());
                    };
                })(this));
                date = this.duration.get('date');
                this.$("#delete-duration").text("Delete " + (RG.Utils.DateFormatter.getShortDate(date)) + " only");
            } else {
                this.$('.js-delete-button').html(this.deleteTemplate());
            }
            if (!this._canSplit()) {
                return this._hideOrGreySplitIcon();
            }
        };

        DowntimeDetailsActions.prototype._hideOrGreySplitIcon = function () {
            if (this.downtime.isSeries()) {
                return this.$(".js-split-button a").attr({
                    disabled: 'disabled',
                    title: this._cantSplitTitle()
                }).addClass('is-disabled');
            } else {
                return this.$(".js-split-button").hide();
            }
        };

        DowntimeDetailsActions.prototype._menuOpensUpwards = function () {
            return this.$el.offset().top - $(window).height() - $(window).scrollTop() > -130;
        };

        DowntimeDetailsActions.prototype._canSplit = function () {
            return !this.downtime.isVacation() && this.duration && this.downtime.getDateRange().getNumberOfDays() > 1 && !RG.Utils.DateComparator.equalsYMD(this.duration.get('date'), this.downtime.getDateRange().startDate);
        };

        DowntimeDetailsActions.prototype._cantSplitTitle = function () {
            if (this.downtime.isVacation()) {
                return "You can't split a vacation Time Off.";
            }
            return "Sorry, you can't split this item on the start date. Please select another date.";
        };

        return DowntimeDetailsActions;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.DowntimeDetailsBody = (function (superClass) {
        extend(DowntimeDetailsBody, superClass);

        function DowntimeDetailsBody() {
            return DowntimeDetailsBody.__super__.constructor.apply(this, arguments);
        }

        DowntimeDetailsBody.prototype.template = templates.find('dialogs/downtime_details_body');

        DowntimeDetailsBody.prototype.initialize = function (options) {
            this.downtime = options.downtime;
            this.actions = options.actions;
            this.booker = options.booker;
            return this.resources = options.resources;
        };

        DowntimeDetailsBody.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        DowntimeDetailsBody.prototype.remove = function () {
            var ref;
            if ((ref = this.actions) != null) {
                ref.remove();
            }
            return DowntimeDetailsBody.__super__.remove.apply(this, arguments);
        };

        DowntimeDetailsBody.prototype.off = function () {
            var ref;
            if ((ref = this.actions) != null) {
                ref.off();
            }
            return DowntimeDetailsBody.__super__.off.apply(this, arguments);
        };

        DowntimeDetailsBody.prototype._fillValues = function () {
            var downtimeType;
            this._renderActions();
            this._renderResources();
            if (downtimeType = this.downtime.getType()) {
                this.$("#booking-target-field").show();
                this.$("#booking-target").show();
                this.$("#booking-target").text(downtimeType);
            } else {
                this.$("#booking-target-field").hide();
                this.$("#booking-target").hide();
            }
            this.$(".js-booker-img").attr("src", this.booker.get('imageUrl'));
            this.$(".js-booker-name").text(this.booker.get('name'));
            this.$("#confirmed-hours").text((RG.Utils.TimeFormatter.formatMinutes(this.downtime.getConfirmedMinutes())) + " confirmed");
            if (this.downtime.get('details') && this.downtime.get('details').length > 0) {
                this.$("#details-field").show();
                this.$("#details").show();
                return this.$("#details").html(window.segmentAutolinker(this.downtime.get('details')));
            } else {
                this.$("#details-field").hide();
                return this.$("#details").hide();
            }
        };

        DowntimeDetailsBody.prototype._renderActions = function () {
            var ref, ref1;
            this.$(".js-actions-container").append((ref = this.actions) != null ? ref.render().el : void 0);
            return (ref1 = this.actions) != null ? ref1.on("all", (function (_this) {
                return function () {
                    return _this.trigger.apply(_this, arguments);
                };
            })(this)) : void 0;
        };

        DowntimeDetailsBody.prototype._renderResources = function () {
            if (this.resources.length === 1) {
                this.$("#booking-resources-field").text("Resource");
            }
            this.resourcesView = new RG.Views.Downtimes.Resources({
                resources: this.resources
            });
            return this.$("#booking-resources").html(this.resourcesView.render().el);
        };

        return DowntimeDetailsBody;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    RG.Views.Dialogs.DowntimeDetailsFactory = (function () {
        function DowntimeDetailsFactory(options) {
            this.downtimeFormFactory = options.downtimeFormFactory;
        }

        DowntimeDetailsFactory.prototype.create = function (options) {
            var actions, body, bodyView, booker, footer, header, resources, timeOffText;
            booker = window.bookers.findWhere({
                id: options.downtime.get('creatorId')
            });
            if (!booker) {
                booker = window.deletedBookers.findWhere({
                    id: options.downtime.get('creatorId')
                });
            }
            timeOffText = 'Downtime';
            resources = window.resources.select(function (resource) {
                return _.include(options.downtime.get('resourceIds'), resource.id);
            });
            if (_.any(resources, function (resource) {
                return resource.constructor === RG.Models.HumanResourceInstance;
            })) {
                timeOffText = 'Time Off';
            }
            header = new RG.Views.Dialogs.DowntimeDetailsHeader({
                timeOffText: timeOffText,
                downtime: options.downtime,
                duration: options.duration,
                currentUserTimeZone: window.currentUserTimeZone,
                resources: resources
            });
            if (RG.Utils.Permissions.canManageDowntime(options.downtime)) {
                actions = new RG.Views.Dialogs.DowntimeDetailsActions({
                    account: RG.Utils.getCurrentAccount(),
                    resources: resources,
                    duration: options.duration,
                    downtime: options.downtime,
                    downtimeFormFactory: this.downtimeFormFactory
                });
            }
            body = new RG.Views.Dialogs.DowntimeDetailsBody({
                downtime: options.downtime,
                booker: booker,
                resources: resources
            });
            footer = new RG.Views.Dialogs.TagWrapper({
                view: actions,
                tagName: 'footer'
            });
            bodyView = new RG.Views.Dialogs.Dialog({
                header: header,
                body: body,
                footer: footer,
                className: "downtime-details-dialog"
            });
            return new RG.Views.Dialogs.Popover({
                removeAttachTo: options.removeAttachTo,
                attachTo: options.attachTo,
                body: bodyView,
                className: 'edit-booking-dropdown js-edit-downtime-popover'
            });
        };

        return DowntimeDetailsFactory;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.DowntimeDetailsHeader = (function (superClass) {
        extend(DowntimeDetailsHeader, superClass);

        function DowntimeDetailsHeader() {
            return DowntimeDetailsHeader.__super__.constructor.apply(this, arguments);
        }

        DowntimeDetailsHeader.prototype.template = templates.find('dialogs/downtime_details_header');

        DowntimeDetailsHeader.prototype.tagName = 'header';

        DowntimeDetailsHeader.prototype.initialize = function (options) {
            this.timeOffText = options.timeOffText;
            this.downtime = options.downtime;
            this.duration = options.duration;
            this.currentUserTimeZone = options.currentUserTimeZone;
            return this.resources = options.resources;
        };

        DowntimeDetailsHeader.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        DowntimeDetailsHeader.prototype._fillValues = function () {
            var dateRange, icon, multipleResources, time, timezone;
            dateRange = this.downtime.getDateRange();
            timezone = this.downtime.getTimeZone();
            icon = $(document.createElement('i')).addClass(this.downtime.getTypeIcon());
            this.$("#popover-header").text(this.timeOffText).prepend(icon);
            if (this.downtime.get('resourceIds').length > 1) {
                multipleResources = $(document.createElement('i')).addClass('rg-icon--contacts');
                this.$("#popover-header").prepend(multipleResources);
            }
            time = this.$("#downtime-duration");
            if (dateRange.getNumberOfDays() > 1) {
                this.$(".downtime-details-date").remove();
                time.text(this.downtime.getDateTimeString(RG.Utils.DateFormatter.getShortDateWithYear));
                time.addClass('downtime-details-date');
            } else {
                this.$("#downtime-duration").text(this.downtime.getDateTimeString());
                time = this.$(".downtime-details-date");
                time.text(dateRange.toString());
            }
            if (this._isTimeZoneDifferent()) {
                time.append(" ");
                return time.append($("<span></span>").text(timezone));
            }
        };

        DowntimeDetailsHeader.prototype._isTimeZoneDifferent = function () {
            return RG.Utils.isDifferentTimeZones(this.resources, this.currentUserTimeZone);
        };

        return DowntimeDetailsHeader;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    RG.Views.Dialogs.DowntimeFormFactory = (function () {
        function DowntimeFormFactory(options) {
            this.currentUserId = options.currentUserId;
            this.resources = options.resources;
            this.bookers = options.bookers;
            this.downtimeTypes = options.downtimeTypes;
            this.deletedBookers = options.deletedBookers;
            this.currentUserTimeZone = options.currentUserTimeZone;
            this.timeZones = options.timeZones;
        }

        DowntimeFormFactory.prototype.createEdit = function (options) {
            var resourceSelector, selectedResources;
            selectedResources = this.resources.select((function (_this) {
                return function (resource) {
                    return _.include(options.downtime.get('resourceIds'), resource.id);
                };
            })(this));
            resourceSelector = new RG.Views.Factories.NameSearch(this.resources).create({
                showMenu: true,
                cssClass: 'js-downtime-resource-selector',
                resourceSelector: true
            });
            return new RG.Views.Dialogs.EditDowntime({
                downtime: options.downtime,
                currentUserId: this.currentUserId,
                currentUserTimeZone: window.currentUserTimeZone,
                resources: this.resources,
                selectedResources: selectedResources,
                resourceSelector: resourceSelector,
                bookers: this.bookers,
                downtimeTypes: this.downtimeTypes,
                currentUserTimeZone: this.currentUserTimeZone,
                timeZones: this.timeZones
            });
        };

        return DowntimeFormFactory;

    })();

}).call(this);
;
(function () {
    RG.Views.Dialogs.DowntimePopoverFactory = (function () {
        function DowntimePopoverFactory(options) {
            this.downtime = options.downtime;
            this.duration = options.duration;
            this.downtimeAnchor = options.downtimeAnchor;
            this.popoverType = options.popoverType;
            if (typeof options.removeAttachTo === 'undefined') {
                this.removeAttachTo = true;
            }
            this.downtimeFormFactory = options.downtimeFormFactory;
        }

        DowntimePopoverFactory.prototype.popover = function () {
            var view;
            if (this.popoverType === 'details') {
                return this._getDetailsDialogFactory().create({
                    removeAttachTo: this.removeAttachTo,
                    downtime: this.downtime,
                    attachTo: this.downtimeAnchor,
                    duration: this.duration,
                    editSeries: function () {
                        return this.downtimeFormFactory.createEdit({
                            downtime: this.downtime
                        });
                    }
                });
            } else if (this.popoverType === 'edit') {
                view = this.downtimeFormFactory.createEdit({
                    downtime: this.downtime
                });
                return new RG.Views.Dialogs.Popover({
                    attachTo: this.downtimeAnchor,
                    body: view,
                    removeAttachTo: this.removeAttachTo,
                    className: 'edit-booking-dropdown'
                });
            }
        };

        DowntimePopoverFactory.prototype._getDetailsDialogFactory = function () {
            return new RG.Views.Dialogs.DowntimeDetailsFactory({
                downtimeFormFactory: this.downtimeFormFactory
            });
        };

        return DowntimePopoverFactory;

    })();

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.EditBooking = (function (superClass) {
        extend(EditBooking, superClass);

        function EditBooking() {
            return EditBooking.__super__.constructor.apply(this, arguments);
        }

        EditBooking.prototype.headerTemplate = templates.find('dialogs/edit_booking_header');

        EditBooking.prototype.initialize = function (options) {
            this.currentUserId = options.currentUserId;
            this.resources = options.resources;
            this.projects = options.projects;
            this.deletedProjects = options.deletedProjects;
            this.deletedClients = options.deletedClients;
            this.clients = options.clients;
            this.bookers = options.bookers;
            this.deletedBookers = options.deletedBookers;
            this.booking = options.booking;
            if (options.el) {
                this.el = options.el;
            }
            this.dateRange = this.booking.getDateRange();
            this.originalDate = this.dateRange.startDate;
            this.resource = this.booking.collection.resource;
            this.billableChecked = this.booking.get('billable');
            this.projectExists = false;
            this.clientExists = false;
            if (this.booking.attributes.project) {
                this.projectExists = this.projects.findWhere({
                    id: this.booking.attributes.project.attributes.id
                });
            }
            if (this.booking.attributes.client) {
                this.clientExists = this.clients.findWhere({
                    id: this.booking.attributes.client.attributes.id
                });
            }
            if (this.booking.attributes.project) {
                this.deletedProjectExists = this.deletedProjects.findWhere({
                    id: this.booking.attributes.project.attributes.id
                });
            }
            if (this.booking.attributes.client) {
                this.deletedClientExists = this.deletedClients.findWhere({
                    id: this.booking.attributes.client.attributes.id
                });
            }
            this.booker_exists = this.bookers.findWhere({
                id: this.booking.attributes.booker.attributes.id
            });
            if (!this.booker_exists) {
                this.bookers.unshift(this.booking.attributes.booker);
                this.bookers.sort(function (b) {
                    return b.get('name');
                });
            }
            return this.backpackErrorsFields = [
                {
                    mountpoint: '.booking-details-error',
                    label: 'details'
                }, {
                    mountpoint: '.booking-project-id-error',
                    label: 'project_id'
                }, {
                    mountpoint: '.booking-client-id-error',
                    label: 'client_id'
                }
            ];
        };

        EditBooking.prototype.render = function () {
            EditBooking.__super__.render.apply(this, arguments);
            this.$el.prepend(this.headerTemplate());
            return this;
        };

        EditBooking.prototype.clearClientOrProject = function () {
            this.bookerSelector.setSelectedValue(this.bookerSelector.getCurrentUserBooker().cid);
            return this.clientProjectSelector.setSelectedValue(this.clientProjectSelector._originalValue);
        };

        EditBooking.prototype.toggleDurationTypes = function () {
            var duration, end_time, start_time;
            EditBooking.__super__.toggleDurationTypes.apply(this, arguments);
            if (!this.selectingDuration) {
                duration = this.booking.durations.models[0].get('minutes');
                start_time = 540;
                end_time = +duration + start_time;
                if (end_time <= 1440) {
                    this.timeRangeSelector.setStartTime(start_time);
                    return this.timeRangeSelector.setEndTime(end_time);
                } else if (end_time <= 1380) {
                    this.timeRangeSelector.setStartTime(60);
                    return this.timeRangeSelector.setEndTime(end_time - 480);
                }
            }
        };

        EditBooking.prototype._disableButtons = function () {
            $("footer a").attr("disabled", "disabled");
            return $("footer #add-booking").text("Busy, please wait...");
        };

        EditBooking.prototype._composeViews = function () {
            var ref, ref1, ref2;
            this.initialClientOrProject = (ref = this.booking) != null ? ref.getBookingTarget().cid : void 0;
            if (this.booking) {
                if (this.booking.attributes.project) {
                    this.projects.push((ref1 = this.booking) != null ? ref1.getBookingTarget() : void 0);
                } else if (this.booking.attributes.client) {
                    this.clients.push((ref2 = this.booking) != null ? ref2.getBookingTarget() : void 0);
                }
            }
            EditBooking.__super__._composeViews.apply(this, arguments);
            this.$("header h3").text("Edit Booking");
            this.$("#add-booking").text("Update Booking");
            this.durationSelector.setDuration(this.booking.durations.models[0].getMinutes());
            if (this.booking.durations.models[0].get('startTime') || this.booking.durations.models[0].get('startTime') === 0) {
                this.setSelectingDuration(false);
                this.timeRangeSelector.setStartTime(this.booking.durations.models[0].get('startTime'));
                this.timeRangeSelector.setEndTime(this.booking.durations.models[0].get('endTime'));
            } else {
                this.timeRangeSelector.setStartTime('0');
                this.timeRangeSelector.setEndTime("" + (this.booking.durations.models[0].get('minutes')));
                this.setSelectingDuration(true);
            }
            this.clientProjectSelector.setSelectedValue(this.clientProjectSelector._originalValue);
            this.$("#booking-details").val(this.booking.get('notes'));
            this._sortProjectsAndClientsAlphabetically();
            this.bookerSelector.setSelectedValue(this.booking.get('booker').cid);
            return this.el.querySelector("#booking-billable").checked = this.booking.isBillable();
        };

        EditBooking.prototype._sortProjectsAndClientsAlphabetically = function () {
            this.clientProjectSelector.clients.sort();
            return this.clientProjectSelector.projects.sort();
        };

        EditBooking.prototype._setBookingTarget = function () {
            if (this.projectExists) {
                return this.booking.attributes.project.cid;
            } else if (this.clientExists) {
                return this.booking.attributes.client.cid;
            } else if (this.deletedProjectExists) {
                return this.deletedProjects.findWhere({
                    id: this.booking.attributes.project.attributes.id
                }).cid;
            } else if (this.deletedClientExists) {
                return this.deletedClients.findWhere({
                    id: this.booking.attributes.client.attributes.id
                }).cid;
            }
        };

        EditBooking.prototype.remove = function () {
            this.undelegateEvents();
            if (!this.projectExists && this.booking.attributes.project) {
                this.projects.remove(this.deletedProjects.findWhere({
                    id: this.booking.attributes.project.id
                }));
            }
            if (!this.clientExists && this.booking.attributes.client) {
                this.clients.remove(this.deletedClients.findWhere({
                    id: this.booking.attributes.client.id
                }));
            }
            if (!this.booker_exists) {
                this.bookers.remove(this.booking.attributes.booker);
            }
            return EditBooking.__super__.remove.apply(this, arguments);
        };

        EditBooking.prototype._saveBookingToApi = function (resource, booker, dateRange, targetClientOrProject, billable, details, bookingDuration) {
            var command, overlay;
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-booking-popover')[0]);
            command = new RG.Commands.UpdateBookingCommand({
                resource: resource,
                booking: this.booking,
                booker: booker,
                startDate: dateRange.startDate,
                endDate: dateRange.endDate,
                target: targetClientOrProject,
                clearTarget: !targetClientOrProject,
                billable: billable,
                details: details,
                bookingDuration: bookingDuration,
                successCallback: (function (_this) {
                    return function (data) {
                        if (_this.booking && resource.id !== _this.booking.collection.resource.id) {
                            _this.booking.collection.remove(_this.booking);
                        }
                        RG.Utils.BookingMerger.merge(resource.bookings, [data]);
                        window.update();
                        overlay.close();
                        _this.trigger('close');
                        Q.delay(500).then(function () {
                            return RG.Popovers.popoverActive = false;
                        });
                        return resource.bookings.predictWaitingList();
                    };
                })(this),
                errorCallback: (function (_this) {
                    return function (e, xhr) {
                        overlay.close();
                        _this.$('.booking-save-error').show();
                        return window.Raven.captureException(e, {
                            extra: {
                                resource_id: resource.id,
                                booking_id: _this.booking.id,
                                booker_id: booker.id,
                                start_date: RG.Utils.DateFormatter.getISODate(dateRange.startDate),
                                end_date: RG.Utils.DateFormatter.getISODate(dateRange.endDate),
                                billable: billable,
                                duration: bookingDuration.duration,
                                start_time: bookingDuration.startTime,
                                target: targetClientOrProject && targetClientOrProject.constructor.name + ": " + targetClientOrProject.id,
                                xhr: {
                                    responseText: xhr.responseText,
                                    responseStatus: xhr.status
                                }
                            }
                        });
                    };
                })(this)
            });
            command.removedDatesCallback = (function (_this) {
                return function (removedDates) {
                    var placer, popover, ref, removedDatesDialog;
                    removedDatesDialog = new RG.Views.Dialogs.RemovedAvailabilityDates({
                        resource: resource,
                        removedAvailabilityDates: removedDates
                    });
                    placer = new RG.Utils.DatePopoverPlacer(resource, _this.originalDate, {
                        offsetTop: ((ref = $(".booking[data-booking-id=" + _this.booking.id + "]").offset()) != null ? ref.top : void 0) + 40
                    });
                    popover = new RG.Views.Dialogs.BookingClashPopover({
                        removeAttachTo: true,
                        attachTo: placer.createAnchor({
                            className: 'booking-clash-popover-anchor'
                        }),
                        body: removedDatesDialog,
                        className: 'edit-booking-dropdown'
                    });
                    return RG.Popovers.replace({
                        popoverView: popover,
                        removeCallback: function () { }
                    });
                };
            })(this);
            command.waitingCallback = (function (_this) {
                return function (waitingDates) {
                    var waitingConfirmation;
                    waitingConfirmation = new RG.Views.Dialogs.WaitingListConfirmation({
                        resource: resource,
                        waitingDates: waitingDates,
                        duration: command.bookingDuration.duration,
                        startTime: command.bookingDuration.startTime,
                        startDate: dateRange.startDate,
                        endDate: dateRange.endDate,
                        origin: _this,
                        callback: function () {
                            command.forceWaiting = true;
                            return command.execute();
                        }
                    });
                    overlay.close();
                    waitingConfirmation.on('addWaiting', function () {
                        waitingConfirmation.remove();
                        return overlay = RG.Utils.spinnerOverlay(_this.$el.closest('.js-edit-booking-popover')[0]);
                    });
                    return _this.trigger("changeOverlay", waitingConfirmation, {
                        className: 'overlay booking-waiting'
                    });
                };
            })(this);
            command.archivedCallback = (function (_this) {
                return function (data) {
                    new RG.Utils.ErrorHandler(_this.el, _this.backpackErrorsFields, data).handleErrors();
                    return overlay.close();
                };
            })(this);
            command.execute();
            return false;
        };

        return EditBooking;

    })(RG.Views.Dialogs.NewBooking);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.EditDowntime = (function (superClass) {
        extend(EditDowntime, superClass);

        function EditDowntime() {
            return EditDowntime.__super__.constructor.apply(this, arguments);
        }

        EditDowntime.prototype.initialize = function (options) {
            var selectedIds, selectedResources;
            this.downtime = options.downtime;
            this.currentUserId = options.currentUserId;
            this.resources = options.resources;
            this.resource = options.selectedResources[0];
            this.account = this.resource.account;
            this.selectedResources = options.selectedResources;
            this.selectedResourceIds = _.map(this.selectedResources, function (r) {
                return r.id;
            });
            this.originalResourceIds = _.clone(this.selectedResourceIds);
            this.bookers = options.bookers;
            this.selectedTimeZoneOption = this.downtime.getTimeZoneName();
            this.dateRange = this.downtime.getDateRange();
            this.timeRange = this.downtime.getRawTimeRange();
            this.downtimeTypes = options.downtimeTypes;
            this.timeZones = options.timeZones;
            this.currentUserTimeZone = options.currentUserTimeZone;
            this.renderHeader = true;
            selectedIds = _.map(this.selectedResources, function (r) {
                return r.id;
            });
            selectedResources = this.resources.filter(function (resource) {
                return selectedIds.includes(resource.get('id'));
            }, this);
            this.resourceSelector = new RG.Views.Downtimes.ResourceSelector({
                resources: this.resources,
                selected: selectedResources,
                itemClassName: 'multiselect-downtime-item',
                groupClassName: 'multiselect-downtime-group',
                onChange: this.toggleTimeZoneSelector
            });
            return this.resourceSelector.on('displaySpinner', (function (_this) {
                return function () {
                    return _this.resourceSelector.overlay = RG.Utils.spinnerOverlay($(_this.el).closest('.js-edit-downtime-popover')[0]);
                };
            })(this));
        };

        EditDowntime.prototype.createDowntime = function () {
            var overlay;
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-downtime-popover')[0]);
            return Q.delay(20).then((function (_this) {
                return function () {
                    var command, dateTimeRange, originalAttributes, realDowntime;
                    dateTimeRange = _this.dateTimeRangeSelector.getValues();
                    if (_this.validate()) {
                        _this.rendererLock = new RG.Renderer.GlobalLock;
                        RG.renderer.lock(_this.rendererLock);
                        realDowntime = _this.account.downtimes.findWhere({
                            id: _this.downtime.id
                        });
                        originalAttributes = _.clone(realDowntime.attributes);
                        realDowntime.set({
                            saving: true
                        });
                        command = new RG.Commands.UpdateDowntimeCommand({
                            downtime: _this.downtime,
                            account: _this.resource.account,
                            resources: _this._getResources(),
                            booker: _this._getBooker(),
                            dateTimeRange: dateTimeRange,
                            details: _this._getDetails(),
                            timeZones: _this.timeZones,
                            timeZone: _this._getTimeZone(),
                            type: _this._getType(),
                            preExecuteCallback: function (downtime, durations, shouldDelete) {
                                return RG.renderer.unlock(_this.rendererLock);
                            },
                            successCallback: function (downtime) {
                                RG.renderer.unlock(_this.rendererLock);
                                realDowntime.set({
                                    saving: false
                                });
                                return window.update().then(function () {
                                    RG.Popovers.done();
                                    return Q.delay(500).then(function () {
                                        return RG.Popovers.popoverActive = false;
                                    });
                                });
                            },
                            errorCallback: function (data) {
                                RG.renderer.unlock(_this.rendererLock);
                                overlay.close();
                                realDowntime.set({
                                    saving: false
                                });
                                _this.optionView = new RG.Views.Dialogs.ErrorList({
                                    errors: data
                                });
                                return _this.trigger('changeOverlay', _this.optionView, {
                                    className: 'overlay availability-waiting'
                                });
                            },
                            saveErrorCallback: function (e, xhr) {
                                RG.renderer.unlock(_this.rendererLock);
                                overlay.close();
                                realDowntime.set({
                                    saving: false
                                });
                                _this.$('.downtime-save-error').show();
                                return window.Raven.captureException(e, {
                                    extra: {
                                        downtime_id: _this.downtime.id,
                                        account_id: _this.resource.account.id,
                                        resource_ids: _this.resourceSelector.getResourceIds(),
                                        booker_id: _this._getBooker().id,
                                        dateTimeRange: dateTimeRange,
                                        timeZones: _this.timeZones,
                                        timeZone: _this._getTimeZone(),
                                        type: _this._getType(),
                                        xhr: {
                                            responseText: xhr.responseText,
                                            responseStatus: xhr.status
                                        }
                                    }
                                });
                            }
                        });
                        return Q.delay(50).then(function () {
                            command.willTouchBookings({
                                success: function (bookingsCount) {
                                    var cancelCallback;
                                    cancelCallback = function () {
                                        RG.renderer.unlock(_this.rendererLock);
                                        RG.Popovers.removeCallback = null;
                                        realDowntime.set(originalAttributes);
                                        return realDowntime.set({
                                            saving: false
                                        });
                                    };
                                    _this.optionView = new RG.Views.Dialogs.BookingClashManagement({
                                        command: command,
                                        clashBookingsCount: bookingsCount,
                                        cancelCallback: cancelCallback,
                                        successCallback: function () {
                                            RG.renderer.unlock(_this.rendererLock);
                                            RG.Popovers.removeCallback = null;
                                            realDowntime.set({
                                                saving: false
                                            });
                                            return window.update();
                                        }
                                    });
                                    overlay.close();
                                    _this.trigger('changeOverlay', _this.optionView, {
                                        className: 'overlay availability-waiting'
                                    });
                                    return RG.Popovers.removeCallback = cancelCallback;
                                },
                                fail: function () {
                                    RG.renderer.unlock(_this.rendererLock);
                                    return command.execute();
                                }
                            });
                            return realDowntime.set(command.downtime.attributes);
                        });
                    } else {
                        return overlay.close();
                    }
                };
            })(this));
        };

        EditDowntime.prototype._fillValues = function () {
            EditDowntime.__super__._fillValues.apply(this, arguments);
            this.$(".js-downtime-icon").removeClass("rg-icon--vacation").addClass(this.downtime.getTypeIcon());
            this.$('.js-time-off-header-text').text("Edit " + (this.resource.getHeadingDowntimeText()));
            this.$('#downtime-details-value').val(this.downtime.get('details'));
            return this.$('#add-downtime').text("Update " + (this.resource.getHeadingDowntimeText()));
        };

        EditDowntime.prototype._composeDownTimeTypes = function () {
            this.downtimeTypeSelector = new RG.Views.Selectors.DowntimeTypeSelector({
                downtimeTypes: this.downtimeTypes,
                selectedOption: this.downtime.getDowntimeType()
            });
            this.downtimeTypeSelector.on("change", (function (_this) {
                return function (downtimeType) {
                    return _this._updateTypeIcon(downtimeType);
                };
            })(this));
            return this.$("#downtime-type-options").append(this.downtimeTypeSelector.render().el);
        };

        EditDowntime.prototype._updateTypeIcon = function (downtimeType) {
            return this.$(".js-downtime-icon").attr('class', "js-downtime-icon " + ((downtimeType != null ? downtimeType.typeIcon() : void 0) || 'rg-icon--vacation'));
        };

        EditDowntime.prototype._affectedResources = function () {
            var affectedResourceIds;
            this.selectedResourceIds = _.map(this.selectedResources, function (r) {
                return r.id;
            });
            affectedResourceIds = _.uniq(this.originalResourceIds.concat(this.selectedResourceIds));
            return this.resources.select(function (r) {
                return _.include(affectedResourceIds, r.id);
            });
        };

        EditDowntime.prototype._composeResourceSelector = function () {
            this.$('.js-resource-selector').html(this.resourceSelector.render().el);
            this.resourceSelector.setFilters([
                {
                    categoryName: 'Person',
                    options: [
                        {
                            matchType: 'any',
                            name: 'Name',
                            selectedOptions: this.selectedResourceIds
                        }
                    ]
                }
            ]);
            return this.resourceSelector.on('change:filter', (function (_this) {
                return function () {
                    return _this.trigger("updatePosition");
                };
            })(this));
        };

        return EditDowntime;

    })(RG.Views.Dialogs.NewDowntime);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.EditOvertimePopover = (function (superClass) {
        extend(EditOvertimePopover, superClass);

        function EditOvertimePopover() {
            return EditOvertimePopover.__super__.constructor.apply(this, arguments);
        }

        EditOvertimePopover.prototype.className = 'edit-overtime-dropdown';

        EditOvertimePopover.prototype.cssClass = 'js-edit-overtime-dropdown';

        EditOvertimePopover.prototype.events = {
            "click": "_stopPropagation"
        };

        EditOvertimePopover.prototype.initialize = function (options) {
            EditOvertimePopover.__super__.initialize.apply(this, arguments);
            this.availabilityConsistent = options.availabilityConsistent;
            this.availableMinutes = options.availableMinutes;
            return this.overtimeMinutes = options.overtimeMinutes;
        };

        EditOvertimePopover.prototype.render = function () {
            this.setupEvents();
            return EditOvertimePopover.__super__.render.apply(this, arguments);
        };

        EditOvertimePopover.prototype.remove = function () {
            this.triggerDone();
            return EditOvertimePopover.__super__.remove.apply(this, arguments);
        };

        EditOvertimePopover.prototype.setPosition = function () {
            var initialLeft, initialTop, overtimeEditLink;
            overtimeEditLink = this.attachTo.find(".js-text--edit-overtime");
            initialTop = overtimeEditLink.position().top;
            initialLeft = overtimeEditLink.position().left;
            this.$(".shadow-arrow").css({
                top: this.$(".f-dropdown").height() - 12,
                left: initialLeft - 32
            });
            return this.$el.css({
                position: 'absolute',
                top: initialTop - 194,
                left: initialLeft - 242
            });
        };

        EditOvertimePopover.prototype.setupEvents = function () {
            this.$el.on('click', '.js-cancel', (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return _this.remove();
                };
            })(this));
            this.$el.on('click', '.js-update', (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return _this.updateOvertime();
                };
            })(this));
            return this.$el.on('click', '.js-edit-overtime', (function (_this) {
                return function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return _this.flagOvertime();
                };
            })(this));
        };

        EditOvertimePopover.prototype.triggerDone = function () {
            return this.trigger('editing:overtime:done');
        };

        EditOvertimePopover.prototype.popup = function () {
            if (this.overtimeMinutes === null) {
                this.setupEditOvertimeView();
            } else {
                this.setupFlagOvertimeView();
            }
            return EditOvertimePopover.__super__.popup.apply(this, arguments);
        };

        EditOvertimePopover.prototype.setupFlagOvertimeView = function () {
            var ref;
            if ((ref = this.bodyView) != null) {
                ref.remove();
            }
            return this.setBodyView(new RG.Views.CustomAvailability.FlagOvertimeForm({
                availabilityConsistent: this.availabilityConsistent,
                availableMinutes: this.availableMinutes,
                overtimeMinutes: this.overtimeMinutes
            }));
        };

        EditOvertimePopover.prototype.setupEditOvertimeView = function () {
            var ref;
            if ((ref = this.bodyView) != null) {
                ref.remove();
            }
            return this.setBodyView(new RG.Views.CustomAvailability.EditOvertimeForm);
        };

        EditOvertimePopover.prototype.flagOvertime = function () {
            this.setupFlagOvertimeView();
            return this.render();
        };

        EditOvertimePopover.prototype.updateOvertime = function () {
            this.trigger('change', this.bodyView.overtimeMinutes);
            return this.remove();
        };

        EditOvertimePopover.prototype._setOpenDirection = function () {
            EditOvertimePopover.__super__._setOpenDirection.apply(this, arguments);
            return this.$el.css({
                left: ""
            });
        };

        EditOvertimePopover.prototype._stopPropagation = function (e) {
            return e.stopPropagation();
        };

        return EditOvertimePopover;

    })(RG.Views.Dialogs.Popover);

    RG.Views.CustomAvailability.EditOvertimeForm = (function (superClass) {
        extend(EditOvertimeForm, superClass);

        function EditOvertimeForm() {
            return EditOvertimeForm.__super__.constructor.apply(this, arguments);
        }

        EditOvertimeForm.prototype.className = 'varying-overtime-dropdown';

        EditOvertimeForm.prototype.render = function () {
            this.$el.empty();
            this.$el.append($(document.createElement('p')).text('Overtime varies in this date range.\n Do you want to edit it?'));
            this.$el.append(this._renderFooter());
            return this;
        };

        EditOvertimeForm.prototype.remove = function () {
            this.off();
            this.$el.off();
            return EditOvertimeForm.__super__.remove.apply(this, arguments);
        };

        EditOvertimeForm.prototype._renderFooter = function () {
            this.footer = $(document.createElement("footer"));
            this.footer.append($(document.createElement("button")).addClass("btn btn-guru js-edit-overtime").text("Edit Overtime"));
            this.footer.append($(document.createElement("button")).addClass("btn js-cancel").text("Cancel"));
            return this.footer;
        };

        return EditOvertimeForm;

    })(RG.Views.BaseView);

    RG.Views.CustomAvailability.FlagOvertimeForm = (function (superClass) {
        extend(FlagOvertimeForm, superClass);

        function FlagOvertimeForm() {
            return FlagOvertimeForm.__super__.constructor.apply(this, arguments);
        }

        FlagOvertimeForm.prototype.className = 'overtime-slider';

        FlagOvertimeForm.prototype.initialize = function (options) {
            this.availabilityConsistent = options.availabilityConsistent;
            this.availableMinutes = options.availableMinutes;
            return this.overtimeMinutes = options.overtimeMinutes;
        };

        FlagOvertimeForm.prototype.remove = function () {
            var ref;
            if ((ref = this.overtimeTextEl) != null) {
                ref.off();
            }
            if (this.durationSelector) {
                this.durationSelector.validate = null;
                this.durationSelector.remove();
            }
            this.overtimeSlider.off();
            this._removeEventBindings();
            return FlagOvertimeForm.__super__.remove.apply(this, arguments);
        };

        FlagOvertimeForm.prototype.render = function () {
            var availabilityText, minutes, ref, startMinutes;
            this.$el.empty();
            if ((ref = this.durationSelector) != null) {
                ref.remove();
            }
            this.durationSelector = null;
            availabilityText = $(document.createElement("p")).text;
            this.$el.append(this._renderOvertimeSlider());
            minutes = +this.availableMinutes;
            startMinutes = minutes - +this.overtimeMinutes;
            this.overtimeSlider.noUiSlider({
                start: [startMinutes],
                range: {
                    min: 0,
                    max: minutes
                },
                step: 30
            }).on({
                change: (function (_this) {
                    return function () {
                        var ref1;
                        _this._updateOvertimeMinutes();
                        return (ref1 = _this.durationSelector) != null ? ref1.setDuration(_this.overtimeMinutes) : void 0;
                    };
                })(this),
                set: (function (_this) {
                    return function () {
                        return _this._updateOvertimeMinutes();
                    };
                })(this),
                slide: (function (_this) {
                    return function () {
                        return _this._updateOvertimeMinutes();
                    };
                })(this)
            });
            if (this.availabilityConsistent) {
                this.$el.append(this._renderAvailability());
            } else {
                this.overtimeSlider.hide();
            }
            this.$el.append(this._renderFooter());
            if (!this.availabilityConsistent) {
                this.toggleManualSet();
            }
            this._bindEvents();
            return this;
        };

        FlagOvertimeForm.prototype._bindEvents = function () {
            $(".availability-tabs__menu a.dropdown-toggle").on("click", function (e) {
                e.preventDefault();
                return e.stopPropagation();
            });
            return $(".js-edit, .js-add-timeblock").on("click", (function (_this) {
                return function (e) {
                    return _this.trigger('close');
                };
            })(this));
        };

        FlagOvertimeForm.prototype._removeEventBindings = function () {
            $(".availability-tabs__menu a.dropdown-toggle").off("click");
            return $(".js-edit").off("click");
        };

        FlagOvertimeForm.prototype.toggleManualSet = function (e) {
            var $element, div;
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
            if (this.durationSelector) {
                this.overtimeSlider.noUiSlider({
                    step: 30
                }, true);
                this.durationSelector.remove();
                this.durationSelector = null;
                this.$el.find('.js-manual-set-controls').remove();
                return null;
            } else {
                this.overtimeSlider.noUiSlider({
                    step: 1
                }, true);
            }
            div = $(document.createElement('div')).addClass('overtime-fine-controls js-manual-set-controls');
            this.durationSelector = new RG.Views.Selectors.Duration({
                duration: this.overtimeMinutes,
                typeName: 'Overtime',
                inlineHelpText: 'Cannot assign more overtime than available time.'
            });
            this.durationSelector.validate = this.validate.bind(this);
            this.durationSelector.validate();
            $element = $(this.durationSelector.render().el);
            $element.find('.alt-toggle').remove();
            div.append($element);
            return this.footer.prepend(div);
        };

        FlagOvertimeForm.prototype.validate = function () {
            var error;
            error = false;
            this.overtimeSlider.val(this.availableMinutes - this.durationSelector.getDuration());
            this.overtimeMinutes = this.durationSelector.getDuration();
            if (this.overtimeMinutes > 0) {
                if (this.overtimeMinutes > this.availableMinutes) {
                    error = true;
                    this.$(".help-inline.error").text("Hours must fall within the available time");
                } else {
                    error = false;
                }
            }
            this.durationSelector.toggleError(error);
            this.$(".js-update").attr('disabled', error ? 'disabled' : null);
            return !error;
        };

        FlagOvertimeForm.prototype._renderOvertimeSlider = function () {
            this.overtimeSlider = $(document.createElement('div'));
            return this.overtimeSlider;
        };

        FlagOvertimeForm.prototype._renderAvailability = function () {
            if (this.overtimeTextEl == null) {
                this.overtimeTextEl = $(document.createElement("strong")).addClass("text--edit-overtime");
            }
            this.overtimeTextEl.on('click', this.toggleManualSet.bind(this));
            if (this.availabilityTextEl == null) {
                this.availabilityTextEl = $(document.createElement("span"));
            }
            if (this.availabilityEl == null) {
                this.availabilityEl = $(document.createElement("p"));
            }
            this.availabilityTextEl.text((RG.Utils.TimeFormatter.formatMinutes(this.availableMinutes)) + " availability, of which ");
            this._changeOverTimeText();
            this.availabilityEl.append(this.availabilityTextEl);
            return this.availabilityEl.append(this.overtimeTextEl);
        };

        FlagOvertimeForm.prototype._changeOverTimeText = function () {
            if (this.availabilityConsistent) {
                return this.overtimeTextEl.text(RG.Utils.TimeFormatter.formatMinutes(this.overtimeMinutes) + " is overtime");
            }
        };

        FlagOvertimeForm.prototype._updateOvertimeMinutes = function () {
            this.overtimeMinutes = +this.availableMinutes - +this.overtimeSlider.val();
            return this._changeOverTimeText();
        };

        FlagOvertimeForm.prototype._renderFooter = function () {
            this.footer = $(document.createElement("footer"));
            this.footer.append($(document.createElement("button")).addClass("btn btn-guru btn--small js-update").text("Flag Overtime"));
            this.footer.append("\n");
            this.footer.append($(document.createElement("button")).addClass("btn btn--small js-cancel").text("Cancel"));
            return this.footer;
        };

        return FlagOvertimeForm;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.EditTimeBlockDropdown = (function (superClass) {
        extend(EditTimeBlockDropdown, superClass);

        function EditTimeBlockDropdown() {
            return EditTimeBlockDropdown.__super__.constructor.apply(this, arguments);
        }

        EditTimeBlockDropdown.prototype.cssClass = 'add-timeblock-dropdown';

        EditTimeBlockDropdown.prototype.events = {
            "click .js-cancel-button": "close",
            "click": "closeSelector"
        };

        EditTimeBlockDropdown.prototype.initialize = function (options) {
            this.newTimeBlockStartTime = options.newTimeBlockStartTime;
            this.newTimeBlockEndTime = options.newTimeBlockEndTime;
            return EditTimeBlockDropdown.__super__.initialize.apply(this, arguments);
        };

        EditTimeBlockDropdown.prototype.close = function () {
            return this.trigger("close");
        };

        EditTimeBlockDropdown.prototype.remove = function () {
            this.attachTo = null;
            return EditTimeBlockDropdown.__super__.remove.apply(this, arguments);
        };

        EditTimeBlockDropdown.prototype.setBodyView = function () {
            EditTimeBlockDropdown.__super__.setBodyView.apply(this, arguments);
            this.bodyView.on("add", (function (_this) {
                return function (ap) {
                    return _this.trigger("update", ap);
                };
            })(this));
            return this.bodyView.on("remove", (function (_this) {
                return function (ap) {
                    return _this.trigger("remove", ap);
                };
            })(this));
        };

        EditTimeBlockDropdown.prototype.closeSelector = function (e) {
            this.bodyView.closeSelector();
            if (e) {
                return e.stopPropagation();
            }
        };

        EditTimeBlockDropdown.prototype.popup = function () {
            this.setBodyView(new RG.Views.CustomAvailability.EditTimeBlock({
                newTimeBlockStartTime: this.newTimeBlockStartTime,
                newTimeBlockEndTime: this.newTimeBlockEndTime
            }));
            return EditTimeBlockDropdown.__super__.popup.apply(this, arguments);
        };

        return EditTimeBlockDropdown;

    })(RG.Views.Dialogs.Popover);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.ErrorList = (function (superClass) {
        extend(ErrorList, superClass);

        function ErrorList() {
            return ErrorList.__super__.constructor.apply(this, arguments);
        }

        ErrorList.prototype.template = templates.find('dialogs/error_list');

        ErrorList.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            return this.errors = options.errors;
        };

        ErrorList.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this._bindEvents();
            return this;
        };

        ErrorList.prototype.cancel = function (e) {
            e.preventDefault();
            this.trigger("close");
            return e.stopPropagation();
        };

        ErrorList.prototype._fillValues = function () {
            var attribute, element, error, errors, i, len, ref, text;
            element = this.$('.js-alert-error');
            text = [];
            ref = this.errors;
            for (attribute in ref) {
                errors = ref[attribute];
                text.push("<p>" + attribute + ":</p>");
                text.push("<ul>");
                for (i = 0, len = errors.length; i < len; i++) {
                    error = errors[i];
                    text.push("<li>" + error + "</li>");
                }
                text.push("</ul>");
            }
            return this.$(".js-alert-error").html(text.join(""));
        };

        ErrorList.prototype._bindEvents = function () {
            return this.$el.on("click", ".js-ok", (function (_this) {
                return function () {
                    return _this.trigger('close');
                };
            })(this));
        };

        return ErrorList;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.NewBookingDowntimePopover = (function (superClass) {
        extend(NewBookingDowntimePopover, superClass);

        function NewBookingDowntimePopover() {
            return NewBookingDowntimePopover.__super__.constructor.apply(this, arguments);
        }

        NewBookingDowntimePopover.prototype.template = templates.find('dialogs/new_booking_downtime_popover');

        NewBookingDowntimePopover.prototype.className = 'booking-dropdown js-booking-downtime-new';

        NewBookingDowntimePopover.prototype.events = {
            'click #new-booking': 'newBooking',
            'click #new-downtime': 'newDowntime'
        };

        NewBookingDowntimePopover.prototype.initialize = function (options) {
            this.newBookingOptions = options;
            this.cssClass = 'new-booking-time-off';
            this.permissions = options.permissions || RG.Utils.Permissions;
            return NewBookingDowntimePopover.__super__.initialize.apply(this, arguments);
        };

        NewBookingDowntimePopover.prototype.render = function () {
            this.$el.html(this.template());
            this.toggleActiveTab('booking');
            this._fillValues();
            this._applyPermissions();
            return this;
        };

        NewBookingDowntimePopover.prototype._fillValues = function () {
            var ref;
            NewBookingDowntimePopover.__super__._fillValues.apply(this, arguments);
            if (!((ref = this.newBookingOptions.resource) != null ? ref.isHuman() : void 0)) {
                return this.$(".js-time-off-text").text("New Downtime");
            }
        };

        NewBookingDowntimePopover.prototype._bindEvents = function () {
            return this.bodyView.on('change', (function (_this) {
                return function (dateRange) {
                    if (dateRange && dateRange.startDate && dateRange.endDate) {
                        _this.newBookingOptions.dateRange = dateRange;
                        return _this.newBookingOptions.changeCallback(dateRange);
                    }
                };
            })(this));
        };

        NewBookingDowntimePopover.prototype.remove = function () {
            var base;
            this.newBookingOptions.attachTo.remove();
            if (typeof (base = this.newBookingOptions).removeCallback === "function") {
                base.removeCallback();
            }
            return NewBookingDowntimePopover.__super__.remove.apply(this, arguments);
        };

        NewBookingDowntimePopover.prototype.popup = function () {
            this.bodyView = new RG.Views.Dialogs.NewBooking(this.newBookingOptions);
            return NewBookingDowntimePopover.__super__.popup.apply(this, arguments);
        };

        NewBookingDowntimePopover.prototype._getContentPanel = function () {
            return this.el.querySelector(".tabs-content");
        };

        NewBookingDowntimePopover.prototype.setBodyView = function (view, options) {
            if (options == null) {
                options = {
                    render: true
                };
            }
            NewBookingDowntimePopover.__super__.setBodyView.apply(this, arguments);
            return this._bindEvents();
        };

        NewBookingDowntimePopover.prototype.newBooking = function (e) {
            e.preventDefault();
            this.setBodyView(new RG.Views.Dialogs.NewBooking(this.newBookingOptions));
            return this.toggleActiveTab('booking');
        };

        NewBookingDowntimePopover.prototype.newDowntime = function (e) {
            var newDowntimeView, options, repositionFunc, resourceSelector;
            e.preventDefault();
            resourceSelector = new RG.Views.Factories.NameSearch(this.newBookingOptions.resources).create({
                showMenu: true,
                cssClass: 'js-downtime-resource-selector',
                resourceSelector: true
            });
            resourceSelector.on('displaySpinner', (function (_this) {
                return function () {
                    var spinner;
                    resourceSelector.overlay = new RG.Views.Dialogs.Overlay({
                        attachTo: _this.el,
                        className: "overlay",
                        template: function () {
                            return '';
                        }
                    });
                    resourceSelector.overlay.render();
                    return spinner = new Spinner(_this.spinnerOptions).spin(resourceSelector.overlay.el);
                };
            })(this));
            repositionFunc = (function (_this) {
                return function () {
                    return window.requestAnimationFrame(function () {
                        _this.setPosition();
                        return $(window).trigger('scroll');
                    });
                };
            })(this);
            resourceSelector.on('change:filter', repositionFunc);
            options = _.extend({
                resourceSelector: resourceSelector
            }, this.newBookingOptions);
            options.timeRange = new RG.Utils.TimeRange(0, 1440);
            newDowntimeView = new RG.Views.Dialogs.NewDowntime(options);
            newDowntimeView.on("validate", repositionFunc);
            this.setBodyView(newDowntimeView);
            return this.toggleActiveTab('downtime');
        };

        NewBookingDowntimePopover.prototype.toggleActiveTab = function (tab) {
            this.$('.tab-title').removeClass('active');
            this.$("." + tab + "-tab").addClass('active');
            return this.setPosition();
        };

        NewBookingDowntimePopover.prototype._applyPermissions = function () {
            if (!this.permissions.canAddDowntime()) {
                this.$(".downtime-tab").remove();
            }
            if (!this.permissions.canAddBooking()) {
                return window.requestAnimationFrame((function (_this) {
                    return function () {
                        _this.$(" #new-downtime").click();
                        return _this.$(".booking-tab").remove();
                    };
                })(this));
            }
        };

        return NewBookingDowntimePopover;

    })(RG.Views.Dialogs.Popover);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.NewClient = (function (superClass) {
        extend(NewClient, superClass);

        function NewClient() {
            return NewClient.__super__.constructor.apply(this, arguments);
        }

        NewClient.prototype.template = templates.find('dialogs/new_client');

        NewClient.prototype.events = {
            "submit form": "triggerAddClient",
            "click .add-client": "addClient",
            "click .cancel": "cancel"
        };

        NewClient.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            return this.colorPicker = options.colorPicker || new RG.Views.Selectors.ColorPicker;
        };

        NewClient.prototype.render = function () {
            this.$el.html(this.template());
            this.$('dl').append(this.colorPicker.render().el);
            requestAnimationFrame((function (_this) {
                return function () {
                    return _this.$el.find('input.client-name').focus();
                };
            })(this));
            return this;
        };

        NewClient.prototype.addClient = function () {
            var data;
            if (this._validate()) {
                data = {
                    name: this.$("input.client-name").val().trim(),
                    color: this.$('.color').val()
                };
                this.disableButtons();
                return $.ajax(RG.getApiRoot() + "/clients", {
                    method: "POST",
                    data: data,
                    dataType: 'json',
                    headers: {
                        "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')
                    },
                    success: (function (_this) {
                        return function (responseData) {
                            var client;
                            client = new RG.Models.Client({
                                id: responseData.id,
                                color: responseData.color,
                                name: responseData.name,
                                archived: responseData.archived,
                                notes: responseData.notes
                            });
                            window.clients.add(client);
                            return _this.trigger('close', client);
                        };
                    })(this),
                    error: (function (_this) {
                        return function (xhr) {
                            var errorText;
                            errorText = JSON.parse(xhr.responseText);
                            _this.enableButtons();
                            _this.addErrorMessageByStatusCode(xhr.status, errorText.name);
                            return _this.$("input.client-name").focus();
                        };
                    })(this)
                });
            }
        };

        NewClient.prototype.addErrorMessageByStatusCode = function (statusCode, errorMsg) {
            if (parseInt(statusCode, 10) === 403) {
                return this.$(".help-inline").addClass("error").text("Sorry, you don't have permission to do that.").removeClass('hide');
            } else {
                return this.$(".help-inline").addClass("error").text("Sorry, name " + errorMsg).removeClass('hide');
            }
        };

        NewClient.prototype.cancel = function (e) {
            e.cancelBubble = true;
            e.stopPropagation();
            this.trigger('cancelled');
            return this.trigger('close');
        };

        NewClient.prototype.remove = function () {
            this.off();
            this.$el.off();
            return NewClient.__super__.remove.apply(this, arguments);
        };

        NewClient.prototype.disableButtons = function () {
            this.$("footer button").attr("disabled", "disabled");
            return this.$("footer .js-add-client").text("Busy, please wait...");
        };

        NewClient.prototype.enableButtons = function () {
            this.$("footer .js-add-client").text("Add Client");
            return this.$("footer button").attr("disabled", null);
        };

        NewClient.prototype.triggerAddClient = function () {
            this.addClient();
            return false;
        };

        NewClient.prototype._validate = function () {
            if (this.$("input.client-name").val().trim().length === 0) {
                this.$("span.help-inline").addClass("error").text("Please enter a name").removeClass("hide");
                this.$("input.client-name").addClass("error");
                return false;
            } else {
                this.$("span.help-inline").text("").addClass("hide");
                this.$("input.client-name").removeClass("error");
                return true;
            }
        };

        return NewClient;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.NewProject = (function (superClass) {
        extend(NewProject, superClass);

        function NewProject() {
            return NewProject.__super__.constructor.apply(this, arguments);
        }

        NewProject.prototype.template = templates.find('dialogs/new_project');

        NewProject.prototype.events = {
            "submit form": "triggerAddProject",
            "click .add-project": "addProject",
            "click .cancel": "cancel",
            "click .chzn-single": "shrinkDropdown",
            "input input.project-name": "updateProjectCode"
        };

        NewProject.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.clients = options.clients;
            this.projectCodes = options.projectCodes;
            this.listenTo(this.clients, 'add', this._createClientsSelect);
            this.listenTo(this.clients, 'remove', this._createClientsSelect);
            this.listenTo(this.clients, 'add', this._selectClient);
            this.selectedClient = options.selectedClient;
            this.colorPicker = options.colorPicker || new RG.Views.Selectors.ColorPicker;
            this.billableChecked = true;
            return this.backpackErrorsFields = [
                {
                    mountpoint: '.project-code-error',
                    label: 'project_code'
                }, {
                    mountpoint: '.name-error',
                    label: 'name'
                }
            ];
        };

        NewProject.prototype.render = function () {
            this.$el.html(this.template());
            this._createClientsSelect();
            if (this.selectedClient) {
                this._selectClient(this.selectedClient);
                this.selectedClient = null;
            }
            this.$('dl').append(this.colorPicker.render().el);
            this._createSwitchComponent(this.billableChecked);
            this._createProjectCodeUpdater();
            requestAnimationFrame((function (_this) {
                return function () {
                    return _this.$el.find('input.project-name').focus();
                };
            })(this));
            return this;
        };

        NewProject.prototype.addProject = function () {
            var client, data;
            if (this._validate()) {
                client = this.clients.find((function (_this) {
                    return function (c) {
                        return c.cid === _this.selectBox.val();
                    };
                })(this));
                data = {
                    name: this.$("input.project-name").val().trim(),
                    project_code: this.$("input[name='project_code']").val().trim(),
                    color: this.$('.color').val(),
                    client_id: client != null ? client.id : void 0,
                    default_billable: this.billableChecked
                };
                this.disableButtons();
                return $.ajax(RG.getApiRoot() + "/projects", {
                    method: "POST",
                    data: data,
                    dataType: 'json',
                    headers: {
                        "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')
                    },
                    success: (function (_this) {
                        return function (responseData) {
                            var project;
                            project = new RG.Models.Project({
                                id: responseData.id,
                                name: responseData.name,
                                project_code: responseData.project_code,
                                archived: responseData.archived,
                                notes: responseData.notes,
                                client: client,
                                default_billable: responseData.default_billable
                            });
                            if (responseData.color) {
                                project.set('color', "#" + responseData.color);
                            }
                            window.projects.add(project);
                            return _this.trigger('close');
                        };
                    })(this),
                    error: (function (_this) {
                        return function (xhr) {
                            var errorData;
                            errorData = {};
                            if (parseInt(xhr.status, 10) === 403) {
                                errorData = {
                                    'name': ["Sorry, you don't have permission to do that."]
                                };
                            } else {
                                errorData = JSON.parse(xhr.responseText);
                            }
                            _this.enableButtons();
                            new RG.Utils.ErrorHandler(_this.el, _this.backpackErrorsFields, errorData).handleErrors();
                            return _this.$("input.project-name").focus();
                        };
                    })(this)
                });
            }
        };

        NewProject.prototype.cancel = function (e) {
            e.cancelBubble = true;
            e.stopPropagation();
            this.trigger('cancelled');
            return this.trigger('close');
        };

        NewProject.prototype.clearClientOrProject = function () {
            return this.selectBox.val("").trigger("liszt:updated");
        };

        NewProject.prototype.disableButtons = function () {
            this.$("footer button").attr("disabled", "disabled");
            return this.$("footer .js-add-project").text("Busy, please wait...");
        };

        NewProject.prototype.enableButtons = function () {
            this.$("footer .js-add-project").text("Add Project");
            return this.$("footer button").attr("disabled", null);
        };

        NewProject.prototype.triggerAddProject = function () {
            this.addProject();
            return false;
        };

        NewProject.prototype.remove = function () {
            var ref;
            this.off();
            this.$el.off();
            if ((ref = this.modal) != null) {
                ref.remove();
            }
            return NewProject.__super__.remove.apply(this, arguments);
        };

        NewProject.prototype._createClientsSelect = function () {
            this.selectBox = $("<select data-optional=\"true\" data-placeholder=\"Please select (optional)\" style='width: 234px'><option></option></select>");
            this.selectBox.change((function (_this) {
                return function () {
                    return _this._clientChanged();
                };
            })(this));
            this._fillClientSelect();
            this.$(".client-select-field").html(this.selectBox);
            return this.selectBox.chosen({
                allow_single_deselect: true
            });
        };

        NewProject.prototype._fillClientSelect = function () {
            var c, i, len, ref;
            this.selectBox.html('<option></option><option value=\"new-client\">New client...</option>');
            ref = this.clients.models;
            for (i = 0, len = ref.length; i < len; i++) {
                c = ref[i];
                if (!c.get('archived')) {
                    this.selectBox.append("<option value=\"" + c.cid + "\">" + (c.getName()) + "</option>");
                }
            }
            return this.selectBox.trigger("liszt:updated");
        };

        NewProject.prototype._clientChanged = function () {
            if (this.selectBox.val() === "new-client") {
                window.rgStorage.set('newProject', JSON.stringify({
                    name: this.$(".project-name").val(),
                    color: this.$('.color').val(),
                    project_code: this.$("input[name='project_code']").val()
                }));
                this.modal = new RG.Views.Dialogs.NewClient;
                this.modal.on('close', (function (_this) {
                    return function (client) {
                        _this.trigger('changeOverlay', _this, {
                            className: 'overlay client',
                            client: client
                        });
                        return _this._fillInPreviousValues();
                    };
                })(this), this);
                return this.trigger('changeOverlay', this.modal, {
                    className: 'overlay client',
                    newClient: true
                });
            }
        };

        NewProject.prototype._fillInPreviousValues = function () {
            var newProject;
            newProject = window.rgStorage.get('newProject');
            if (newProject) {
                newProject = $.parseJSON(newProject);
                $(".project-name").val(newProject.name);
                $("input[name='project_code']").val(newProject.project_code);
                $(".color").val(newProject.color);
                $(".selected-color").css("background-color", "#" + newProject.color);
                return window.rgStorage["delete"]('newProject');
            }
        };

        NewProject.prototype._validate = function () {
            if (this.$("input.project-name").val().trim().length === 0) {
                this.$("span.help-inline").addClass("error").text("Please enter a name").removeClass("hide");
                this.$("input.project-name").addClass("error");
                return false;
            } else {
                this.$("span.help-inline").text("").addClass("hide");
                this.$("input.project-name").removeClass("error");
                return true;
            }
        };

        NewProject.prototype._selectClient = function (client) {
            return this.selectBox.val(client.cid).trigger("liszt:updated");
        };

        NewProject.prototype._createSwitchComponent = function (isChecked) {
            var selected;
            selected = isChecked ? 'Billable' : 'Non-billable';
            return window.RGComponents.createSwitch(this.$(".booking-billable-control")[0], {
                name: 'booking-billable',
                id: 'booking-billable',
                mode: 'a-b',
                labelLeft: 'Billable',
                labelRight: 'Non-billable',
                left: 'Billable',
                right: 'Non-billable',
                selected: isChecked ? 'Billable' : 'Non-billable',
                onChange: (function (_this) {
                    return function (checked) {
                        return _this.billableChecked = checked === 'Billable' ? true : false;
                    };
                })(this)
            });
        };

        NewProject.prototype._createProjectCodeUpdater = function () {
            this.setName = RGComponents.createProjectCodesFormControl(this.$(".project-code-control")[0], {
                existing: this.projectCodes
            });
            return this.setName("");
        };

        NewProject.prototype.updateProjectCode = function (ev) {
            return this.setName(ev.currentTarget.value);
        };

        return NewProject;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.RemovedAvailabilityDates = (function (superClass) {
        extend(RemovedAvailabilityDates, superClass);

        function RemovedAvailabilityDates() {
            return RemovedAvailabilityDates.__super__.constructor.apply(this, arguments);
        }

        RemovedAvailabilityDates.prototype.template = templates.find('dialogs/removed_availability_dates');

        RemovedAvailabilityDates.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.resource = options.resource;
            return this.removedAvailabilityDates = options.removedAvailabilityDates;
        };

        RemovedAvailabilityDates.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this._bindEvents();
            return this;
        };

        RemovedAvailabilityDates.prototype.close = function (e) {
            RG.Popovers.locked = false;
            return this.trigger('close');
        };

        RemovedAvailabilityDates.prototype._bindEvents = function () {
            return this.$el.on("click", ".js-ok", (function (_this) {
                return function () {
                    return _this.close();
                };
            })(this));
        };

        RemovedAvailabilityDates.prototype._fillValues = function () {
            var text;
            text = [];
            if (!this.resource.isHuman()) {
                this.$('.js-warning-title').text("Downtime " + (this._pluralizeDays()) + " Skipped");
            } else {
                this.$('.js-warning-title').text("Non-working " + (this._pluralizeDays()) + " Skipped");
            }
            text.push("<p>Just a heads up, ");
            text.push("<strong class='booking-clash-resource-name'>" + (this.resource.escape('name')) + "</strong> has " + (this._timeOffOrDowntime()) + " on " + (this._pluralizeDates()));
            text.push("</p>");
            if (this.removedAvailabilityDates.length > 5) {
                text.push("<p class='has-margin-left'>... and " + (this.removedAvailabilityDates.length - 5) + " " + (this._pluralizeOther()) + "</p>");
            } else {
                text.push("</p>");
            }
            return this.$(".js-booking-non-working-dates-details").html(text.join(""));
        };

        RemovedAvailabilityDates.prototype._pluralizeDays = function () {
            if (this.removedAvailabilityDates.length > 1) {
                return 'Days';
            } else {
                return 'Day';
            }
        };

        RemovedAvailabilityDates.prototype._pluralizeDates = function () {
            var date;
            date = RG.Utils.BookingDataParser.getDateFromStr(this.removedAvailabilityDates[0]);
            if (this.removedAvailabilityDates.length > 1) {
                return "the following dates so they were skipped: <ul>" + (this._getRemovedAvailabilityDatesListItems()) + "</ul>";
            } else {
                return (RG.Utils.DateFormatter.getLongDateWithYear(date)) + ".";
            }
        };

        RemovedAvailabilityDates.prototype._pluralizeOther = function () {
            if ((this.removedAvailabilityDates.length - 5) > 1) {
                return 'others';
            } else {
                return 'other';
            }
        };

        RemovedAvailabilityDates.prototype._timeOffOrDowntime = function () {
            if (this.resource.isHuman()) {
                return 'time off';
            } else {
                return 'downtime';
            }
        };

        RemovedAvailabilityDates.prototype._getRemovedAvailabilityDates = function () {
            return _.map(this.removedAvailabilityDates, function (wd) {
                return RG.Utils.DateFormatter.getLongDateWithYear(RG.Utils.BookingMerger.getDateFromStr(wd));
            });
        };

        RemovedAvailabilityDates.prototype._getRemovedAvailabilityDatesListItems = function () {
            var dates, formattedDates, visibleDates;
            formattedDates = this._getRemovedAvailabilityDates();
            visibleDates = _.first(formattedDates, 5);
            dates = _.map(visibleDates, function (d) {
                return "<li>" + d + "</li>";
            });
            return dates.join("");
        };

        return RemovedAvailabilityDates;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.ResourceListPopover = (function (superClass) {
        extend(ResourceListPopover, superClass);

        function ResourceListPopover() {
            return ResourceListPopover.__super__.constructor.apply(this, arguments);
        }

        ResourceListPopover.prototype.className = 'resources-list-dropdown';

        ResourceListPopover.prototype._setOpenRight = function () {
            ResourceListPopover.__super__._setOpenRight.apply(this, arguments);
            return this.$el.css({
                left: 425
            });
        };

        ResourceListPopover.prototype._setOpenLeft = function () {
            ResourceListPopover.__super__._setOpenLeft.apply(this, arguments);
            return this.$el.css({
                left: 70
            });
        };

        ResourceListPopover.prototype._getOpenDirection = function () {
            var $window, offset, width, windowRight;
            $window = $(window);
            windowRight = $window.scrollLeft() + $window.width();
            offset = this.$el.offset();
            width = $(this.el.firstChild).outerWidth();
            if (this.openDirection === "left" || windowRight <= offset.left + width + 360) {
                return "left";
            } else {
                return "right";
            }
        };

        ResourceListPopover.prototype.setPosition = function () {
            var shadowArrow;
            ResourceListPopover.__super__.setPosition.apply(this, arguments);
            shadowArrow = this.$(".shadow-arrow");
            return shadowArrow.css({
                top: shadowArrow.position().top + 4
            });
        };

        return ResourceListPopover;

    })(RG.Views.Dialogs.Popover);

    RG.Views.Dialogs.ResourceList = (function (superClass) {
        extend(ResourceList, superClass);

        function ResourceList() {
            return ResourceList.__super__.constructor.apply(this, arguments);
        }

        ResourceList.prototype.tagName = 'main';

        ResourceList.prototype.render = function () {
            var i, len, ref, resource;
            while (this.el.firstChild) {
                this.el.removeChild(this.el.firstChild);
            }
            ref = this.collection.models;
            for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                this._renderResource(resource);
            }
            return this;
        };

        ResourceList.prototype._renderResource = function (resource) {
            var div, resourceAvatar;
            resourceAvatar = new RG.Views.Resource.Avatar({
                resource: resource
            });
            div = $(document.createElement("div")).addClass("resources-list__resource");
            div.append(resourceAvatar.render().el);
            div.append($(document.createElement("span")).addClass("resources-list__resource-name").text(resource.getName()));
            return this.$el.append(div);
        };

        return ResourceList;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.SingleBookingDetailsActions = (function (superClass) {
        extend(SingleBookingDetailsActions, superClass);

        function SingleBookingDetailsActions() {
            return SingleBookingDetailsActions.__super__.constructor.apply(this, arguments);
        }

        SingleBookingDetailsActions.prototype.tagName = 'ul';

        SingleBookingDetailsActions.prototype.className = 'booking-actions';

        SingleBookingDetailsActions.prototype.template = templates.find('dialogs/booking_details_single_actions');

        SingleBookingDetailsActions.prototype.initialize = function (options) {
            this.booking = options.booking;
            return this.bookingFormFactory = options.bookingFormFactory;
        };

        SingleBookingDetailsActions.prototype.deleteBooking = function () {
            RG.Popovers.clear();
            RG.Utils.BookingService.deleteBooking(this.booking, (function (_this) {
                return function () {
                    return _this.trigger('close');
                };
            })(this));
            return false;
        };

        SingleBookingDetailsActions.prototype.editBooking = function () {
            var view;
            view = this.bookingFormFactory.createEdit({
                booking: this.booking
            });
            this.trigger("changeView", view);
            return false;
        };

        SingleBookingDetailsActions.prototype.render = function () {
            this.$el.html(this.template());
            this._bindEvents();
            return this;
        };

        SingleBookingDetailsActions.prototype._bindEvents = function () {
            this.$el.on("click", "a#edit-booking", (function (_this) {
                return function () {
                    return _this.editBooking();
                };
            })(this));
            return this.$el.on("click", "a#delete-booking", (function (_this) {
                return function () {
                    return _this.deleteBooking();
                };
            })(this));
        };

        return SingleBookingDetailsActions;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.SplitBooking = (function (superClass) {
        extend(SplitBooking, superClass);

        function SplitBooking() {
            return SplitBooking.__super__.constructor.apply(this, arguments);
        }

        SplitBooking.prototype.className = 'calendar-split';

        SplitBooking.prototype.template = templates.find('dialogs/split_booking');

        SplitBooking.prototype.events = {
            "click #split-booking": "splitBooking",
            "click #cancel": "cancel"
        };

        SplitBooking.prototype.initialize = function (options) {
            this.booking = options.booking;
            return this.splitDate = options.splitDate;
        };

        SplitBooking.prototype.cancel = function () {
            return this.trigger('close');
        };

        SplitBooking.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        SplitBooking.prototype.popup = function () {
            this.render();
            return this.$el.modal();
        };

        SplitBooking.prototype.splitBooking = function () {
            var overlay;
            this._disableButtons();
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-booking-popover')[0]);
            RG.Utils.BookingService.split(this.booking, this.splitDate);
            overlay.remove();
            this.trigger('close');
            return false;
        };

        SplitBooking.prototype._disableButtons = function () {
            $("footer button").attr("disabled", "disabled");
            return $("footer #split-booking").text("Busy, please wait...");
        };

        SplitBooking.prototype._fillValues = function () {
            var dr, firstBlock, firstEnd, secondBlock;
            dr = this.booking.getDateRange();
            firstEnd = new Date(this.splitDate.getFullYear(), this.splitDate.getMonth(), this.splitDate.getDate() - 1);
            firstBlock = new RG.Utils.DateRange(dr.startDate, firstEnd);
            secondBlock = new RG.Utils.DateRange(this.splitDate, dr.endDate);
            this.$(".split.block1").text(firstBlock.toString());
            return this.$(".split.block2").text(secondBlock.toString());
        };

        return SplitBooking;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.SplitDowntime = (function (superClass) {
        extend(SplitDowntime, superClass);

        function SplitDowntime() {
            return SplitDowntime.__super__.constructor.apply(this, arguments);
        }

        SplitDowntime.prototype.className = 'calendar-split';

        SplitDowntime.prototype.template = templates.find('dialogs/split_downtime');

        SplitDowntime.prototype.events = {
            "click #split-downtime": "splitDowntime",
            "click #cancel": "cancel"
        };

        SplitDowntime.prototype.initialize = function (options) {
            this.account = options.account;
            this.resources = options.resources;
            this.downtime = options.downtime;
            return this.splitDate = options.splitDate;
        };

        SplitDowntime.prototype.cancel = function () {
            return this.trigger('close');
        };

        SplitDowntime.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        SplitDowntime.prototype.popup = function () {
            this.render();
            return this.$el.modal();
        };

        SplitDowntime.prototype.splitDowntime = function () {
            var overlay;
            this._disableButtons();
            overlay = RG.Utils.spinnerOverlay($(this.el).closest('.js-edit-downtime-popover')[0]);
            RG.Utils.DowntimeService.split(this.downtime, this.splitDate);
            overlay.remove();
            this.trigger('close');
            return false;
        };

        SplitDowntime.prototype._disableButtons = function () {
            $("footer button").attr("disabled", "disabled");
            return $("footer #split-booking").text("Busy, please wait...");
        };

        SplitDowntime.prototype._fillValues = function () {
            var dr, firstBlock, firstEnd, secondBlock;
            dr = this.downtime.getDateRange();
            firstEnd = new Date(this.splitDate.getFullYear(), this.splitDate.getMonth(), this.splitDate.getDate() - 1);
            firstBlock = new RG.Utils.DateRange(dr.startDate, firstEnd);
            secondBlock = new RG.Utils.DateRange(this.splitDate, dr.endDate);
            this.$(".split.block1").text(firstBlock.toString());
            this.$(".split.block2").text(secondBlock.toString());
            if (this._hasHumanResources()) {
                this.$(".js-title-downtime-type").text("Split this series of events into two blocks?");
                return this.$(".js-button-downtime-type").text("Time Off");
            }
        };

        SplitDowntime.prototype._hasHumanResources = function () {
            return this.resources.some(function (r) {
                return r.isHuman();
            });
        };

        return SplitDowntime;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.TagWrapper = (function (superClass) {
        extend(TagWrapper, superClass);

        function TagWrapper() {
            return TagWrapper.__super__.constructor.apply(this, arguments);
        }

        TagWrapper.prototype.initialize = function (options) {
            this.view = options.view;
            this.tagName = options.tagName;
            if (this.view) {
                this.view.on("all", (function (_this) {
                    return function () {
                        return _this.trigger.apply(_this, arguments);
                    };
                })(this));
                return this.el.appendChild(this.view.el);
            }
        };

        TagWrapper.prototype.render = function () {
            var ref;
            if ((ref = this.view) != null) {
                ref.render();
            }
            return this;
        };

        return TagWrapper;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Dialogs.WaitingListConfirmation = (function (superClass) {
        extend(WaitingListConfirmation, superClass);

        function WaitingListConfirmation() {
            return WaitingListConfirmation.__super__.constructor.apply(this, arguments);
        }

        WaitingListConfirmation.prototype.template = templates.find('dialogs/waiting_list_confirmation');

        WaitingListConfirmation.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.resource = options.resource;
            this.waitingDates = options.waitingDates;
            this.bookingDuration = options.duration;
            this.bookingStartTime = options.startTime;
            this.bookingStartDate = options.startDate;
            this.bookingEndDate = options.endDate;
            this.callback = options.callback;
            return this.cancelCallback = options.cancelCallback;
        };

        WaitingListConfirmation.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            this._bindEvents();
            return this;
        };

        WaitingListConfirmation.prototype.addWaiting = function () {
            RG.Popovers.locked = false;
            this.callback();
            this.cancelCallback = null;
            return this.trigger('addWaiting');
        };

        WaitingListConfirmation.prototype.cancel = function (e) {
            RG.Popovers.locked = false;
            if (this.cancelCallback) {
                this.cancelCallback();
            }
            return this.trigger('close');
        };

        WaitingListConfirmation.prototype._fillValues = function () {
            var text;
            text = [];
            text.push("<p>Sorry, ");
            text.push("<strong class='booking-clash-resource-name'>" + (this.resource.escape('name')) + "</strong> is not available for that amount of time on " + (this._pluralizeSelectedDates()) + ".");
            if (!RG.Utils.DateComparator.equalsYMD(this.bookingStartDate, this.bookingEndDate)) {
                text.push(" Clashes include:");
                text.push("</p>");
                text.push("<ul>" + (this._getWaitingDatesListItems()) + "</ul>");
                if (this.waitingDates.length > 5) {
                    text.push("<p class='has-margin-left'>... and " + (this.waitingDates.length - 5) + " " + (this._pluralizeOther()) + "</p>");
                }
                text.push(this._goAhead());
                $(".add-waiting").text("Add To Waiting List Where Time Unavailable");
            } else {
                text.push(this._goAhead());
                text.push("</p>");
            }
            return this.$(".js-booking-clash-details").html(text.join(""));
        };

        WaitingListConfirmation.prototype._pluralizeSelectedDates = function () {
            if (RG.Utils.DateComparator.equalsYMD(this.bookingStartDate, this.bookingEndDate)) {
                return "" + (RG.Utils.DateFormatter.getLongDateWithYear(this.bookingStartDate));
            } else {
                return 'all the dates selected';
            }
        };

        WaitingListConfirmation.prototype._pluralizeOther = function () {
            if (this._shouldPluralize()) {
                return 'others';
            } else {
                return 'other';
            }
        };

        WaitingListConfirmation.prototype._pluralizeClashes = function () {
            if (this.waitingDates.length > 1) {
                return 'any clashes';
            } else {
                return 'the clash';
            }
        };

        WaitingListConfirmation.prototype._shouldPluralize = function () {
            return (this.waitingDates.length - 5) > 1;
        };

        WaitingListConfirmation.prototype._goAhead = function () {
            return "<p class='has-margin-top'>You can still go ahead with your booking and add " + (this._pluralizeClashes()) + " to the waiting list.</p>";
        };

        WaitingListConfirmation.prototype._bindEvents = function () {
            this.$el.on("click", ".cancel", (function (_this) {
                return function () {
                    return _this.cancel();
                };
            })(this));
            return this.$el.on("click", ".add-waiting", (function (_this) {
                return function () {
                    return _this.addWaiting();
                };
            })(this));
        };

        WaitingListConfirmation.prototype._getBookingDateRange = function () {
            return (RG.Utils.DateFormatter.getLongDateWithYear(this.bookingStartDate)) + " and " + (RG.Utils.DateFormatter.getLongDateWithYear(this.bookingEndDate));
        };

        WaitingListConfirmation.prototype._getWaitingDates = function () {
            return _.map(this.waitingDates, function (wd) {
                return RG.Utils.DateFormatter.getLongDateWithYear(RG.Utils.BookingMerger.getDateFromStr(wd));
            });
        };

        WaitingListConfirmation.prototype._getWaitingDatesListItems = function () {
            var dates, formattedDates, visibleDates;
            formattedDates = this._getWaitingDates();
            visibleDates = _.first(formattedDates, 5);
            dates = _.map(visibleDates, function (d) {
                return "<li>" + d + "</li>";
            });
            return dates.join("");
        };

        return WaitingListConfirmation;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Downtimes.ResourceSelector = (function (superClass) {
        extend(ResourceSelector, superClass);

        function ResourceSelector() {
            this._handleFilter = bind(this._handleFilter, this);
            this._handleSelected = bind(this._handleSelected, this);
            return ResourceSelector.__super__.constructor.apply(this, arguments);
        }

        ResourceSelector.prototype.tagName = "div";

        ResourceSelector.prototype.className = "downtime-resource-selector";

        ResourceSelector.prototype.initialize = function (options) {
            this.resources = options.resources;
            this.selected = options.selected || [];
            this.itemClassName = options.itemClassName;
            this.groupClassName = options.groupClassName;
            return this.onChange = options.onChange;
        };

        ResourceSelector.prototype.render = function () {
            this.clear();
            this.selector = window.RGComponents.createMultiselect(this.el, {
                onSelected: this._handleSelected,
                options: this.resources.toArray(),
                placeholder: '',
                selected: this.selected,
                mapper: function (resource) {
                    return resource.get('name');
                },
                groupBy: function (resource) {
                    return resource.get('resourceType').get('name');
                },
                groupBySorter: function (a, b) {
                    if (a === 'Person') {
                        return -1;
                    }
                    if (b === 'Person') {
                        return 1;
                    }
                    return a.localeCompare(b);
                },
                useAggressiveHandler: true,
                itemClassName: this.itemClassName,
                groupClassName: this.groupClassName
            });
            this.filter = window.RGComponents.createResourceFilter(this.el, {
                onSelected: this._handleFilter,
                className: 'multiselect-downtime-filter',
                useAggressiveHandler: true
            });
            return this;
        };

        ResourceSelector.prototype._handleSelected = function (selected) {
            this.selected = selected;
            return this.onChange(selected);
        };

        ResourceSelector.prototype._handleFilter = function (selected) {
            switch (selected) {
                case 'filtered':
                    this.selected = this.resources.filter(function (r) {
                        return r.visible && r.isBookable();
                    });
                    break;
                case 'people':
                    this.selected = this.resources.filter(function (r) {
                        return r.get('resourceType').get('name') === 'Person' && r.isBookable();
                    });
                    break;
                case 'all':
                    this.selected = this.resources.toArray();
                    break;
                case 'none':
                    this.selected = [];
            }
            this.onChange();
            return this.render();
        };

        ResourceSelector.prototype.getResourceIds = function () {
            return this.selected.map(function (resource) {
                return resource.id;
            });
        };

        ResourceSelector.prototype.setFilters = function () { };

        ResourceSelector.prototype.validate = function () {
            return true;
        };

        ResourceSelector.prototype.searchBlur = function () { };

        ResourceSelector.prototype.getSelectedOptions = ResourceSelector.getResourceIds;

        ResourceSelector.prototype.clear = function () {
            var ref, ref1;
            if ((ref = this.selector) != null) {
                ref.destroy();
            }
            return (ref1 = this.filter) != null ? ref1.destroy() : void 0;
        };

        ResourceSelector.prototype.remove = function () {
            return this.clear();
        };

        return ResourceSelector;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Downtimes.Resources = (function (superClass) {
        extend(Resources, superClass);

        function Resources() {
            return Resources.__super__.constructor.apply(this, arguments);
        }

        Resources.prototype.tagName = "span";

        Resources.prototype.className = "downtime-resource";

        Resources.prototype.events = {
            'click .js-expand-resources': 'expandTruncatedResources'
        };

        Resources.prototype.initialize = function (options) {
            this.resources = options.resources;
            return this.truncate = options.truncate === void 0 ? true : options.truncate;
        };

        Resources.prototype.render = function () {
            while (this.el.firstChild) {
                this.el.removeChild(this.el.firstChild);
            }
            this._renderResources();
            return this;
        };

        Resources.prototype.expandTruncatedResources = function (e) {
            if (this.resourcesPopover == null) {
                this.resourcesPopover = new RG.Views.Dialogs.ResourceListPopover({
                    attachTo: this.$(".js-expand-resources")
                });
            }
            this.resourcesPopover.setBodyView(new RG.Views.Dialogs.ResourceList({
                collection: new RG.Collections.ResourceInstances(this.resources)
            }));
            RG.Popovers.nest(this.resourcesPopover);
            this.resourcesPopover.popup();
            return e.stopPropagation();
        };

        Resources.prototype._renderResources = function () {
            var i, j, len, len1, ref, ref1, resource, resourceNameElement, results;
            if (this.resources.length > 8 && this.truncate) {
                ref = this.resources.slice(0, 9);
                for (i = 0, len = ref.length; i < len; i++) {
                    resource = ref[i];
                    this._renderResource(resource);
                }
                return this._renderTruncatedResourceText();
            } else if (this.resources.length === 1) {
                if (this.resources[0].hasAvatar()) {
                    this._renderResource(this.resources[0]);
                }
                resourceNameElement = $(document.createElement("span")).addClass("resource-name");
                return this.$el.append(resourceNameElement.text(this.resources[0].get('name')));
            } else {
                ref1 = this.resources;
                results = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    resource = ref1[j];
                    results.push(this._renderResource(resource));
                }
                return results;
            }
        };

        Resources.prototype._renderResource = function (resource) {
            var resourceAvatar;
            resourceAvatar = new RG.Views.Resource.Avatar({
                resource: resource
            });
            return this.$el.append(resourceAvatar.render().el);
        };

        Resources.prototype._renderTruncatedResourceText = function () {
            if (this.resources.length > 9) {
                return this.$el.append("<a class=\"js-expand-resources expand-resources-link\">and " + (this.resources.length - 9) + " more</a>");
            }
        };

        return Resources;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.Categories = (function (superClass) {
        extend(Categories, superClass);

        function Categories() {
            return Categories.__super__.constructor.apply(this, arguments);
        }

        Categories.prototype.className = "filter__categories";

        Categories.prototype.events = {
            "click .filter__category": "toggleCategory"
        };

        Categories.prototype.addItem = function (model) {
            var view;
            view = Categories.__super__.addItem.apply(this, arguments);
            return view.on("change:filter", (function (_this) {
                return function () {
                    return _this.trigger("change:filter", _this.getSelectedOptions());
                };
            })(this));
        };

        Categories.prototype.clearSelection = function () {
            var cid, ref, results, view;
            ref = this.collectionViews;
            results = [];
            for (cid in ref) {
                view = ref[cid];
                results.push(view.clearSelection());
            }
            return results;
        };

        Categories.prototype.createItemView = function (options) {
            return new RG.Views.Filters.Category({
                category: options.model
            });
        };

        Categories.prototype.getFilters = function () {
            return _.flatten(_.map(this.collectionViews, function (view) {
                return view.getFilters();
            }));
        };

        Categories.prototype.getSelectedOptions = function () {
            return _.flatten(_.map(this.collectionViews, function (v) {
                return v.getSelectedOptions();
            }));
        };

        Categories.prototype.resetFlyouts = function () {
            return this.$(".filter__category").removeClass("is-active");
        };

        Categories.prototype.setFilters = function (filters) {
            var cid, ref, results, view;
            this.clearSelection();
            ref = this.collectionViews;
            results = [];
            for (cid in ref) {
                view = ref[cid];
                results.push(view.setFilters(filters));
            }
            return results;
        };

        Categories.prototype.toggleCategory = function (e) {
            var $filterContainerEl, $filterEl, $originalTarget, $target, isOpen;
            RG.closeSelectedOptions();
            $target = this.$(e.currentTarget);
            $originalTarget = this.$(e.target);
            if ($originalTarget.closest(".filter__category__filters").length > 0) {
                return;
            }
            isOpen = $target.hasClass("is-active");
            this.resetFlyouts();
            $target.toggleClass("is-active", !isOpen);
            $filterEl = $target.find(".filter__category__filters");
            $filterEl.css({
                width: ""
            });
            $filterContainerEl = $filterEl.find("> div");
            $filterContainerEl.css({
                "overflow-y": "",
                "height": "",
                "width": ""
            });
            if ($(window).height() < $filterContainerEl.offset().top + $filterContainerEl.height() - $(window).scrollTop()) {
                $filterContainerEl.outerHeight($(window).height() - $filterContainerEl.offset().top - 25 + $(window).scrollTop()).css({
                    "overflow-y": "scroll"
                });
                $filterContainerEl.width($filterContainerEl.width() + 10);
                $filterEl.width($filterEl.width() + 10);
            }
            this.$(".filter__options-control .select2-search-field:first-child input.select2-input").width("295px");
            return false;
        };

        return Categories;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.Category = (function (superClass) {
        extend(Category, superClass);

        function Category() {
            this._triggerChange = bind(this._triggerChange, this);
            return Category.__super__.constructor.apply(this, arguments);
        }

        Category.prototype.template = templates.find('filters/category');

        Category.prototype.className = "filter__category";

        Category.prototype.events = {
            "click .filter__clear": "clearSelection",
            "click .filter__category__filters": "clearInputs"
        };

        Category.prototype.clearSelection = function () {
            var ref, ref1;
            if ((ref = $(".match-type-select.select2-container-active")) != null) {
                if ((ref1 = ref.data('select2')) != null) {
                    ref1.close();
                }
            }
            this.filterCategoryOptionsView.off("change:filter", this._triggerChange);
            this.filterCategoryOptionsView.clearSelection();
            this.filterCategoryOptionsView.on("change:filter", this._triggerChange);
            this.trigger("change:filter");
            return false;
        };

        Category.prototype.clearInputs = function (e) {
            return RG.Utils.select2Close();
        };

        Category.prototype.getFilters = function () {
            return this.filterCategoryOptionsView.getFilters();
        };

        Category.prototype.getSelectedOptions = function () {
            var ref;
            return ((ref = this.filterCategoryOptionsView) != null ? ref.getSelectedOptions() : void 0) || [];
        };

        Category.prototype.initialize = function (options) {
            this.category = options.category;
            return this.on("change:filter", this.refreshSelectedOptionsView, this);
        };

        Category.prototype.refreshSelectedOptionsView = function () {
            var options;
            options = this.getSelectedOptions();
            this.selectedOptionsView.setSelectedOptions(options);
            return this.$(".filter__clear").toggle(options.length > 0);
        };

        Category.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        Category.prototype.setFilters = function (filters) {
            return this.filterCategoryOptionsView.setFilters(filters);
        };

        Category.prototype.showOptionsFlyout = function () {
            return this.$el.addClass("is-active");
        };

        Category.prototype.hideOptionsFlyout = function () {
            return this.$el.removeClass("is-active");
        };

        Category.prototype._getFilterCategoryOptionsElement = function () {
            return this.$(".filter__category__filters");
        };

        Category.prototype._getSelectedOptionsElement = function () {
            return this.$(".filter__category--selected-options");
        };

        Category.prototype._fillValues = function () {
            this.$(".filter__category--name").text(this.category.get('name'));
            this.filterCategoryOptionsView = new RG.Views.Filters.CategoryOptions({
                category: this.category
            });
            this.filterCategoryOptionsView.on("change:filter", this._triggerChange);
            this.selectedOptionsView = new RG.Views.Filters.SelectedOptions();
            this._getSelectedOptionsElement().replaceWith(this.selectedOptionsView.render().el);
            this.refreshSelectedOptionsView();
            return this._getFilterCategoryOptionsElement().replaceWith(this.filterCategoryOptionsView.render().el);
        };

        Category.prototype._triggerChange = function () {
            return this.trigger("change:filter", this.getSelectedOptions());
        };

        return Category;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.CategoryOptions = (function (superClass) {
        extend(CategoryOptions, superClass);

        function CategoryOptions() {
            return CategoryOptions.__super__.constructor.apply(this, arguments);
        }

        CategoryOptions.prototype.template = templates.find('filters/category_options');

        CategoryOptions.prototype.className = 'filter__category__filters';

        CategoryOptions.prototype.events = {
            "click .filter__options--all": "toggleSelectAll"
        };

        CategoryOptions.prototype.clearSelection = function () {
            this.filterOptionGroupsView.clearSelection();
            if (this._selectAllOption) {
                return this.toggleSelectAll();
            }
        };

        CategoryOptions.prototype.getFilters = function () {
            var options;
            options = _.map(this.filterOptionGroupsView.collectionViews, function (view) {
                return view.getOptions();
            });
            if (!this._selectAllOption) {
                return {
                    categoryName: this.category.getName(),
                    options: options
                };
            } else {
                return {
                    categoryName: this.category.getName(),
                    mode: "all",
                    options: options
                };
            }
        };

        CategoryOptions.prototype.getSelectedOptions = function () {
            var ref;
            if (!this._selectAllOption) {
                return (ref = this.filterOptionGroupsView) != null ? ref.getSelectedOptions() : void 0;
            } else {
                return [
                    {
                        matchType: "all",
                        resourceType: this.category.get('tag')
                    }
                ];
            }
        };

        CategoryOptions.prototype.initialize = function (options) {
            this._selectAllOption = false;
            return this.category = options.category;
        };

        CategoryOptions.prototype.render = function () {
            this.$el.html(this.template({
                tooltip: this._mustRenderTooltip()
            }));
            this._fillValues();
            this.$('.filter__info-tooltip').tooltip();
            return this;
        };

        CategoryOptions.prototype.setFilters = function (filters) {
            var cid, filter, i, len, results, view;
            results = [];
            for (i = 0, len = filters.length; i < len; i++) {
                filter = filters[i];
                if (this.category.get('name') === filter.categoryName) {
                    if (filter.mode === "all") {
                        this._selectAllOption = false;
                        results.push(this.toggleSelectAll());
                    } else {
                        if (this._selectAllOption) {
                            this.toggleSelectAll();
                        }
                        results.push((function () {
                            var ref, results1;
                            ref = this.filterOptionGroupsView.collectionViews;
                            results1 = [];
                            for (cid in ref) {
                                view = ref[cid];
                                results1.push(view.setFilters(filters));
                            }
                            return results1;
                        }).call(this));
                    }
                }
            }
            return results;
        };

        CategoryOptions.prototype.toggleSelectAll = function (e) {
            this._selectAllOption = !this._selectAllOption;
            this.filterOptionGroupsView.$el.toggle(!this._selectAllOption);
            this._getResetSpan().toggle(this._selectAllOption);
            this._getSelectAllSpan().toggle(!this._selectAllOption);
            this.$el.toggleClass("is-select-all", this._selectAllOption);
            return this.trigger("change:filter", this.getSelectedOptions());
        };

        CategoryOptions.prototype._fillValues = function () {
            this.$("h3").text(this.category.getName());
            this.filterOptionGroupsView = new RG.Views.Filters.OptionGroups({
                category_type: this.category.getName(),
                collection: this.category.optionGroups
            });
            this.filterOptionGroupsView.on("change:filter", (function (_this) {
                return function (e) {
                    return _this.trigger("change:filter", _this.getSelectedOptions());
                };
            })(this));
            this._getFilterOptionsElement().replaceWith(this.filterOptionGroupsView.render().el);
            return this.$(".filter__options--all").toggle(this._mustRenderAllToggle());
        };

        CategoryOptions.prototype._getFilterOptionsElement = function () {
            return this.$(".filter__options");
        };

        CategoryOptions.prototype._getResetSpan = function () {
            return this.$(".reset-select-all-filters");
        };

        CategoryOptions.prototype._getSelectAllSpan = function () {
            return this.$(".select-all-filters");
        };

        CategoryOptions.prototype._mustRenderAllToggle = function () {
            return ["Projects", "Clients"].indexOf(this.category.getName()) === -1;
        };

        CategoryOptions.prototype._mustRenderTooltip = function () {
            return ["Projects", "Clients"].indexOf(this.category.getName()) === -1;
        };

        return CategoryOptions;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.OptionGroups = (function (superClass) {
        extend(OptionGroups, superClass);

        function OptionGroups(options) {
            OptionGroups.__super__.constructor.apply(this, arguments);
            this.category_type = options.category_type;
        }

        OptionGroups.prototype.createItemView = function (options) {
            return new RG.Views.Filters.OptionGroup({
                optionGroup: options.model
            });
        };

        OptionGroups.prototype.addItem = function (model) {
            var view;
            view = OptionGroups.__super__.addItem.apply(this, arguments);
            return view.on("change:filter", (function (_this) {
                return function (e) {
                    return _this.trigger("change:filter", _this.getSelectedOptions());
                };
            })(this));
        };

        OptionGroups.prototype.clearSelection = function () {
            var cid, ref, results, view;
            ref = this.collectionViews;
            results = [];
            for (cid in ref) {
                view = ref[cid];
                results.push(view.clearSelection());
            }
            return results;
        };

        OptionGroups.prototype.getSelectedOptions = function () {
            return _.compact(_.flatten(_.map(this.collectionViews, function (v) {
                return v.getSelectedOptions();
            })));
        };

        return OptionGroups;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.SavedFilter = (function (superClass) {
        extend(SavedFilter, superClass);

        function SavedFilter() {
            this._handleInputKeyDown = bind(this._handleInputKeyDown, this);
            return SavedFilter.__super__.constructor.apply(this, arguments);
        }

        SavedFilter.prototype.template = templates.find('filters/saved_filter');

        SavedFilter.prototype.className = "filter__saved-filter";

        SavedFilter.prototype.events = {
            "click": "activateFilter",
            "click .delete-filter": "deleteFilter",
            "click .rename-filter": "enableRename",
            "click .save-rename-filter": "_saveRename",
            "blur .filter__saved-filter-input": "_saveRename",
            "keypress": "_handleInputKeyDown"
        };

        SavedFilter.prototype.initialize = function (options) {
            this.savedFilter = options.savedFilter;
            return this.listenTo(this.savedFilter, "change", this.render);
        };

        SavedFilter.prototype.activateFilter = function (e) {
            var ref, ref1;
            if ((ref = $(".match-type-select.select2-container-active")) != null) {
                if ((ref1 = ref.data('select2')) != null) {
                    ref1.close();
                }
            }
            this.trigger("activate:filter", this.savedFilter);
            return false;
        };

        SavedFilter.prototype.addActiveState = function () {
            return this.$el.addClass("is-active");
        };

        SavedFilter.prototype.deleteFilter = function (e) {
            var ref, ref1;
            if ((ref = $(".match-type-select.select2-container-active")) != null) {
                if ((ref1 = ref.data('select2')) != null) {
                    ref1.close();
                }
            }
            this.savedFilter.destroy();
            return false;
        };

        SavedFilter.prototype.disableRename = function () {
            setTimeout((function (_this) {
                return function () {
                    return $(document).off("keyup", _this._handleInputKeyDown);
                };
            })(this), 100);
            this.$(".filter__saved-filter-name").show();
            this.$(".filter__saved-filter-input").hide();
            this.$(".save-rename-filter").hide();
            this.$(".rename-filter").show();
            return this.$el.removeClass("is-editing");
        };

        SavedFilter.prototype.enableRename = function () {
            var ref, ref1;
            $(document).on("keyup", this._handleInputKeyDown);
            if ((ref = $(".match-type-select.select2-container-active")) != null) {
                if ((ref1 = ref.data('select2')) != null) {
                    ref1.close();
                }
            }
            this.$(".filter__saved-filter-input").show().focus().select();
            this.$(".filter__saved-filter-name").hide();
            this.$(".save-rename-filter").show();
            this.$(".rename-filter").hide();
            return this.$el.addClass("is-editing");
        };

        SavedFilter.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        SavedFilter.prototype._fillValues = function () {
            this.$(".filter__saved-filter-name").text(this.savedFilter.get('name'));
            return this.$(".filter__saved-filter-input").val(this.savedFilter.get('name'));
        };

        SavedFilter.prototype._getName = function () {
            return this.$(".filter__saved-filter-input").val();
        };

        SavedFilter.prototype._handleInputKeyDown = function (e) {
            if (e.keyCode === 13) {
                return this._saveRename();
            } else if (e.keyCode === 27) {
                return this._cancelRename();
            }
        };

        SavedFilter.prototype._saveRename = function () {
            return setTimeout((function (_this) {
                return function () {
                    var isDuplicate;
                    isDuplicate = window.savedFilters.any(function (sf) {
                        var ref;
                        return ((ref = sf.get('name')) != null ? ref.toLowerCase() : void 0) === _this._getName().toLowerCase();
                    });
                    if (_this._getName().length > 0 && !isDuplicate) {
                        if (_this.savedFilter.get('name') !== _this._getName()) {
                            _this.savedFilter.set('name', _this._getName());
                            _this.savedFilter.save();
                        }
                        return _this.disableRename();
                    } else {
                        return _this._cancelRename();
                    }
                };
            })(this), 100);
        };

        SavedFilter.prototype._cancelRename = function () {
            this.$el.removeClass("is-editing");
            return this.render();
        };

        return SavedFilter;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.SavedFilters = (function (superClass) {
        extend(SavedFilters, superClass);

        function SavedFilters() {
            return SavedFilters.__super__.constructor.apply(this, arguments);
        }

        SavedFilters.prototype.className = "filter__saved-filter-list";

        SavedFilters.prototype.initialize = function (options) {
            SavedFilters.__super__.initialize.apply(this, arguments);
            return this.listenTo(this.collection, "sort", (function (_this) {
                return function () {
                    return _this.render();
                };
            })(this));
        };

        SavedFilters.prototype.activateFilter = function (savedFilter) {
            return this.collectionViews[savedFilter.cid].activateFilter();
        };

        SavedFilters.prototype.createItemView = function (options) {
            var lastActiveFilterId, view;
            view = new RG.Views.Filters.SavedFilter({
                savedFilter: options.model
            });
            view.on("activate:filter", (function (_this) {
                return function (savedFilter) {
                    _this.trigger("activate:filter", savedFilter);
                    _this.removeActiveState();
                    return view.addActiveState();
                };
            })(this));
            lastActiveFilterId = window.rgStorage.get('lastActiveFilterId');
            if (lastActiveFilterId && parseInt(lastActiveFilterId, 10) === options.model.id) {
                view.addActiveState();
            }
            return view;
        };

        SavedFilters.prototype.removeActiveState = function () {
            return this.$(".is-active").removeClass("is-active");
        };

        return SavedFilters;

    })(RG.Support.SortedCollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Filters.SelectedOptions = (function (superClass) {
        extend(SelectedOptions, superClass);

        function SelectedOptions() {
            return SelectedOptions.__super__.constructor.apply(this, arguments);
        }

        SelectedOptions.prototype.template = templates.find('filters/selected_options_summary');

        SelectedOptions.prototype.selectedAllTemplate = templates.find('filters/selected_options_summary_all');

        SelectedOptions.prototype.className = "filter__category--selected-options";

        SelectedOptions.prototype.initialize = function () {
            return this.ast = [];
        };

        SelectedOptions.prototype.render = function () {
            if (this._hasSelectedAll()) {
                this.$el.html(this.selectedAllTemplate());
            } else {
                this.$el.html(this.template({
                    collection: this._createViewModel()
                }));
            }
            return this;
        };

        SelectedOptions.prototype.setSelectedOptions = function (ast) {
            this.ast = ast;
            return this.render();
        };

        SelectedOptions.prototype._createViewModel = function () {
            return _.map(this.ast, function (group) {
                return {
                    name: group.optionGroup.get('name'),
                    matchType: group.matchType,
                    selectedOptions: _.map(group.selectedOptions, function (x) {
                        return x.get('name');
                    }).join("&nbsp;|&nbsp;")
                };
            });
        };

        SelectedOptions.prototype._hasSelectedAll = function () {
            return this.ast.length > 0 && this.ast[0].matchType === "all" && !this.ast[0].selectedOptions;
        };

        return SelectedOptions;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.AvailableMinutes = (function (superClass) {
        extend(AvailableMinutes, superClass);

        function AvailableMinutes() {
            return AvailableMinutes.__super__.constructor.apply(this, arguments);
        }

        AvailableMinutes.prototype.className = 'time-available';

        AvailableMinutes.prototype.initialize = function (options) {
            return this.availableMinutes = options.availableMinutes;
        };

        AvailableMinutes.prototype.render = function () {
            var availableFormatted;
            availableFormatted = RG.Utils.TimeFormatter.formatMinutes(this.availableMinutes);
            //this.el.innerHTML = availableFormatted + "<div class=\"time-available-linebreak\"></div>free";
            return this;
        };

        return AvailableMinutes;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Avatar = (function (superClass) {
        extend(Avatar, superClass);

        function Avatar() {
            return Avatar.__super__.constructor.apply(this, arguments);
        }

        Avatar.prototype.tagName = "span";

        Avatar.prototype.className = "booking-avatar";

        Avatar.prototype.initialize = function (options) {
            return this.resource = options.resource;
        };

        Avatar.prototype.render = function () {
            var avatarTag;
            avatarTag = this._avatarTag();
            avatarTag.attr('title', this.resource.get('name'));
            this.$el.append(avatarTag);
            return this;
        };

        Avatar.prototype._avatarTag = function () {
            if (this.resource.hasAvatar()) {
                return $(document.createElement('img')).attr('src', this.resource.get('imageUrl'));
            }
            return $(document.createElement('span')).addClass("resource-initials").text(this.resource.getInitials());
        };

        return Avatar;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Booking = (function (superClass) {
        extend(Booking, superClass);

        function Booking() {
            return Booking.__super__.constructor.apply(this, arguments);
        }

        Booking.prototype.className = 'booking';

        Booking.prototype.events = {
            'click': 'showDetailsPopup',
            'mousemove': 'showAvailability',
            'mouseenter': 'applyHover',
            'mouseleave': 'removeHover'
        };

        Booking.prototype.initialize = function (options) {
            var ref, ref1;
            this.availability = options.availability;
            this.unit = options.unit;
            this.waiting = options.waiting;
            this.bookingFormFactory = options.bookingFormFactory;
            this.currentUserId = this.bookingFormFactory.currentUserId;
            this.prevHoverDate = null;
            this._colorSource = options.colorSource;
            this._dateController = options.dateController;
            this.resource = (ref = this.model.realBooking) != null ? (ref1 = ref.collection) != null ? ref1.resource : void 0 : void 0;
        };

        Booking.prototype._ensureElement = function () {
            var el;
            if (!this.el) {
                el = document.createElement("div");
                el.className = this.className;
                this.el = el;
            }
            this.$el = $(this.el);
            return this.delegateEvents();
        };

        Booking.prototype.id = function () {
            if (this.model.id) {
                return this.model.cid;
            } else {
                return this.model.getDraggingId();
            }
        };

        Booking.prototype.applyHover = function (e) {
            this.prevHoverDate = null;
            $("#calendar .booking[data-booking-id=" + this.model.id + "]").addClass('hover');
            window.requestAnimationFrame((function (_this) {
                return function () {
                    return _this.el.classList.add('hover');
                };
            })(this));
            this._attachEvents();
        };

        Booking.prototype.hideAvailability = function (e) {
            this.timeUnitUnderlayElement.removeClass('hover');
        };

        Booking.prototype.showAvailability = function (e) {
            var duration, element;
            duration = this._getUnitDurationAtOffset(e.pageX - this.$el.offset().left);
            if (duration && this.prevHoverDate !== duration.get('date')) {
                this.prevHoverDate = duration.get('date');
                if (!this.model.collection || !this.model.collection.resource) {
                    return;
                }
                element = document.querySelector("#" + (RG.Utils.generateTimeUnitId(this.model.collection.resource.cid, duration.attributes.date)));
                RG.setHoverElement(element);
            }
        };

        Booking.prototype.removeHover = function () {
            $("#calendar .booking[data-booking-id=" + this.model.id + "]").removeClass('hover');
        };

        Booking.prototype.remove = function () {
            var ref;
            if ((ref = this.durationBlocksView) != null) {
                ref.remove();
            }
            Booking.__super__.remove.apply(this, arguments);
        };

        Booking.prototype.render = function () {
            this._fillValues();
            return this;
        };

        Booking.prototype.showDetailsPopup = function (e) {
            var bookingAnchor, factory, placer, selectedDuration;
            if (!this.model.id || this.isInInteraction) {
                return;
            }
            RG.Popovers.clear();
            placer = new RG.Utils.BookingPopoverPlacer(e);
            bookingAnchor = placer.createAnchor({
                className: 'booking-detail-anchor'
            });
            selectedDuration = this.getDurationAtOffset(e.pageX - $(this.el).offset().left);
            factory = new RG.Views.Dialogs.BookingPopoverFactory({
                bookingFormFactory: this.bookingFormFactory,
                popoverType: 'details',
                booking: this.model.realBooking,
                duration: selectedDuration,
                bookingAnchor: bookingAnchor
            });
            RG.Popovers.set(factory.popover());
        };

        Booking.prototype._attachEvents = function () {
            if (this.hasAttachedEvents) {
                return;
            }
            if (RG.Utils.Permissions.canManage(this.model)) {
                this._attachDragAndDrop();
            }
            if (RG.Utils.Permissions.canManage(this.model) && !this.waiting && !this.model.get('saving')) {
                this._attachResizable();
            }
            this.hasAttachedEvents = true;
        };

        Booking.prototype._detachEvents = function () {
            var ref, ref1;
            if ((ref = this.dragDrop) != null) {
                ref.detach();
            }
            if ((ref1 = this.resize) != null) {
                ref1.detach();
            }
            this.dragDrop = null;
            this.resize = null;
        };

        Booking.prototype._attachDragAndDrop = function () {
            if (!this.dragDrop) {
                this.dragDrop = new RG.Interactions.DragDropBooking(this);
                this.dragDrop.attach();
            }
        };

        Booking.prototype._attachResizable = function () {
            if (!this.resize) {
                this.resize = new RG.Interactions.ResizeBooking(this);
                this.resize.attach();
            }
        };

        Booking.prototype.getDurationAtOffset = function (offset) {
            var unitDuration;
            unitDuration = this._getUnitDurationAtOffset(offset);
            if (unitDuration) {
                return this.model.durations.find(function (d) {
                    return RG.Utils.DateComparator.equalsYMD(d.attributes.date, unitDuration.attributes.date);
                });
            } else {
                if (offset < 0) {
                    return (this._unitDurations.filter(function (d) {
                        return d.get("minutes") !== 0;
                    }))[0];
                }
                offset = offset - RG.getUnitWidth();
                return this.getDurationAtOffset(offset);
            }
        };

        Booking.prototype._getUnitDurationAtOffset = function (offset) {
            return this._unitDurations[Math.floor(offset / RG.getUnitWidth())];
        };

        Booking.prototype._fillValues = function () {
            this._setOwnerFlag();
            this._setDurations();
            this._setCaptions();
            this._setIdAttribute();
            this.resizeWidth();
            this._setStickyClass();
        };

        Booking.prototype._getLabelTopPosition = function () {
            var lineCount;
            lineCount = Math.ceil(this.model.getFirstNonZeroDuration().getMinutes() / this.unit.getMinutesPerUtilisationLine());
            return (lineCount * 6) + 2;
        };

        Booking.prototype._isTransientInvalidated = function () {
            return this.model.transient && this.model.getDateRange().startDate.valueOf() > this._dateController._startDate().valueOf();
        };

        Booking.prototype.rerenderIfOverExtends = function () {
            if (this._isTransientInvalidated()) {
                this.remove();
            }
            this.resizeWidth();
            this._setDurations();
        };

        Booking.prototype.resizeWidth = function () {
            var dateRange, getNumberOfDays, lastDate, width;
            dateRange = this.model.transient ? this.model.realBooking.getDateRange() : this.model.getDateRange();
            lastDate = this._dateController._endDate();
            if (dateRange.endDate.getTime() > lastDate.getTime()) {
                dateRange.endDate = lastDate;
                this.el.classList.add("no-end");
            } else {
                this.el.classList.remove("no-end");
            }
            if (this.model.transient) {
                dateRange.startDate = this._dateController._startDate();
                this.el.classList.add("no-begin");
            }
            getNumberOfDays = dateRange.getNumberOfDays();
            width = ((RG.getUnitWidth() * getNumberOfDays / this.unit.getDaysPerUnit()) + 1) + "px";
            this.el.style.width = width;
        };

        Booking.prototype._getCaptionElements = function () {
            var dailyLabel, detailedLabel, labelTop, refreshableImage, savingElement;
            refreshableImage = "";
            savingElement = "";
            if (this.model.get('refreshable')) {
                refreshableImage = '<img src="/assets/flag-detailed.png"></img>';
            }
            if (this.model.get('saving')) {
                savingElement = this._getSpinnerElement();
            }
            labelTop = this._getLabelTopPosition() + "px";
            dailyLabel = document.createElement("div");
            dailyLabel.className = "label daily";
            dailyLabel.style.top = labelTop;
            dailyLabel.innerHTML = [savingElement, refreshableImage, this.model.getCaption()].join("");
            detailedLabel = document.createElement("div");
            detailedLabel.className = "label detailed";
            detailedLabel.style.top = labelTop;
            detailedLabel.innerHTML = [savingElement, refreshableImage, this.model.getLongCaption()].join("");
            return [detailedLabel, dailyLabel];
        };

        Booking.prototype._getSpinnerElement = function () {
            return '<img src="/assets/calendar/ajax-loader.gif">';
        };

        Booking.prototype._getBookingResource = function () {
            return this.resource;
        };

        Booking.prototype._removeOldCaptions = function () {
            var i, label, len, ref, ref1;
            ref = this.el.querySelectorAll(".label");
            for (i = 0, len = ref.length; i < len; i++) {
                label = ref[i];
                if ((ref1 = label.parentElement) != null) {
                    ref1.removeChild(label);
                }
            }
        };

        Booking.prototype._setColor = function () {
            var color;
            color = this._colorSource.getColorForBooking(this.model);
            this._unitDurations.forEach(function (d) {
                return d.attributes.color = color;
            });
            this.$el.css("border-color", color.getBorderColor());
            this.$el.css("background-color", color.getBackgroundColor());
            this.$el.css("color", color.getTextColor());
        };

        Booking.prototype.resetColor = function () {
            this._setColor();
            return this._renderDurations();
        };

        Booking.prototype._setCaptions = function () {
            var element, i, len, ref;
            this._removeOldCaptions();
            this.el.setAttribute("title", _.unescape(this.model.getTitleCaption()));
            ref = this._getCaptionElements();
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                this.el.appendChild(element);
            }
        };

        Booking.prototype._setDurations = function () {
            var bookingDateRange, converter, durations, firstDate, lastDate;
            converter = new RG.Utils.UnitDurationConverter(this.unit.constructor);
            durations = this.model.durations.models;
            bookingDateRange = this.model.getDateRange();
            firstDate = bookingDateRange.startDate;
            lastDate = _.min([this._dateController._endDate(), bookingDateRange.endDate], function (d) {
                return d;
            });
            if (this.model.transient) {
                firstDate = this._dateController._startDate();
            }
            this._unitDurations = converter.convertArray(durations, firstDate, lastDate);
            this.resetColor();
        };

        Booking.prototype._renderDurations = function () {
            var blocksEl, ref;
            if ((ref = this.durationBlocksView) != null) {
                ref.remove();
            }
            blocksEl = document.createElement("div");
            blocksEl.className = "blocks";
            this.durationBlocksView = new RG.Views.Resource.UnitDurationBlocks({
                collection: this._unitDurations,
                unit: this.unit
            });
            this.durationBlocksView.el = blocksEl;
            this.durationBlocksView.render();
            if (blocksEl.parentNode !== this.el) {
                this.el.appendChild(blocksEl);
            }
        };

        Booking.prototype._setIdAttribute = function () {
            this.el.setAttribute('data-booking-id', this.model.id);
        };

        Booking.prototype._setOwnerFlag = function () {
            var ref;
            if (((ref = this.model.get('booker')) != null ? ref.id : void 0) === this.currentUserId) {
                this.el.classList.add("mine");
            }
        };

        Booking.prototype._setStickyClass = function () {
            if (!this.model.singleDayBooking()) {
                this.el.classList.add('sticky');
            }
        };

        Booking.prototype._stopPropagation = function (e) {
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        };

        return Booking;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.TimeUnit = (function (superClass) {
        extend(TimeUnit, superClass);

        function TimeUnit() {
            return TimeUnit.__super__.constructor.apply(this, arguments);
        }

        TimeUnit.prototype.className = 'resources--cal-unit';

        TimeUnit.prototype.events = {
            "mouseenter": "showAvailability"
        };

        TimeUnit.prototype.baseUtilisationHeight = 14;

        TimeUnit.prototype.utilLineMultiplier = 11;

        TimeUnit.prototype._ensureElement = function () {
            var el;
            if (!this.el) {
                el = document.createElement("div");
                el.className = this.className;
                this.el = el;
            }
            this.$el = $(this.el);
            return this.delegateEvents();
        };

        TimeUnit.prototype.initialize = function (options) {
            this._waitingListViews = [];
            this.resource = options.resource;
            this._bookingFormDialogFactory = options.bookingFormDialogFactory;
            this._downtimeFormDialogFactory = options.downtimeFormDialogFactory;
            this.colorSource = options.colorSource;
            this.dateController = options.dateController;
            this.currentDate = options.currentDate || new RG.Models.CurrentDate(RG.Utils.getTodayISO());
            this.availabilityToggle = options.availabilityToggle;
            this.resourceLine = options.resourceLine;
            this.renderedBookings = {};
        };

        TimeUnit.prototype.resetColor = function () {
            if (this._bookingsView) {
                this._bookingsView.resetColor();
            }
            return this._waitingListViews.forEach(function (view) {
                return view.resetColor();
            });
        };

        TimeUnit.prototype.refreshInRange = function (range) {
            if (range.overlapsWith(this.model.getDateRange())) {
                return this.rerender();
            }
        };

        TimeUnit.prototype.bookingChanged = function (booking) {
            var originalBooking;
            if (!booking) {
                return;
            }
            if (this.model.getDateRange().overlapsWith(booking.getSavedDateRange()) || this.model.getDateRange().overlapsWith(new RG.Models.Booking(booking.previousAttributes()).getSavedDateRange())) {
                originalBooking = this.renderedBookings[booking.id];
                if (originalBooking && originalBooking.deepEqual(booking)) {
                    return;
                }
                return this.rerender();
            }
        };

        TimeUnit.prototype.resizeTimeAllocationWidths = function () {
            if (this._bookingsView) {
                this._bookingsView.resizeWidth();
            }
            return this._waitingListViews.forEach(function (view) {
                return view.resizeWidth();
            });
        };

        TimeUnit.prototype.rerenderIfTimeAllocationsOverextend = function () {
            if (this._bookingsView) {
                this._bookingsView.rerenderIfOverExtends();
            }
            return this._waitingListViews.forEach(function (view) {
                return view.rerenderIfOverExtends();
            });
        };

        TimeUnit.prototype.remove = function () {
            this.clearSubviews();
            this.undelegateEvents();
            this.stopListening();
            return TimeUnit.__super__.remove.apply(this, arguments);
        };

        TimeUnit.prototype.clearSubviews = function () {
            var ref, ref1;
            if ((ref = this._availableMinutesView) != null) {
                ref.remove();
            }
            if ((ref1 = this._utilisationView) != null) {
                ref1.remove();
            }
            this._removeExistingDowntimesView();
            this._removeExistingBookingsView();
            this._removeExistingWaitingListView();
        };

        TimeUnit.prototype.render = function () {
            RG.backburner.deferOnce('render', this, this._render);
            RG.backburner.debounce('renderCheck', RG.Utils.renderChecker, 500);
            return this;
        };

        TimeUnit.prototype.rerender = function () {
            this.render();
            return this.rerenderIfTimeAllocationsOverextend();
        };

        TimeUnit.prototype._getDate = function () {
            return RG.Utils.BookingDataParser.getDateFromStr(this.currentDate.date);
        };

        TimeUnit.prototype._render = function () {
            if (this.isRendered) {
                this.clearSubviews();
            }
            if (RG.Utils.DateComparator.equalsYMD(this.model.date, this._getDate())) {
                this.el.className = 'resources--cal-unit current';
            } else {
                this.el.className = 'resources--cal-unit';
            }
            this.bookingsEl = document.createElement("div");
            this.bookingsEl.className = "bookings";
            this.utilisationEl = document.createElement("div");
            this.utilisationEl.className = "utilisation";
            this.availableMinutesEl = document.createElement("div");
            this.availableMinutesEl.className = "time-available";
            this._setId();
            this._renderBookings();
            this.renderUtilisationAndAvailableMinutes();
            this._renderWaitingList();
            this._setAvailability();
            this._setDateAttribute();
            this.appendChildElements();
            RG.Utils.delayResizeCards();
            this.isRendered = true;
            return this;
        };

        TimeUnit.prototype.appendChildElements = function () {
            if (this.availabilityToggle.shouldRenderUtilisation()) {
                this.el.appendChild(this.utilisationEl);
                if (this.bookingsEl.firstChild) {
                    this.el.appendChild(this.bookingsEl);
                }
            } else {
                if (this.bookingsEl.firstChild) {
                    this.el.appendChild(this.bookingsEl);
                }
                this.el.appendChild(this.availableMinutesEl);
            }
        };

        TimeUnit.prototype.renderUtilisationAndAvailableMinutes = function () {
            if (this.availabilityToggle.shouldRenderUtilisation()) {
                this.renderUtilisation();
            } else {
                this.renderAvailableMinutes();
            }
        };

        TimeUnit.prototype._reRenderBookings = function () {
            if (this.model.containsDate(this.dateController._startDate())) {
                this.render();
            }
        };

        TimeUnit.prototype.showAvailability = function (e) {
            RG.setHoverElement(this.el);
        };

        TimeUnit.prototype._addAnchorDuration = function (booking, durations) {
            var duration;
            duration = new RG.Models.Duration({
                date: this.model.date,
                minutes: 0,
                waiting: false
            });
            duration.collection = booking.durations;
            durations.unshift(duration);
            return durations;
        };

        TimeUnit.prototype._calcDurationsForUnit = function () {
            var b, bookings, d, durations, i, j, len, len1, noDurationForDate, ref;
            bookings = this.resource.bookings.forDate(this.model.date);
            durations = [];
            for (i = 0, len = bookings.length; i < len; i++) {
                b = bookings[i];
                noDurationForDate = true;
                ref = b.durations.models;
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    d = ref[j];
                    if (this.model.containsDate(d.attributes.date)) {
                        noDurationForDate = false;
                        durations.push(d);
                    }
                }
                if (noDurationForDate) {
                    this._addAnchorDuration(b, durations);
                }
            }
            return durations;
        };

        TimeUnit.prototype._getBookingDurationsForUnit = function () {
            if (this._durationsForUnit) {
                return this._durationsForUnit;
            }
            return this._durationsForUnit = this._calcDurationsForUnit();
        };

        TimeUnit.prototype._getEarlierStartedBookings = function () {
            var b, bookings, dateController, earlierBookings, eb, i, len, rangeDurations, startDate;
            dateController = this.dateController;
            earlierBookings = [];
            startDate = dateController._startDate();
            bookings = this.resource.bookings.overlapsDate(startDate);
            for (i = 0, len = bookings.length; i < len; i++) {
                b = bookings[i];
                rangeDurations = b.durations.betweenDates(startDate, dateController._endDate());
                if (rangeDurations.length) {
                    eb = b.clone();
                    eb.layer = b.layer;
                    eb.realBooking = b;
                    eb.transient = true;
                    eb.durations.reset(rangeDurations);
                    eb.collection = {
                        resource: this.resource,
                        remove: function () { }
                    };
                    earlierBookings.push(eb);
                }
            }
            return earlierBookings;
        };

        TimeUnit.prototype._getBookingsForUnit = function () {
            var bookings, earlierBookings;
            earlierBookings = [];
            if (this.model.containsDate(this.dateController._startDate())) {
                earlierBookings = this._getEarlierStartedBookings();
            }
            bookings = this.resource.bookings.startsOnDate(this.model.date);
            return new RG.Collections.Bookings([].concat(earlierBookings, bookings));
        };

        TimeUnit.prototype._getDowntimeDurationsForUnit = function () {
            return this.resource.downtimes.durationsForDateInTimeZone(this.model.date, this.resource.get('timeZone'));
        };

        TimeUnit.prototype._renderBookings = function () {
            var allDurations, bookingAnchorCount, bookingDurations, dayBookings, dayDowntimes, dayTimeAllocations, downtimeDurations;
            this._durationsForUnit = null;
            this._drawnBookings = dayBookings = this._getBookingsForUnit();
            bookingDurations = this._getBookingDurationsForUnit();
            downtimeDurations = this._getDowntimeDurationsForUnit();
            this._drawnDowntimes = dayDowntimes = this._getDowntimesForUnit();
            allDurations = [].concat(downtimeDurations, bookingDurations);
            bookingAnchorCount = this._getBookingAnchorCount(allDurations);
            dayTimeAllocations = [].concat(dayBookings.models, dayDowntimes.models);
            this.renderedBookings = {};
            dayTimeAllocations.forEach((function (_this) {
                return function (b) {
                    return _this.renderedBookings[b.id] = b.deepClone();
                };
            })(this));
            if (allDurations.length || dayBookings.length) {
                this._bookingsView = new RG.Views.Resource.TimeAllocations({
                    dateController: this.dateController,
                    bookingFormDialogFactory: this._bookingFormDialogFactory,
                    downtimeFormDialogFactory: this._downtimeFormDialogFactory,
                    bookingAnchorCount: bookingAnchorCount,
                    timeAllocations: dayTimeAllocations,
                    unit: this.model,
                    availability: this.resource.availability,
                    colorSource: this.colorSource,
                    el: this.bookingsEl
                });
                this._bookingsView.render();
            }
        };

        TimeUnit.prototype._getBookingAnchorCount = function (durations) {
            var anyConfirmedDurations, anyRenderedBooking, confirmedDrawnBookings, duration, earlierBookingCount, i, layer, len, maxLayer, minLayer, ref;
            maxLayer = 0;
            anyConfirmedDurations = false;
            anyRenderedBooking = false;
            earlierBookingCount = this._earlierStartedBookingCount();
            for (i = 0, len = durations.length; i < len; i++) {
                duration = durations[i];
                layer = duration.getLayer();
                if (layer > maxLayer) {
                    maxLayer = layer;
                }
                if (!anyConfirmedDurations) {
                    anyConfirmedDurations = duration.isConfirmed();
                }
                if (!anyRenderedBooking) {
                    anyRenderedBooking = !((ref = duration.collection) != null ? ref.booking.isExclusivelyOnWaitingList() : void 0);
                }
            }
            minLayer = anyRenderedBooking ? maxLayer : earlierBookingCount - 1;
            maxLayer = maxLayer > minLayer ? maxLayer : minLayer;
            confirmedDrawnBookings = this._drawnBookings.filter(function (b) {
                return b.durations.length && b.durations.models[0].isConfirmed();
            });
            if (confirmedDrawnBookings.length || anyConfirmedDurations || anyRenderedBooking) {
                return maxLayer + 1;
            } else {
                return minLayer;
            }
        };

        TimeUnit.prototype._getEarlierStartedDowntimes = function () {
            var dateController, downtimes;
            dateController = this.dateController;
            downtimes = this.resource.downtimes.overlapsDateInTimeZone(dateController._startDate(), this.resource.get('timeZone'));
            return this._cloneDowntimes(downtimes);
        };

        TimeUnit.prototype._earlierStartedBookingCount = function () {
            var bookings;
            bookings = this._getEarlierStartedBookings();
            return bookings.filter(function (booking) {
                return !booking.isExclusivelyOnWaitingList();
            }).length;
        };

        TimeUnit.prototype._cloneDowntimes = function (downtimes, transient) {
            var d, dTimes, ed, i, len;
            if (transient == null) {
                transient = true;
            }
            dTimes = [];
            for (i = 0, len = downtimes.length; i < len; i++) {
                d = downtimes[i];
                ed = d.inTimeZone(this.resource.get('timeZone'));
                ed.layer = d.layer;
                ed.realBooking = d;
                ed.transient = transient;
                ed.firstDate = this.dateController._startDate();
                ed.collection = {
                    resource: this.resource,
                    remove: function () { }
                };
                dTimes.push(ed);
            }
            return dTimes;
        };

        TimeUnit.prototype._getDowntimesForUnit = function () {
            var downtimes, earlierDowntimes;
            earlierDowntimes = [];
            if (this.model.containsDate(this.dateController._startDate())) {
                earlierDowntimes = this._getEarlierStartedDowntimes();
            }
            downtimes = this.resource.downtimes.startsOnDateInTimeZone(this.model.date, this.resource.get('timeZone'));
            this._downtimes = new RG.Collections.Downtimes;
            this._downtimes.models = earlierDowntimes.concat(this._cloneDowntimes(downtimes, false));
            this._downtimes.length = this._downtimes.models.length;
            this._downtimes.resource = this.resource;
            return this._downtimes;
        };

        TimeUnit.prototype.resetUtilisationHeight = function () {
            return RG.backburner.deferOnce('render', this, this._resetUtilisationHeight);
        };

        TimeUnit.prototype._resetUtilisationHeight = function () {
            var height, minsAvailable;
            if (this._utilisationView) {
                minsAvailable = this.resource.availability.getMaxMinutesInUnit(this._visibleDateRange());
                height = this._calculateUtilisationHeight(minsAvailable);
                return this._utilisationView.resetUtilisationHeight(height);
            }
        };

        TimeUnit.prototype.renderAvailableMinutes = function () {
            var minsAvailable, usedMinutes;
            usedMinutes = this._getUsedMinutes();
            minsAvailable = this.resource.availability.getMinutesAvailableForDate(this.model.date);
            this._availableMinutesView = new RG.Views.Resource.AvailableMinutes({
                availableMinutes: minsAvailable - usedMinutes,
                el: this.availableMinutesEl
            });
            this._availableMinutesView.render();
        };

        TimeUnit.prototype._calculateUtilisationHeight = function (minsAvailable) {
            return this.baseUtilisationHeight + (this._getNumberOfUtilisationLines(minsAvailable)) * this.utilLineMultiplier;
        };

        TimeUnit.prototype._getNumberOfUtilisationLines = function (minsAvailable) {
            return Math.ceil(minsAvailable / this.model.getMinutesPerUtilisationLine());
        };

        TimeUnit.prototype.renderUtilisation = function () {
            var availableMinutes, height, minsAvailable, overtimeMinutes, usedMinutes;
            usedMinutes = this._getUsedMinutes();
            minsAvailable = this.resource.availability.getMaxMinutesInUnit(this._visibleDateRange());
            availableMinutes = this.resource.availability.getMinutesAvailableForDate(this.model.date);
            overtimeMinutes = this.resource.availability.getOvertimeMinutesInDateRange(this.model.getDateRange());
            height = this._calculateUtilisationHeight(minsAvailable);
            this._utilisationView = new RG.Views.Resource.UtilisationBlock({
                usedMinutes: usedMinutes,
                availableMinutes: availableMinutes,
                overtimeMinutes: overtimeMinutes,
                minutesPerLine: this.model.getMinutesPerUtilisationLine(),
                height: height,
                el: this.utilisationEl
            });
            this._utilisationView.render();
        };

        TimeUnit.prototype._getUsedMinutes = function () {
            var converter, d, durations, i, len, ref;
            durations = [];
            ref = this._getBookingDurationsForUnit();
            for (i = 0, len = ref.length; i < len; i++) {
                d = ref[i];
                if (d.isConfirmed()) {
                    durations.push(d);
                }
            }
            converter = new RG.Utils.UnitDurationConverter(null, null);
            return converter.getDurationMinutesInUnit(durations, this.model);
        };

        TimeUnit.prototype._renderWaitingList = function () {
            var anchor, booking, d, fragment, i, j, len, len1, ref, view, waitingDuration, waitingDurations, waitingEl;
            waitingDurations = [];
            ref = this._getBookingDurationsForUnit();
            for (i = 0, len = ref.length; i < len; i++) {
                d = ref[i];
                if (d.isWaiting()) {
                    waitingDurations.push(d);
                }
            }
            if (waitingDurations.length > 0) {
                fragment = document.createDocumentFragment();
                waitingEl = document.createElement("div");
                waitingEl.className = "waitlist-anchor";
                waitingEl.innerHTML = '<div class="waitlist" title="Waiting List"><div class="blocks"><div class="unit"></div></div></div>';
                fragment.appendChild(waitingEl);
                waitingDurations.sort(function (a, b) {
                    return a.get('startTime') - b.get('startTime');
                });
                for (j = 0, len1 = waitingDurations.length; j < len1; j++) {
                    d = waitingDurations[j];
                    if (!(d.getMinutes() > 0)) {
                        continue;
                    }
                    anchor = document.createElement("div");
                    anchor.className = "booking-anchor waitlist";
                    booking = d.collection.booking.clone();
                    booking.realBooking = d.collection.booking;
                    booking.listenTo(booking.realBooking, "change", function () {
                        return booking.set(booking.realBooking.attributes);
                    });
                    waitingDuration = d.clone();
                    waitingDuration.set({
                        waiting: false
                    });
                    booking.durations.reset([waitingDuration]);
                    booking.collection = {
                        resource: this.resource,
                        remove: function () { }
                    };
                    view = new RG.Views.Resource.Booking({
                        dateController: this.dateController,
                        bookingFormFactory: this._bookingFormDialogFactory,
                        unit: this.model,
                        colorSource: this.colorSource,
                        model: booking,
                        waiting: true
                    });
                    anchor.appendChild(view.render().el);
                    fragment.appendChild(anchor);
                    this._waitingListViews.push(view);
                }
                this.bookingsEl.appendChild(fragment);
            }
        };

        TimeUnit.prototype._removeExistingBookingsView = function () {
            if (this._bookingsView) {
                this._bookingsView.remove();
            }
        };

        TimeUnit.prototype._removeExistingDowntimesView = function () {
            if (this._downtimesView) {
                this._downtimesView.remove();
            }
        };

        TimeUnit.prototype._removeExistingWaitingListView = function () {
            var i, len, ref, view;
            if (this._waitingListViews.length) {
                ref = this._waitingListViews;
                for (i = 0, len = ref.length; i < len; i++) {
                    view = ref[i];
                    view.remove();
                }
                this._waitingListViews.length = 0;
            }
        };

        TimeUnit.prototype._setAvailability = function () {
            var day;
            day = this.model.date.getDay();
            if (day === 0 || day === 6) {
                this.el.classList.add('unavailable');
            }
        };

        TimeUnit.prototype._setDateAttribute = function () {
            this.el.setAttribute('data-date', RG.Utils.DateFormatter.getISODate(this.model.date));
        };

        TimeUnit.prototype._setId = function () {
            this.el.setAttribute('id', RG.Utils.generateTimeUnitId(this.resource.cid, this.model.date));
        };

        TimeUnit.prototype._setBookingsContents = function (element) {
            this.el.insertBefore(element, this.bookingsEl);
            this.el.removeChild(this.bookingsEl);
            this.bookingsEl = element;
        };

        TimeUnit.prototype._visibleDateRange = function () {
            return new RG.Utils.DateRange(this.dateController._startDate(), this.dateController._endDate());
        };

        return TimeUnit;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Card = (function (superClass) {
        extend(Card, superClass);

        function Card() {
            return Card.__super__.constructor.apply(this, arguments);
        }

        Card.prototype.template = templates.find('resource/card');

        Card.prototype.className = 'resource';

        Card.prototype.events = {
            'click .activity-name': 'alertActivityClick'
        };

        Card.prototype.initialize = function () {
            this.listenTo(this.model, 'change', this._fillValues);
        };

        Card.prototype.render = function () {
            window.requestAnimationFrame((function (_this) {
                return function () {
                    _this.el.innerHTML = _this.template();
                    _this.el.setAttribute('data-resource-id', _this.model.cid);
                    _this._fillValues();
                };
            })(this));
            return this;
        };


        Card.prototype.alertActivityClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var elem = $(e.currentTarget);
            var activityId = elem.attr('data-activity-id');
            window.alert("Clicking activity name - " + activityId + "");
            return true;
        };

        Card.prototype._fillValues = function () {
            window.requestAnimationFrame((function (_this) {
                return function () {
                    var tz, userTimeZone;
                    _this.el.querySelector("h3").innerHTML = _this.model.escape('name');
                    _this.el.querySelector("h4").innerHTML = _this.model.escape('type');
                    userTimeZone = window.currentUserTimeZone.replace(/&amp;/g, '&');
                    tz = _this.model.getDisplayTimeZone();
                    if (tz.get('name') !== userTimeZone) {
                        _this.el.querySelector("p.timezone").innerHTML = tz.toString();
                    }
                    _this.el.querySelector("img").setAttribute("src", _this.model.get("imageUrl"));
                    _this.el.querySelector("img").setAttribute("data-activity-id", _this.model.get("id"));
                };
            })(this));
        };

        return Card;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Cards = (function (superClass) {
        extend(Cards, superClass);

        function Cards() {
            return Cards.__super__.constructor.apply(this, arguments);
        }

        Cards.prototype.tagName = 'aside';

        Cards.prototype.itemView = RG.Views.Resource.Card;

        Cards.prototype.render = function () {
            RG.backburner.deferOnce('render', this, this._render);
            return this;
        };

        Cards.prototype.createItemView = function (options) {
            var view;
            view = Cards.__super__.createItemView.apply(this, arguments);
            view.$el.toggleClass('hide', !options.model.visible);
            return view;
        };

        return Cards;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Downtime = (function (superClass) {
        extend(Downtime, superClass);

        function Downtime() {
            return Downtime.__super__.constructor.apply(this, arguments);
        }

        Downtime.prototype.className = 'booking downtime';

        Downtime.prototype.initialize = function (options) {
            var ref;
            this.availability = options.availability;
            this.unit = options.unit;
            this.waiting = options.waiting;
            this.downtimeFormFactory = options.downtimeFormFactory;
            this.currentUserId = this.downtimeFormFactory.currentUserId;
            this.prevHoverDate = null;
            this._colorSource = options.colorSource;
            this._dateController = options.dateController;
            this.resource = (ref = this.model.collection) != null ? ref.resource : void 0;
        };

        Downtime.prototype.render = function () {
            this._fillValues();
            $(".sprite-spinner", this.el).each(function () {
                var s;
                s = {};
                if ($(this).closest(".detailed").length === 0) {
                    s = new SpriteSpinner(this, {
                        diameter: 12,
                        interval: 50
                    });
                } else {
                    s = new SpriteSpinner(this, {
                        diameter: 18,
                        interval: 50
                    });
                }
                return s.start();
            });
            this._ensureSpinnerStop();
            return this;
        };

        Downtime.prototype.resetColor = function () { };

        Downtime.prototype._ensureSpinnerStop = function () {
            return Q.delay(1000).then((function (_this) {
                return function () {
                    var realDowntime;
                    realDowntime = window.downtimes.findWhere({
                        id: _this.model.id
                    });
                    if (_this.model.get('saving')) {
                        if (!realDowntime.get('saving')) {
                            _this.model.set({
                                saving: false
                            });
                        } else {
                            _this._ensureSpinnerStop();
                        }
                    }
                };
            })(this));
        };

        Downtime.prototype.showDetailsPopup = function (e) {
            var date, downtime, downtimeAnchor, duration, factory, placer, selectedDuration, timeRange;
            if (this.model.id) {
                downtime = this.model.realBooking;
                this._stopPropagation(e);
                RG.Popovers.clear();
                placer = new RG.Utils.BookingPopoverPlacer(e);
                downtimeAnchor = placer.createAnchor({
                    className: 'downtime-detail-anchor'
                });
                selectedDuration = this.getDurationAtOffset(e.pageX - $(this.el).offset().left);
                date = selectedDuration.get('date');
                timeRange = downtime.getTimeRange(date);
                duration = this.model.realBooking.getDurations().filter(function (d) {
                    return RG.Utils.DateComparator.equalsYMD(d.getDate(), date);
                })[0];
                factory = new RG.Views.Dialogs.DowntimePopoverFactory({
                    downtimeFormFactory: this.downtimeFormFactory,
                    popoverType: 'details',
                    downtime: downtime,
                    duration: duration,
                    downtimeAnchor: downtimeAnchor
                });
                RG.Popovers.set(factory.popover());
            }
        };

        Downtime.prototype.getDurationAtOffset = function (offset) {
            var unitDuration;
            unitDuration = this._getUnitDurationAtOffset(offset);
            if (unitDuration) {
                return this._unitDurations.find(function (d) {
                    return RG.Utils.DateComparator.equalsYMD(d.attributes.date, unitDuration.attributes.date);
                });
            } else {
                if (offset < 0) {
                    return (this._unitDurations.filter(function (d) {
                        return d.get("minutes") !== 0;
                    }))[0];
                }
                offset = offset - RG.getUnitWidth();
                return this.getDurationAtOffset(offset);
            }
        };

        Downtime.prototype._setDurations = function () {
            var converter, durations, firstDate, lastDate;
            converter = new RG.Utils.UnitDurationConverter(this.unit.constructor);
            durations = this.model.getDurations();
            firstDate = this.model.getDateRange().startDate;
            lastDate = _.sortBy([this._dateController._endDate(), this.model.getDateRange().endDate], function (d) {
                return d;
            })[0];
            if (this.model.transient) {
                firstDate = this._dateController._startDate();
            }
            this._unitDurations = converter.convertArray(durations, firstDate, lastDate);
        };

        Downtime.prototype._setOwnerFlag = function () {
            if (this.model.attributes.creatorId === this.currentUserId) {
                this.el.classList.add('mine');
            }
        };

        Downtime.prototype._getCaptionElements = function () {
            var detailedLabel, details, labelTop, multipleResourceImage, nonDetailedLabel, refreshableImage, savingElement;
            refreshableImage = "";
            savingElement = "";
            multipleResourceImage = "";
            if (this.model.get('refreshable')) {
                refreshableImage = '<img src="/assets/flag-detailed.png"></img>';
            }
            if (this.model.get('saving')) {
                savingElement = this._getSpinnerElement();
            }
            if (this.model.get('resourceIds').length > 1) {
                multipleResourceImage = "<span class='rg-icon--contacts'></span>";
            }
            details = '';
            if (this.model.getType()) {
                details = ' | ';
            }
            if (this.model.get('details')) {
                details += (this.model.escape('details')) + " | ";
            }
            labelTop = this._getLabelTopPosition() + "px";
            detailedLabel = document.createElement("div");
            detailedLabel.className = "label daily";
            detailedLabel.style.top = labelTop;
            detailedLabel.innerHTML = [savingElement, '<div class="booking-icons">', this._getTypeIcon(), refreshableImage, multipleResourceImage, "</div>", this.model.getType(), details, this.model.getDateTimeString()].join("");
            nonDetailedLabel = document.createElement("div");
            nonDetailedLabel.className = "label detailed";
            nonDetailedLabel.style.top = labelTop;
            nonDetailedLabel.innerHTML = ['<div class="detailed-icons">', savingElement, this._getTypeIcon(), refreshableImage, multipleResourceImage, '</div>', '<div class="detailed-info">', this.model.getDateTimeString(), '<br />', this.model.getType(), '<br />', this.model.escape('details'), '</div>'].join("");
            return [nonDetailedLabel, detailedLabel];
        };

        Downtime.prototype._getSpinnerElement = function () {
            return templates.find('calendar/light_spinner')();
        };

        Downtime.prototype._getTypeIcon = function () {
            return "<span class='" + (this.model.getTypeIcon()) + "'></span>";
        };

        Downtime.prototype._attachDragAndDrop = function () {
            if (!this.dragDrop) {
                this.dragDrop = new RG.Interactions.DragDropDowntime(this);
                this.dragDrop.attach();
            }
        };

        Downtime.prototype._attachResizable = function () {
            if (!this.resize) {
                this.resize = new RG.Interactions.ResizeDowntime(this);
                this.resize.attach();
            }
        };

        Downtime.prototype._getBookingResource = function () {
            return this.resource;
        };

        Downtime.prototype._attachEvents = function () {
            if (!this.model.id) {
                return;
            }
            if (RG.Utils.Permissions.canManageDowntime(this.model)) {
                this._attachDragAndDrop();
            }
            if (RG.Utils.Permissions.canManageDowntime(this.model) && !this.waiting) {
                this._attachResizable();
            }
        };

        Downtime.prototype._isTransientInvalidated = function () {
            return this.model.transient && !RG.Utils.DateComparator.equalsYMD(this.model.firstDate, this._dateController._startDate());
        };

        return Downtime;

    })(RG.Views.Resource.Booking);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.UnitDurationBlocks = (function (superClass) {
        extend(UnitDurationBlocks, superClass);

        function UnitDurationBlocks() {
            return UnitDurationBlocks.__super__.constructor.apply(this, arguments);
        }

        UnitDurationBlocks.prototype.className = 'blocks';

        UnitDurationBlocks.prototype._ensureElement = function () {
            if (!this.el) {
                this.el = document.createElement("div");
                return this.el.className = this.className;
            }
        };

        UnitDurationBlocks.prototype.initialize = function (options) {
            this.unit = options.unit;
        };

        UnitDurationBlocks.prototype.createItemView = function (options) {
            return new RG.Views.Resource.UnitDurationLine({
                model: options.model,
                minutesPerLine: this.unit.getMinutesPerUtilisationLine()
            });
        };

        return UnitDurationBlocks;

    })(RG.Support.ArrayView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Line = (function (superClass) {
        extend(Line, superClass);

        function Line() {
            return Line.__super__.constructor.apply(this, arguments);
        }

        Line.prototype.className = 'resource-line';

        Line.prototype.itemView = RG.Views.Resource.TimeUnit;

        Line.prototype.initialize = function (options) {
            this._bookingFormDialogFactory = options.bookingFormDialogFactory;
            this._downtimeFormDialogFactory = options.downtimeFormDialogFactory;
            this.dateController = options.dateController;
            this.currentDate = options.currentDate || new RG.Models.CurrentDate(RG.Utils.getTodayISO());
            this.availabilityToggle = options.availabilityToggle;
            this._colorSource = options.colorSource;
            this.listenTo(this.currentDate, 'change', this._rerenderUnit);
            this.listenTo(this.dateController, 'append', this._appendFragment);
            this.listenTo(this.dateController, 'prepend', this._prependFragment);
            this.listenTo(this._colorSource, 'change:mode', this._resetColor);
            this.listenTo(this.model.availability, 'refresh', this._refreshAvailability);
            this.listenTo(this.model.availability, 'refreshUtilisation maxAvailabilityChanged', this._renderUtilisation);
            this.listenTo(this.model.bookings, 'add change remove', this._notifyBookingChanged);
            this.listenTo(this.collection, 'change', this._resizeTimeAllocationWidths);
        };

        Line.prototype.createItemView = function (options) {
            return new this.itemView({
                availabilityToggle: this.availabilityToggle,
                dateController: this.dateController,
                currentDate: this.currentDate,
                model: options.model,
                resource: this.model,
                colorSource: this._colorSource,
                bookingFormDialogFactory: this._bookingFormDialogFactory,
                downtimeFormDialogFactory: this._downtimeFormDialogFactory,
                resourceLine: this
            });
        };

        Line.prototype.render = function () {
            RG.backburner.deferOnce('render', this, this._render);
            return this;
        };

        Line.prototype._render = function () {
            var i, len, model, ref;
            this.close();
            ref = this.collection.models;
            for (i = 0, len = ref.length; i < len; i++) {
                model = ref[i];
                this.addItem(model);
            }
            this.$el.attr('data-resource-id', this.model.cid);
            this._attachDragToCreateInteraction();
            this._rendered = true;
            this._fragment = document.createDocumentFragment();
        };

        Line.prototype.remove = function () {
            this._detachInteractions();
            Line.__super__.remove.apply(this, arguments);
        };

        Line.prototype._detachInteractions = function () {
            this.dragInteraction.detach();
            this.dragCustomAvailabilityInteraction.detach();
        };

        Line.prototype._attachDragToCreateInteraction = function () {
            this.dragInteraction = new RG.Interactions.DragToCreate(this);
            this.dragInteraction.attach();
            this.dragCustomAvailabilityInteraction = new RG.Interactions.DragToCreateCustomAvailability(this);
            this.dragCustomAvailabilityInteraction.attach();
        };

        Line.prototype._insertView = function (view, model) {
            var element;
            if (!this._rendered) {
                return Line.__super__._insertView.apply(this, arguments);
            }
            element = view.render().el;
            if (model === this.collection.first()) {
                this._fragment.insertBefore(element, this._fragment.firstChild);
            } else {
                this._fragment.appendChild(element);
            }
        };

        Line.prototype._appendFragment = function () {
            var _, minUnit, ref, view;
            if (!this._rendered) {
                return;
            }
            this.el.appendChild(this._fragment);
            this._isListeningToGroup = false;
            this._fragment = document.createDocumentFragment();
            minUnit = this.collection.min(function (day) {
                return day.date.valueOf();
            });
            this.collectionViews[minUnit.cid].rerender();
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                view.rerenderIfTimeAllocationsOverextend();
                view.resetUtilisationHeight();
            }
        };

        Line.prototype._prependFragment = function () {
            var _, ref, view;
            if (!this._rendered) {
                return;
            }
            this.el.insertBefore(this._fragment, this.el.firstChild);
            this._isListeningToGroup = false;
            this._fragment = document.createDocumentFragment();
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                view.rerenderIfTimeAllocationsOverextend();
                view.resetUtilisationHeight();
            }
        };

        Line.prototype._resetColor = function () {
            return this.forEach(function (view) {
                return view.resetColor();
            });
        };

        Line.prototype._rerenderUnit = function () {
            return this.forEach(function (view) {
                return view.render();
            });
        };

        Line.prototype._refreshAvailability = function (range) {
            return this.forEach(function (view) {
                return view.refreshInRange(range);
            });
        };

        Line.prototype._renderUtilisation = function () {
            return this.forEach(function (view) {
                return view.renderUtilisationAndAvailableMinutes();
            });
        };

        Line.prototype._notifyBookingChanged = function (booking) {
            return this.forEach(function (view) {
                return view.bookingChanged(booking);
            });
        };

        Line.prototype._resizeTimeAllocationWidths = function () {
            return this.forEach(function (view) {
                return view.resizeTimeAllocationWidths();
            });
        };

        return Line;

    })(RG.Support.CollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.Lines = (function (superClass) {
        extend(Lines, superClass);

        function Lines() {
            return Lines.__super__.constructor.apply(this, arguments);
        }

        Lines.prototype.itemView = RG.Views.Resource.Line;

        Lines.prototype.id = 'resources';

        Lines.prototype.initialize = function (options) {
            var availabilityToggle;
            this.listenTo(this.collection, 'change:visible', this._setVisibility);
            this.dateController = options.dateController;
            this.timeUnits = options.timeUnits;
            this._colorSource = options.colorSource;
            this._bookingFormDialogFactory = options.bookingFormDialogFactory;
            this._downtimeFormDialogFactory = options.downtimeFormDialogFactory;
            this._customAvailabilityDialogFactory = options.customAvailabilityDialogFactory;
            availabilityToggle = window.rgStorage.get('availabilityToggle');
            this.availabilityToggle = new RG.Utils.AvailabilityToggle(this, availabilityToggle === "true");
            this.currentDate = options.currentDate || new RG.Models.CurrentDate(RG.Utils.getTodayISO());
            this.listenTo(this.timeUnits, 'append prepend', this.clearInvisibleViews);
        };

        Lines.prototype.createItemView = function (options) {
            var view;
            view = new this.itemView({
                availabilityToggle: this.availabilityToggle,
                dateController: this.dateController,
                collection: this.timeUnits,
                model: options.model,
                currentDate: this.currentDate,
                colorSource: this._colorSource,
                bookingFormDialogFactory: this._bookingFormDialogFactory,
                downtimeFormDialogFactory: this._downtimeFormDialogFactory,
                customAvailabilityDialogFactory: this._customAvailabilityDialogFactory
            });
            return view;
        };

        Lines.prototype._setVisibility = function () {
            var invisibleElements, visibleElements;
            visibleElements = [];
            invisibleElements = [];
            this.collection.models.forEach((function (_this) {
                return function (ri) {
                    var view;
                    view = _this.collectionViews[ri.cid];
                    if (ri.visible) {
                        visibleElements.push(view.el);
                    } else {
                        invisibleElements.push(view.el);
                    }
                };
            })(this));
            invisibleElements.forEach(function (el) {
                return el.style.display = "none";
            });
            visibleElements.forEach(function (el) {
                return el.style.display = "";
            });
            this.availabilityToggle._refreshCalendar();
        };

        return Lines;

    })(RG.Support.CachedCollectionView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.TimeAllocations = (function (superClass) {
        extend(TimeAllocations, superClass);

        function TimeAllocations() {
            return TimeAllocations.__super__.constructor.apply(this, arguments);
        }

        TimeAllocations.prototype.className = 'bookings';

        TimeAllocations.prototype.initialize = function (options) {
            this.availability = options.availability;
            this.dateController = options.dateController;
            this.bookingAnchorCount = options.bookingAnchorCount;
            this.timeAllocations = options.timeAllocations;
            this.bookingAnchors = [];
            this.colorSource = options.colorSource;
            this.unit = options.unit;
            this._bookingFormDialogFactory = options.bookingFormDialogFactory;
            this._downtimeFormDialogFactory = options.downtimeFormDialogFactory;
            this.rendered = false;
            this.collectionViews = {};
        };

        TimeAllocations.prototype.addBooking = function (model) {
            var child, target, view;
            if (target = this.bookingAnchors[model.layer]) {
                view = this.createItemView(model);
                while ((child = target.firstChild)) {
                    target.removeChild(child);
                }
                target.appendChild(view.render().el);
                this.collectionViews[model.cid] = view;
            }
        };

        TimeAllocations.prototype.createItemView = function (model) {
            if (model.constructor === RG.Models.Booking) {
                return new RG.Views.Resource.Booking({
                    dateController: this.dateController,
                    bookingFormFactory: this._bookingFormDialogFactory,
                    model: model,
                    unit: this.unit,
                    availability: this.availability,
                    colorSource: this.colorSource
                });
            } else {
                return new RG.Views.Resource.Downtime({
                    model: model,
                    unit: this.unit,
                    availability: this.availability,
                    colorSource: this.colorSource,
                    downtimeFormFactory: this._downtimeFormDialogFactory,
                    dateController: this.dateController
                });
            }
        };

        TimeAllocations.prototype.remove = function () {
            var cid, ref, view;
            TimeAllocations.__super__.remove.apply(this, arguments);
            ref = this.collectionViews;
            for (cid in ref) {
                view = ref[cid];
                view.remove();
            }
        };

        TimeAllocations.prototype.render = function () {
            var cid, j, len, model, ref, ref1, view;
            this._fragment = document.createDocumentFragment();
            this._setBookingAnchors();
            ref = this.collectionViews;
            for (cid in ref) {
                view = ref[cid];
                view.remove();
            }
            ref1 = this.timeAllocations;
            for (j = 0, len = ref1.length; j < len; j++) {
                model = ref1[j];
                this.addBooking(model);
            }
            this.el.appendChild(this._fragment);
            return this;
        };

        TimeAllocations.prototype._setBookingAnchors = function () {
            var child, elem, i, j, ref;
            this.bookingAnchors = [];
            while ((child = this.el.firstChild)) {
                this.el.removeChild(child);
            }
            if (this.bookingAnchorCount > 0) {
                for (i = j = 1, ref = this.bookingAnchorCount; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                    elem = document.createElement("div");
                    elem.className = "booking-anchor";
                    this._fragment.appendChild(elem);
                    this.bookingAnchors.push(elem);
                }
            }
        };

        TimeAllocations.prototype.resetColor = function () {
            var _, ref, view;
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                view.resetColor();
            }
        };

        TimeAllocations.prototype.resizeWidth = function () {
            var _, ref, view;
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                view.resizeWidth();
            }
        };

        TimeAllocations.prototype.rerenderIfOverExtends = function () {
            var _, ref, view;
            ref = this.collectionViews;
            for (_ in ref) {
                view = ref[_];
                view.rerenderIfOverExtends();
            }
        };

        return TimeAllocations;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Resource.UnitDurationLine = (function (superClass) {
        extend(UnitDurationLine, superClass);

        UnitDurationLine.prototype.className = 'unit';

        UnitDurationLine.prototype._ensureElement = function () {
            if (!this.el) {
                this.el = document.createElement("div");
                return this.el.className = this.className;
            }
        };

        UnitDurationLine.prototype._removeElement = function () {
            if (this.el.parentNode) {
                return this.el.parentNode.removeChild(this.el);
            }
        };

        function UnitDurationLine(options) {
            UnitDurationLine.__super__.constructor.apply(this, arguments);
            this.minutesPerLine = options.minutesPerLine;
            this.listenTo(this.model, 'change', this.render);
        }

        UnitDurationLine.prototype.render = function () {
            var color, fragment, minutes;
            minutes = this.model.attributes.minutes;
            color = this.model.attributes.color;
            fragment = document.createDocumentFragment();
            while (minutes / this.minutesPerLine > 1) {
                minutes -= this.minutesPerLine;
                fragment.appendChild(this._createFullLine(color.toString()));
            }
            if (minutes > 0) {
                fragment.appendChild(this._createLine(minutes / this.minutesPerLine, color.toString()));
            }
            if (this.model.get('waiting')) {
                this.el.classList.add("waiting-list");
            }
            this.el.appendChild(fragment);
            return this;
        };

        UnitDurationLine.prototype._createFullLine = function (color) {
            var el;
            el = document.createElement("span");
            el.style["background-color"] = color;
            return el;
        };

        UnitDurationLine.prototype._createLine = function (ratio, color) {
            var el;
            el = document.createElement("span");
            el.style["background-color"] = color;
            el.style.width = (ratio * 100) + "%";
            return el;
        };

        return UnitDurationLine;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty,
        slice = [].slice;

    RG.Views.Resource.UtilisationBlock = (function (superClass) {
        extend(UtilisationBlock, superClass);

        function UtilisationBlock() {
            return UtilisationBlock.__super__.constructor.apply(this, arguments);
        }

        UtilisationBlock.prototype.className = 'utilisation';

        UtilisationBlock.prototype.initialize = function (options) {
            this.usedMinutes = options.usedMinutes;
            this.availableMinutes = options.availableMinutes;
            this.overtimeMinutes = options.overtimeMinutes || 0;
            this.minutesPerLine = options.minutesPerLine;
            this.height = options.height;
        };

        UtilisationBlock.prototype.resetUtilisationHeight = function (height) {
            if (height === this.height) {
                return;
            }
            this.height = height;
            return this._setHeight();
        };

        UtilisationBlock.prototype.render = function () {
            var availableFormatted, availableMinutes, lineAvailable, lines, overtimeMinutes, ratio, ref, remainingMinutesInLine, renderableNormalMinutes, renderableUnusedNormalMinutes, renderableUnusedOvertimeMinutes, renderableUsedOvertimeMinutes, unit, unusedNormalMinutes, unusedOvertimeMinutes, usedMinutes, usedNormalMinutes, usedOvertimeMinutes, width;
            availableFormatted = RG.Utils.TimeFormatter.formatMinutes(this.availableMinutes - this.usedMinutes);
            //this.el.innerHTML = "<div class=\"time-available\">" + availableFormatted + "<div class=\"time-available-linebreak\"></div>free</div>";
            availableMinutes = this.availableMinutes;
            usedMinutes = this.usedMinutes;
            overtimeMinutes = this.overtimeMinutes > this.availableMinutes ? this.availableMinutes : this.overtimeMinutes;
            lines = [];
            usedNormalMinutes = usedMinutes > availableMinutes - overtimeMinutes ? availableMinutes - overtimeMinutes : usedMinutes;
            unusedNormalMinutes = usedMinutes < availableMinutes - overtimeMinutes ? availableMinutes - overtimeMinutes - usedMinutes : 0;
            usedOvertimeMinutes = usedMinutes > availableMinutes - overtimeMinutes ? -(availableMinutes - usedMinutes - overtimeMinutes) : 0;
            unusedOvertimeMinutes = overtimeMinutes - usedOvertimeMinutes;
            while (availableMinutes > 0) {
                width = availableMinutes / this.minutesPerLine;
                if (width > 1) {
                    width = 1;
                }
                lineAvailable = availableMinutes < this.minutesPerLine ? availableMinutes : this.minutesPerLine;
                lines = [];
                remainingMinutesInLine = lineAvailable;
                if (remainingMinutesInLine > 0 && usedNormalMinutes > 0) {
                    renderableNormalMinutes = usedNormalMinutes > remainingMinutesInLine ? remainingMinutesInLine : usedNormalMinutes;
                    ratio = renderableNormalMinutes / lineAvailable;
                    lines.push({
                        width: ratio,
                        color: "#9F9F9F",
                        className: "unit--used-normal"
                    });
                    remainingMinutesInLine -= renderableNormalMinutes;
                    availableMinutes -= renderableNormalMinutes;
                    usedNormalMinutes -= renderableNormalMinutes;
                }
                if (remainingMinutesInLine > 0 && unusedNormalMinutes > 0) {
                    renderableUnusedNormalMinutes = unusedNormalMinutes > remainingMinutesInLine ? remainingMinutesInLine : unusedNormalMinutes;
                    ratio = renderableUnusedNormalMinutes / lineAvailable;
                    lines.push({
                        width: ratio,
                        color: "#fff",
                        className: "unit--unused-normal"
                    });
                    remainingMinutesInLine -= renderableUnusedNormalMinutes;
                    availableMinutes -= renderableUnusedNormalMinutes;
                    unusedNormalMinutes -= renderableUnusedNormalMinutes;
                }
                if (remainingMinutesInLine > 0 && usedOvertimeMinutes > 0) {
                    renderableUsedOvertimeMinutes = usedOvertimeMinutes > remainingMinutesInLine ? remainingMinutesInLine : usedOvertimeMinutes;
                    ratio = renderableUsedOvertimeMinutes / lineAvailable;
                    lines.push({
                        width: ratio,
                        color: "#B47972",
                        className: "unit--used-overtime"
                    });
                    remainingMinutesInLine -= renderableUsedOvertimeMinutes;
                    availableMinutes -= renderableUsedOvertimeMinutes;
                    usedOvertimeMinutes -= renderableUsedOvertimeMinutes;
                }
                if (remainingMinutesInLine > 0 && unusedOvertimeMinutes > 0) {
                    renderableUnusedOvertimeMinutes = unusedOvertimeMinutes > remainingMinutesInLine ? remainingMinutesInLine : unusedOvertimeMinutes;
                    ratio = renderableUnusedOvertimeMinutes / lineAvailable;
                    lines.push({
                        width: ratio,
                        color: "#F7BCB5",
                        className: "unit--unused-overtime"
                    });
                    remainingMinutesInLine -= renderableUnusedOvertimeMinutes;
                    availableMinutes -= renderableUnusedOvertimeMinutes;
                    unusedOvertimeMinutes -= renderableUnusedOvertimeMinutes;
                }
                unit = (ref = RG.Views.Calendar.UtilisationBarFactory).create.apply(ref, [width, "unit"].concat(slice.call(lines)));
                this.el.appendChild(unit);
            }
            this._setHeight();
            return this;
        };

        UtilisationBlock.prototype._setHeight = function () {
            if (this.height != null) {
                return this.el.style.height = this.height.toString() + "px";
            }
        };

        return UtilisationBlock;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; },
        extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.ClientProject = (function (superClass) {
        extend(ClientProject, superClass);

        function ClientProject() {
            this._setNewValue = bind(this._setNewValue, this);
            this._selectedProjectClientChanged = bind(this._selectedProjectClientChanged, this);
            return ClientProject.__super__.constructor.apply(this, arguments);
        }

        ClientProject.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            this.clients = options.clients || new RG.Collections.Clients;
            this.projects = options.projects || new RG.Collections.Projects;
            this.resource = options.resource || null;
            this.container = options.container;
            this._selectedValue = options.selectedValue;
            this._originalValue = options.selectedValue;
            this.listenTo(this.clients, 'add', this.render);
            this.listenTo(this.clients, 'remove', this.render);
            this.listenTo(this.projects, 'add', this.render);
            this.listenTo(this.projects, 'remove', this.render);
            this.listenTo(this.clients, 'add', this._setNewValue);
            return this.listenTo(this.projects, 'add', this._setNewValue);
        };

        ClientProject.prototype._getSelectorOptions = function (selected) {
            var archiveFilter, commands, elements, groups;
            if (selected == null) {
                selected = null;
            }
            archiveFilter = (function (_this) {
                return function (obj) {
                    return !obj.get('archived') || (_this._originalValue && _this._originalValue === obj.cid);
                };
            })(this);
            groups = this.clients.filter(archiveFilter).map(function (c) {
                return c.toJSON();
            });
            elements = this.projects.filter(archiveFilter).map(function (p) {
                var project, ref;
                project = p.toJSON();
                project.client_id = ((ref = p.get('client')) != null ? ref.get('id') : void 0) || null;
                return project;
            });
            commands = [];
            if (RG.Utils.Permissions.canAddProject(this.resource)) {
                commands.push({
                    text: 'New project ...',
                    onSelect: (function (_this) {
                        return function () {
                            _this.modal = new RG.Views.Dialogs.NewProject({
                                clients: _this.clients,
                                projectCodes: _this.getAllProjectCodes()
                            });
                            _this._bindProjectEvents(_this.modal);
                            return _this.trigger('changeOverlay', _this.modal, {
                                className: 'overlay project'
                            });
                        };
                    })(this)
                });
            }
            if (RG.Utils.Permissions.canAddClient(this.resource)) {
                commands.push({
                    text: 'New client ...',
                    onSelect: (function (_this) {
                        return function () {
                            _this.modal = new RG.Views.Dialogs.NewClient;
                            _this.modal.on('cancelled', function () {
                                return _this.trigger('cancelled');
                            }, _this);
                            return _this.trigger('changeOverlay', _this.modal, {
                                className: 'overlay client'
                            });
                        };
                    })(this)
                });
            }
            return {
                groups: groups,
                elements: elements,
                selected: selected,
                groupId: function (group) {
                    return group.id;
                },
                elementId: function (element) {
                    return element.id;
                },
                groupIdFromElement: function (element) {
                    return element.client_id;
                },
                groupDisplay: function (group) {
                    return group.name;
                },
                groupSearch: function (group) {
                    return group.name;
                },
                elementSearch: function (element) {
                    return element.name + ' ' + element.project_code;
                },
                elementDisplay: function (element) {
                    var name;
                    name = element.name;
                    if (element.project_code) {
                        name += ' (' + element.project_code + ')';
                    }
                    return name;
                },
                onChange: this._selectedProjectClientChanged,
                commands: commands,
                style: {
                    zIndex: 1
                },
                ungroupedText: 'PROJECTS WITHOUT ASSIGNED CLIENTS',
                emptyText: '',
                clearSelectionText: 'Clear selection',
                useAggressiveHandler: true
            };
        };

        ClientProject.prototype.render = function () {
            var ref;
            if ((ref = this._selector) != null) {
                ref.destroy();
            }
            this._selector = RGComponents.createGroupedSelector(this.el, this._getSelectorOptions());
            return this;
        };

        ClientProject.prototype._selectedProjectClientChanged = function (selection) {
            if (!selection) {
                this._selectedValue = null;
            } else if (selection.type === 'element') {
                this._selectedValue = this.projects.findWhere({
                    id: selection.id
                });
            } else {
                this._selectedValue = this.clients.findWhere({
                    id: selection.id
                });
            }
            return this.trigger('change', this._selectedValue);
        };

        ClientProject.prototype._setNewValue = function (newItem) {
            return this.setSelectedValue(newItem.cid);
        };

        ClientProject.prototype.getSelectedOption = function (suppress) {
            return this._selectedValue;
        };

        ClientProject.prototype.setSelectedValue = function (cid) {
            var models, selected, target;
            models = _.flatten([this.projects.models, this.clients.models]);
            target = models.find(function (m) {
                return m.cid === cid;
            });
            this._selectedValue = target;
            selected = null;
            if (target) {
                selected = {
                    type: target instanceof RG.Models.Project ? 'element' : 'group',
                    id: target.get('id')
                };
            }
            RGComponents.createGroupedSelector(this.el, this._getSelectorOptions(selected));
            return this.trigger('change', target);
        };

        ClientProject.prototype._bindProjectEvents = function (projectView) {
            projectView.on('cancelled', (function (_this) {
                return function () {
                    return _this.trigger('cancelled');
                };
            })(this), this);
            return projectView.on('changeOverlay', (function (_this) {
                return function (view, options) {
                    if (!options.newClient) {
                        _this.modal = new RG.Views.Dialogs.NewProject({
                            clients: _this.clients,
                            projectCodes: _this.getAllProjectCodes(),
                            selectedClient: options.client
                        });
                        _this._bindProjectEvents(_this.modal);
                        view = _this.modal;
                    }
                    return _this.trigger('changeOverlay', view, options);
                };
            })(this));
        };

        ClientProject.prototype.getAllProjectCodes = function () {
            var dirty_project_codes;
            dirty_project_codes = this.projects.models.map(function (p) {
                return p.get('project_code');
            });
            return dirty_project_codes.filter(function (p) {
                return !!p;
            });
        };

        ClientProject.prototype.remove = function () {
            var ref, ref1, ref2, ref3;
            if ((ref = this.modal) != null) {
                ref.remove();
            }
            if ((ref1 = this.clients) != null) {
                ref1.remove();
            }
            if ((ref2 = this.projects) != null) {
                ref2.remove();
            }
            if ((ref3 = this._selector) != null) {
                ref3.destroy();
            }
            return ClientProject.__super__.remove.apply(this, arguments);
        };

        return ClientProject;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.ColorPicker = (function (superClass) {
        extend(ColorPicker, superClass);

        function ColorPicker() {
            return ColorPicker.__super__.constructor.apply(this, arguments);
        }

        ColorPicker.prototype.template = templates.find('selectors/color_picker');

        ColorPicker.prototype.defaultColors = ["d5ded9", "bfbfbf", "ece5ce", "f1d4af", "e8cb05", "c68c00", "e08e79", "ffb400", "ff9f80", "ff6600", "ef247f", "ea1414", "b70655", "bb4b01", "850505", "80056d", "d818bb", "a675ff", "683db8", "16287f", "0264b0", "2654ea", "59b2f6", "18cfd6", "09ca7a", "b9d020", "719004", "0e6c6f", "007f4b", "9c8803"];

        ColorPicker.prototype.events = {
            'click .dropdown-toggle, .dropdown-menu a': 'toggleColorbox',
            'click ul.dropdown-menu.color-palette a': 'colorPalette'
        };

        ColorPicker.prototype.initialize = function (options) {
            if (options == null) {
                options = {};
            }
            return this.colors = options.colors || this.defaultColors;
        };

        ColorPicker.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        ColorPicker.prototype.colorPalette = function (e) {
            var color, elem, parentColorPicker, parentSelect, selectedColorBlock;
            e.preventDefault();
            e.stopPropagation();
            elem = $(e.currentTarget);
            color = elem.attr('data-color');
            parentColorPicker = elem.closest('.color-picker');
            parentSelect = parentColorPicker.parent().find('.color-picker-select');
            selectedColorBlock = parentColorPicker.find('.selected-color');
            parentSelect.val(color);
            return selectedColorBlock.css('background-color', '#' + color);
        };

        ColorPicker.prototype.toggleColorbox = function (e) {
            e.preventDefault();
            e.stopPropagation();
            return this.$('.color-picker').toggleClass('open');
        };

        ColorPicker.prototype._fillValues = function () {
            var a, color, i, len, li, ref, results;
            ref = this.colors;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                color = ref[i];
                this.$('.js-select').append($(document.createElement('option')).attr('value', color).text(color));
                li = $(document.createElement('li'));
                a = $(document.createElement('a')).css('background-color', "#" + color).attr('data-color', color);
                results.push(this.$('.js-displayed-colors').append(li.append(a)));
            }
            return results;
        };

        return ColorPicker;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.Duration = (function (superClass) {
        extend(Duration, superClass);

        function Duration() {
            return Duration.__super__.constructor.apply(this, arguments);
        }

        Duration.prototype.template = templates.find('selectors/duration');

        Duration.prototype.className = "hours-per-day";

        Duration.prototype.events = {
            "change input": "triggerValidate",
            "keyup input": "triggerValidate"
        };

        Duration.prototype.initialize = function (options) {
            this.duration = options.duration;
            this.storageTypeName = options.typeName;
            return this.inlineHelpText = options.inlineHelpText || 'Please fill in a booking duration.';
        };

        Duration.prototype.getBookingDurationDTO = function () {
            return new RG.DTO.BookingDuration({
                duration: this.getDuration()
            });
        };

        Duration.prototype.getDuration = function () {
            var hours, minutes;
            hours = parseInt(this._getHoursFieldEl().val(), 10);
            minutes = parseInt(this._getMinutesFieldEl().val(), 10);
            if (isNaN(hours)) {
                hours = 0;
            }
            if (isNaN(minutes)) {
                minutes = 0;
            }
            return (hours * 60) + minutes;
        };

        Duration.prototype.render = function () {
            this.$el.html(this.template());
            this._fillValues();
            return this;
        };

        Duration.prototype.setDuration = function (duration) {
            this.duration = duration;
            return this._fillValues();
        };

        Duration.prototype.toggleError = function (error) {
            return this.$(".help-inline").toggle(error);
        };

        Duration.prototype.triggerValidate = function () {
            if (this.getDuration() !== 0) {
                window.rgStorage.set("Duration:" + this.storageTypeName, this.getDuration());
            }
            this.validate(true);
            return true;
        };

        Duration.prototype.validate = function (trigger) {
            var duration, error;
            error = false;
            duration = this.getDuration();
            if (duration > 0) {
                if (duration > (24 * 60)) {
                    error = true;
                    this.$(".help-inline.error").text("Must be less than 24 hours.");
                } else {
                    error = false;
                }
            } else {
                error = true;
                this.$(".help-inline.error").text("Please fill in a booking duration.");
            }
            this.toggleError(error);
            if (trigger) {
                this.trigger('validate');
            }
            return !error;
        };

        Duration.prototype._fillValues = function () {
            var hours, minutes;
            hours = Math.floor(this.duration / 60);
            minutes = this.duration % 60;
            this.$(".help-inline").text(this.inlineHelpText);
            this._getHoursFieldEl().val(hours);
            this._getMinutesFieldEl().val(minutes);
            return this.validate();
        };

        Duration.prototype._getHoursFieldEl = function () {
            return this.$("#booking-hour-time");
        };

        Duration.prototype._getMinutesFieldEl = function () {
            return this.$("#booking-minute-time");
        };

        return Duration;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    var extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    RG.Views.Selectors.Resource = (function (superClass) {
        extend(Resource, superClass);

        function Resource() {
            return Resource.__super__.constructor.apply(this, arguments);
        }

        Resource.prototype.template = templates.find('selectors/resource');

        Resource.prototype.events = {
            'change .selector select': '_updateSelectedResource',
            'click .alt-toggle a': '_showSelectBox'
        };

        Resource.prototype.initialize = function (options) {
            this.resources = options.resources;
            return this.selected = options.selected;
        };

        Resource.prototype.getSelectedResource = function () {
            return this.selected;
        };

        Resource.prototype.render = function () {
            this.$el.html(this.template());
            this._populateSelectBox();
            if (this.selected) {
                this._selectResourceByCid(this.selected.cid);
            }
            return this;
        };

        Resource.prototype._populateSelectBox = function () {
            var bookableResources, i, len, optionsHtml, ref, resource, selector;
            bookableResources = [];
            selector = this.el.querySelector(".selector select");
            optionsHtml = [];
            ref = this.resources.models;
            for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                if (resource.isBookable()) {
                    optionsHtml.push("<option value=\"" + resource.cid + "\">" + (resource.getName()) + "</option>");
                }
            }
            return $(selector).html(optionsHtml.join(""));
        };

        Resource.prototype._selectResourceByCid = function (cid) {
            return this.$(".selector select").val(cid).trigger('change');
        };

        Resource.prototype._showSelectBox = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.$(".current, .alt-toggle").hide();
            return this.$(".selector").show();
        };

        Resource.prototype._updateSelectedResource = function () {
            var resourceAvatar;
            this.selected = this.resources.find((function (_this) {
                return function (ri) {
                    return ri.cid === _this.$(".selector select").val();
                };
            })(this));
            this.$(".current span.resource-name").text(this.selected.get('name'));
            if (this.selected.hasAvatar()) {
                resourceAvatar = new RG.Views.Resource.Avatar({
                    resource: this.selected
                });
                this.$(".current").prepend(resourceAvatar.render().el);
            }
            this.trigger('change', this.selected);
            return false;
        };

        return Resource;

    })(RG.Views.BaseView);

}).call(this);
;
(function () {
    window.RG.Popovers = new RG.Utils.PopoverManager;

    window.RG.renderer = new RG.Renderer.Renderer;

}).call(this);
;
(function () {
    if (!window.RGComponents || !window.RGComponents.createGiftDropdown) return;

    var CSRFToken = null;

    function getCSRFToken() {
        if (!CSRFToken)
            CSRFToken = $('meta[name="csrf-token"]').attr('content');
        return CSRFToken;
    }

    var $giftIcon = $('<li><div/></li>').css({
        position: 'relative',
        width: '60px',
        height: '40px',
        marginRight: '10px'
    });

    $giftIcon.children().css({
        position: 'absolute',
        width: '100%',
        height: '100%'
    });

    $('nav .right-menu').prepend($giftIcon);

    function fetchItems() {
        return new Promise(function (resolve, reject) {
            window.addEventListener('load', function listen() {
                window.removeEventListener('load', listen);
                $.ajax(
                    'http://localhost/EMRMAPI/product_updates/heartbeats',
                    {
                        method: 'GET',
                        dataType: 'json'
                    }
                ).fail(reject).done(resolve);
            })
        });
    }

    function updateLastReadAt() {
        return new Promise(function (resolve, reject) {
            $.ajax(
                '/v1/update_last_product_update_read_at',
                {
                    method: 'PUT',
                    headers: { 'X-CSRF-Token': getCSRFToken() }
                }
            ).fail(reject).done(resolve);
        });
    }

    function trackOpen() {
        window.analytics && window.analytics.track('Schedule Gift popover opened');
    }

    function trackClose() {
        window.analytics && window.analytics.track('Schedule Gift popover closed');
    }

    RGComponents.createGiftDropdown(
        $giftIcon.children().get(0),
        {
            fetchItems: fetchItems,
            updateLastReadAt: updateLastReadAt,
            lastReadAt: window.RGComponents.productUpdates.lastReadAt,
            message: window.RGComponents.productUpdates.giftMessage,
            basePath: '/assets/backpack/',
            blogLink: RGComponents.blogLink,
            animationTarget: RGComponents.animationTarget,
            trackOpen: trackOpen,
            trackClose: trackClose
        }
    );
})();
;
(function () {

    function warnBeforeNavigation(ev) {
        ev.preventDefault();
        // This is for older browsers; modern browsers do not allow customisation of the beforeunload dialog
        ev.returnValue = 'There are still changes that are being sent to the server.\n\nAre you sure you want to navigate away from this page?';
        return ev.returnValue;
    }

    var $doc = $(document);
    var $win = $(window);

    // preload the spinner image
    new Image().src = '/assets/calendar/spinner.gif';

    var tooltip = [
        'data-toggle="tooltip"',
        'data-html="true"',
        'data-placement="left"',
        'data-original-title="Syncing"'
    ].join(' ');

    var $spinner = $(
        '<li style="margin: 8px; padding: 0 16px;" ' + tooltip + '>' +
        '<img src="/assets/calendar/spinner.gif" style="width:24px;height:24px"/>' +
        '</li>'
    );

    $spinner.tooltip();

    $('#header .main .right-menu').prepend($spinner.hide());

    var timer = null;
    var FEEDBACK_DELAY = 1500;

    $doc.ajaxStart(function () {
        timer = setTimeout(function () {
            $spinner.show();
        }, FEEDBACK_DELAY);
        $win.on('beforeunload', warnBeforeNavigation);
    });

    $doc.ajaxStop(function () {
        clearTimeout(timer);
        timer = null;
        $spinner.hide();
        $win.off('beforeunload', warnBeforeNavigation);
    });

})();
;
(function () {
    $(function () {
        var $doc, $window, bookingScroller, host, nextVisible, previousVisible, ref, subdomain;
        window.clients = new RG.Collections.Clients;
        window.deletedClients = new RG.Collections.Clients;
        window.projects = new RG.Collections.Projects;
        window.deletedProjects = new RG.Collections.Projects;
        if (window.resources == null) {
            window.resources = new RG.Collections.ResourceInstances;
        }
        window.resourceTypes = new RG.Collections.ResourceTypes;
        window.bookers = new RG.Collections.Bookers;
        window.deletedBookers = new RG.Collections.Bookers;
        window.savedFilters = new RG.Collections.SavedFilters;
        window.downtimeTypes = new RG.Collections.DowntimeTypes;
        window.downtimes = new RG.Collections.Downtimes;
        window.currentUserDate = new RG.Models.CurrentDate(RG.Utils.getTodayISO());
        window.downtimes.on("change", function (model) {
            var addedResources, i, j, len, len1, newIds, previousIds, removedResources, results, rid;
            previousIds = model.previousAttributes().resourceIds;
            newIds = model.get('resourceIds') || [];
            if (previousIds && !_.isEqual(previousIds, newIds)) {
                removedResources = previousIds.filter(function (id) {
                    return newIds.indexOf(id) === -1;
                });
                for (i = 0, len = removedResources.length; i < len; i++) {
                    rid = removedResources[i];
                    window.downtimes.trigger("remove:resource_id:" + rid, model);
                }
                addedResources = newIds.filter(function (id) {
                    return previousIds.indexOf(id) === -1;
                });
                results = [];
                for (j = 0, len1 = addedResources.length; j < len1; j++) {
                    rid = addedResources[j];
                    results.push(window.downtimes.trigger("add:resource_id:" + rid, model));
                }
                return results;
            }
        });
        subdomain = window.location.host.substr(0, window.location.host.indexOf("."));
        RG.getApiRoot = function () {
            //return "/v1/" + subdomain;
            return "http://localhost:55959/v1/";
        };
        window.resources.reset([]);
        host = window.location.host.substr(0, window.location.host.indexOf("."));
        setTimeout(function () {
            return RG.Utils.BookingDataParser.boot(host);
        }, 50);
        window.update = function () {
            return Q.promise(function (resolve) {
                return setTimeout(function () {
                    RG.Utils.BookingDataParser.poll();
                    return resolve();
                }, 0);
            });
        };
        setInterval(window.update, 300000);
        $window = $(window);
        $doc = $(document);
        previousVisible = false;
        nextVisible = false;
        bookingScroller = function () {
            var booking, docHeight, docWidth, i, j, label, labels, len, len1, nextControl, padding, paddingStr, previousControl, rect, ref, shouldShowNext, shouldShowPrevious, windowHeight, windowLeft, windowTop, windowWidth;
            windowWidth = window.innerWidth;
            windowHeight = window.innerHeight;
            windowLeft = $window.scrollLeft();
            windowTop = $window.scrollTop();
            docWidth = $doc.width();
            docHeight = $doc.height();
            ref = $('.booking.sticky:visible');
            for (i = 0, len = ref.length; i < len; i++) {
                booking = ref[i];
                rect = booking.getBoundingClientRect();
                if (rect.left < windowWidth && rect.right > 250 && rect.top < windowHeight && rect.top > 110) {
                    padding = Math.max(0, 250 - rect.left);
                    paddingStr = padding + "px";
                    labels = booking.getElementsByClassName("label");
                    for (j = 0, len1 = labels.length; j < len1; j++) {
                        label = labels[j];
                        if (label.style.paddingLeft !== paddingStr) {
                            label.style.paddingLeft = paddingStr;
                        }
                    }
                }
            }
            shouldShowPrevious = windowLeft < 50;
            shouldShowNext = windowLeft > docWidth - windowWidth - 50;
            previousControl = $('.large-controls .previous-timeperiods');
            nextControl = $('.large-controls .next-timeperiods');
            if (shouldShowPrevious && !previousVisible) {
                previousVisible = true;
                previousControl.fadeIn();
            } else if (!shouldShowPrevious && previousVisible) {
                previousVisible = false;
                previousControl.fadeOut();
            }
            if (shouldShowNext && !nextVisible) {
                nextVisible = true;
                return nextControl.fadeIn();
            } else if (!shouldShowNext && nextVisible) {
                nextVisible = false;
                return nextControl.fadeOut();
            }
        };
        $window.scroll(bookingScroller);
        $window.on('touchmove', bookingScroller);
        return (ref = window.analytics) != null ? ref.track('Viewed Schedule') : void 0;
    });

    $(window).load(function () {
        var leftPos;
        leftPos = $(window).scrollLeft();
        $(window).scrollLeft(leftPos);
        return requestAnimationFrame(function () {
            return $(window).scrollLeft(leftPos);
        });
    });

}).call(this);